{
  "info": {
    "title": "Congressus API",
    "description": "# Introduction\nThe Congressus API allows you to interact with your Congressus administration. The API is RESTful and uses JSON\nto transport information.\n\nThis documentation aims to get you started with your first requests. Make sure to read this introduction completely to\nknow all aspects of our API.\n\n## REST basics\nA REST API describes the resources you can access in a clearly defined path structure. This documentation contains a\nreference for each resource in the API. Before you can use these resources, you need to know the basics of accessing\nthe Congressus REST API.\n\n**Paths and versioning**\n\nThe Congressus API resides on the following paths:\n\nhttps://api.congressus.nl/ `version` / `resource_path` ? `query_params`\n\n- The `version` part of the path indicates the version of the API you want to use. At this moment version v30 is the\n  current version. By pointing to a specific version, we can make sure you always can expect equal behaviour from our\n  API.\n- The `resource_path` part indicates the path of the resource you want to access. Specific paths to resources can be\n  found in the API documentation. Examples of resource paths are: /members to retrieve all members or\n  /member/ `obj_id` /statuses to create new member status for a member.\n- The `query_params` contains all filtering, ordering and pagination information.\n\n\n## Authentication\nThe current authentication flow present at Congressus API is by the use of the Bearer Token suggested by\nOAuth 2.0.\n\nTo interact with the Congressus API, you must authenticate by supplying the header `Authorization` with the\nvalue `Bearer {access_token}`.\n\n**How do I get an API key?**\n\nYou can create new apps and API keys in Congressus Manager\nthrough [this link](http://manager.congressus.localhost/settings/integrations/apps).\n\n## Requests\nThere are different approaches for making requests to our API. The command line tool [curl](https://curl.se/) is easy\nand fast for testing our API. When you want to integrate the API into your own software, you can choose to use a general\npurpose REST library or to [create your own API client library](https://github.com/OpenAPITools/openapi-generator) based\non our OpenAPI specs.\n\n## Responses\nCongressus uses conventional HTTP response codes to indicate success or failure of an API request. In general,\ncodes in the 2xx range indicate success, codes in the 4xx range indicate an error that resulted from the provided\ninformation (e.g. a required parameter was missing or input data was invalid), and codes in the 5xx range indicate\nan error with the Congressus API.\n\n## Pagination\nEndpoints returning a list of entities, are paginated to prevent large responses. To control the pagination, you can\nuse the `page` and `page_size` parameters. page determines which page to return (default: 1), page_size controls\nthe amount of entities to return (default: 25, maximum: 100).\n\nEach paginated response contains the following information:\n\n- `has_prev` bool\n- `prev_num` int with previous page number\n- `has next` bool\n- `next_num` int with next page number\n- `data` list with results on current page\n- `total` int with total number of results\n\n## Filtering\nMost list endpoints support filtering to get a subset of the available information. Filtering is done using the query.\nFor some filter attributes, filtering for multiple options is supported by adding the `<filter_attribute>=<value>`\nmultiple times. E.g. `category_id=1&category_id=2`.\n\n### Filtering on period\n\nFor some resources, a period filter is available. This filter is used to get a subset of the available information\nwithin a certain period. The period filter is used by adding the `period_filter` query parameter to the endpoint.\n\n**Absolute periods**\n\nAbsolute periods are defined by exact dates. The format is `YYYY(MM(DD))`. E.g. `2024` or `202402` or `20240227`. A\ndifferent end date can be given by adding `..` and the end date. E.g. `202402..202403` for the period February 2024\nto March 2024.\n\n**Relative periods**\n\nRelative periods are defined by a period in the past or future. Multiple formats are supported:\n\n- `today` - today's date\n- `yesterday` - yesterday's date\n- `tomorrow` - tomorrow's date\n- `(last/this/next)_(day/month/quarter/half_year/year)` - e.g. `last_month` or `next_year` or `this_quarter`\n- `last_x_days` - e.g. `last_7_days` or `last_14_days`\n\n## Ordering\nMost list endpoints support ordering on one or more attributes. The order is defined using the `order=` parameter\nin the query part of the endpoint.\n\nMultiple columns can be used for ordering, delimited by a comma. E.g. `order=lastname,initials,first_name`.\n\nEach attribute used in the order parameter could be extended with a sort property `:<sort_property>`. E.g.\n`order=lastname:desc`.\n\nThe following properties are supported throughout our API:\n\n- ```:asc``` ASC NULLS LAST (default)\n\n[comment]: <> (- ```:asc_nulls_last``` ASC NULLS LAST)\n\n[comment]: <> (- ```:asc_nulls_first``` ASC NULLS FIRST)\n- ```:desc``` DESC NULLS FIRST\n\n[comment]: <> (- ```:desc_nulls_last``` DESC NULLS LAST)\n\n[comment]: <> (- ```:desc_nulls_first``` DESC NULLS FIRST)\n\n## Searching and location filtering\nFor some resources a dedicated /search endpoint is available, which is optimized for searching large datasets. We use\nan Elasticsearch database to deliver these results. The schema for these resources is often a concise version of the\nschema used for regular endpoints, but always contains the primary key (obj_id). If you need the full schema for a\nresource found through /search, you can perform an additional call to the GET /<obj_id> endpoint.\n\nIn most cases, searching has the following query parameters:\n- `term` - generic term used for the search\n- `city` or `zip` - a city name or postal code (only Dutch postal codes allowed)\n- `distance` - distance from the center of the given city or zip (default *5km*)\n\nResults from /search endpoints do not support custom ordering, but are ordered based on relevance (i.e. *score* for\nterm queries and *distance* for all location bound search queries).\n\n## Rate limiting\nUsage of the Congressus API is unlimited within the plan and permissions of the account you are using. To prevent fraud\nand abuse, requests to the API are throttled. You can request the API 60 times each minute and 1000 times per hour.\n\nThe API will respond with a **429 Too many requests** response. This response contains the following fields in the\nheaders:\n\n- `X-RateLimit-Limit` The total number of requests allowed for the active window\n- `X-RateLimit-Remaining` The number of requests remaining in the active window.\n- `X-RateLimit-Reset` UTC seconds since epoch when the window will be reset.\n- `Retry-After` Seconds to retry after when the Rate Limit will be reset.\n\n## Cross-Origin Resource Sharing\nThis API features Cross-Origin Resource Sharing (CORS) implemented in compliance with W3C spec. This allows\ncross-domain communication from the browser. All responses have a wildcard same-origin, which allows to use our API\nfrom any domain or server.\n\n\n# Webhooks\nInformation in a Congressus administration is constantly changing. If you want to perform actions based on these\nchanges, webhooks help you to achieve this. Instead of querying the API at a certain interval, Congressus will notify\nyou about changes to information in the administration.\n\n## Usage\nWebhooks are useful in a broad range of situations. When the state of an resource changes, Congressus will perform a\nHTTP request to the URL you provide. Based on the payload of the request, you can determine which action you need to\nperform.\n\nHow it works:\n\n- You need a URL that Congressus can call to deliver the payload. The Congressus servers must be able to access this\n  URL.\n- You can add HTTP basic authentication or other token authentication in the URL, as long as the URL stays valid.\n- Your URL always needs to respond with a 200 HTTP status. Upon registration this is checked.\n- When your URL responds with another HTTP status code, Congressus will retry to deliver the call 10 times. The time\n  interval between retries is gradually extended.\n- After each call, Congressus will store the last HTTP status code and HTTP body. Using the webhooks API, you can\n  retrieve this information for debugging purposes.\n- You can register as many webhooks as required in an administration. Registration is done by sending a POST request\n  to the webhooks API.\n\n> **We strongly recommend that you use a secure HTTPS endpoint for receiving payload from Congressus. If you use\n> unencrypted HTTP, anyone on the network may be able to listen in on sensitive information like members and invoices.**\n\n## Webhook events\nEach webhook subscribes to an event. When an event occurs, Congressus will call the webhook using an HTTP request to the\nprovided URL. The following events are available:\n\n**Members**\n- member - All member related events\n- member_added - Member added to the administration\n- member_updated - Existing Member is updated\n- member_deleted - Member is removed from the administration\n\n**Events**\n- event - All event related events\n- event_added - Event added\n- event_updated - Event updated\n- event_deleted - Event deleted from the administration\n\n**Sale invoices**\n- sale_invoices - All sale invoice related events\n- sale_invoices_added - Sale invoice added\n- sale_invoices_updated - Sale invoice updated\n- sale_invoices_deleted - Sale invoice deleted from the administration\n\n\n## Payload\nEach webhook call has a payload based on the category of the event that triggered the webhook. E.g. events in the\ncategory **Members** get a payload based on the schema for Members, filled with the data for the resource that\ntriggered the webhook.\n\nEach webhook call contains the following information:\n\n- `webhook_id`-  The id of the webhook that triggered the call\n- `webhook_event` - The category of events for the webhook\n- `webhook_event_trigger` -  The trigger that caused the webhook call\n- `created` - Date and time at which the webhook was triggered\n- `data` - List which contains the payload(s) in the form of the complete resource that triggered the event\n\n# Changelog\n\nThis is version 3.0 of the Congressus API. In this chapter we describe all changes in v3.0.\n\n## 2024-04-23 Custom fields for Members available in PUT/POST requests\n\n- Custom fields for Members can now be added or updated through the API. The custom fields are available in the\n  `custom_field_data` attribute of the Member resource.\n- The old `custom_fields` attribute is deprecated and will be removed in a future version.\n- The `members/custom-fields` resource shows the available custom fields for Members, including meta information.\n\n## 2024-02-27 Action endpoints for EventParticipation added\n\n- `EventParticipation` status can now be changed through the API, including fines when unsubscribing or declining a\n  participation.\n- API upgrade guide from v20 to v30 removed from docs, as it is no longer relevant. The v20 API is unavailable since mid\n  2023.\n\n## 2022-12-09 Event ticket types endpoints\n- `EventTicketType` resources can now be created, updated and deleted through the API\n- The context is now applied at row level according to the status of the Member for the `v30/members` endpoint\n\n## 2022-06-28 Events updated, MembershipStatus resources added\n- `Event` resources are now fully operational, including the possibility to add participants / sell tickets through the API.\n- `MembershipStatus` is now available for Member resources.\n\n## 2022-06-22 Minor updates and fixes\n- Feat: /members can be filtered against multiples statuses with the status_id query parameter (i.e: /members?status_id=2&status_id=3).\n- Feat: the News model now contains a list of websites where the news item is published on\n- Fix: add the default website to POST /news on create\n- Fix: sale_invoice_id is now honored when given by the creation of a sale invoice /sale-invoices/<int:obj_id>/send\n\n## 2022-06-03 Minor updates and fixes\n- Feat: Additional filtering for /sale-invoices endpoint added (invoice_type 'debit', 'is_credited' and 'is_not_credited').\n- Feat: Renamed /groups/folders endpoints to /group-folders for more consistency. Deprecated old endpoints.\n- Feat: Added member status resources through /member-statuses.\n- Feat: Added profile_picture and formal_picture to Member resources.\n- Fix: we incorrectly used 'per_page' as parameter in the Pagination-section of these docs. The correct parameter is **'page_size'**.\n- Fix: all non-recursive endpoints for Group folders and Product folders returned children, this is resolved.\n\n## 2022-05-03 Member validation through context added\n- Added extended validation options for Member-resources by setting a `context` parameter. This context ensures validation according to the field settings as set in Congressus Manager for the member status.\n- Description for Context validation added to the Member-resources.\n- Introduction on Context validation added to the [upgrade guide](#section/Upgrading-from-v20-to-v30)\n\n## 2022-04-22 Upgrade guide from v20 to v30 added\n- First version for the [upgrade guide](#section/Upgrading-from-v20-to-v30) added\n\n## 2022-03-23 Additional filtering for Group and Organisation resources\n- `Group` and `Group membership` resources can use a filter on member_id\n- `Organisation` and `Organisation membership` resources can use a filter on member_id\n\n## 2022-03-21 Group and GroupFolder resources added\n- Group, GroupFolder and GroupMembership resources are added to the API.\n- `Group folders` are added and use a tree-like structure.\n- `Organisation` resources have create, update and delete views added.\n- `Organisation membership` resources are added\n- Fix: SDD mandates returned and empty list for Member resources.\n\n## 2021-10-14 Organisation resources added\n- Both Organisation and Organisation category resources are added to the API.\n\n## 2021-10-02 Additional filters added for Event participations\n- `Event participations` have additional filter functionality\n\n## 2021-09-22 Added resources for Product folders and Sale invoice workflows\n- `Product folders` are added, using a tree-like structure.\n- `Sale invoice workflows` are added as resource. Read-only for this moment.\n- Updated descriptions for Sale invoice attributes.\n\n## 2021-08-09 additional filters for events and products\n- Events can now be filtered on published true/false\n- Products can now be filtered on published and folder_id. More than one folder_id can be given by supplying it more\n  than once as query param, e.g. `products?folder_id=123&folder_id=456`\n\n## 2021-08-04 custom fields and descriptions added, publication options added to events and blogs\n- The retrieve member resource now also shows the custom field information for a member\n- Many attributes have an additional description added\n- Publication attributes are added to Event and Blog resources\n\n## 2021-06-09 website related resources added\n- Website and Webpage resources added (list and get only)\n- News resources added\n- Default order is added for Websites, Webpages, Events and News list endpoints. You can overwrite the default order\n  with the `order` query param\n- Improved descriptions for several resources, removed some typo's in the documentation\n\n## 2021-04-06 initial release\n- This initial release contains a minor set of resources to work with.\n",
    "termsOfService": "https://www.congressus.nl/voorwaarden",
    "contact": {
      "name": "Congressus Support",
      "url": "http://support.congressus.nl",
      "email": "support@congressus.nl"
    },
    "x-logo": {
      "url": "https://congressus-static.s3-eu-west-1.amazonaws.com/api-docs/v30/congressus.png"
    },
    "version": "3.0"
  },
  "servers": [
    {
      "url": "https://api.congressus.nl",
      "description": "Production server (bearerAuth)"
    }
  ],
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "x-tagGroups": [
    {
      "name": "Member administration",
      "tags": [
        "Members",
        "Member statuses",
        "Groups",
        "Group folders",
        "Organisations"
      ]
    },
    {
      "name": "Websites",
      "tags": [
        "Websites",
        "Webpages"
      ]
    },
    {
      "name": "Content management",
      "tags": [
        "Events",
        "Event categories",
        "Blogs",
        "News",
        "Career partners"
      ]
    },
    {
      "name": "Financial administration",
      "tags": [
        "Products",
        "Product folders",
        "Sale invoices",
        "Sale invoice workflows",
        "Bank mutations",
        "External invoices"
      ]
    },
    {
      "name": "Others",
      "tags": [
        "Webhooks",
        "Storage",
        "Countries",
        "Logs"
      ]
    }
  ],
  "paths": {
    "/v30/background-processes": {
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "state",
            "description": "Filter by State",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "PENDING",
                  "EXECUTING",
                  "SUCCESS",
                  "FAILURE"
                ]
              }
            },
            "required": false,
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "created",
            "description": "Filter period on `created`",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "modified",
            "description": "Filter period on `modified`",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1
            },
            "required": false
          },
          {
            "in": "query",
            "name": "page_size",
            "schema": {
              "type": "integer",
              "default": 25,
              "minimum": 1,
              "maximum": 100
            },
            "required": false
          },
          {
            "in": "query",
            "name": "order",
            "schema": {
              "type": "string",
              "default": null,
              "nullable": true
            },
            "required": false
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Background processPagination"
                }
              }
            }
          }
        },
        "summary": "List Background processs",
        "description": "",
        "x-codeSamples": [
          {
            "lang": "Python",
            "source": "\nimport requests\n\nheaders = {'Authorization': 'Bearer {api_access_key}'}\nparams = {}\nurl = 'https://api.congressus.nl/v30'\n\nresp = requests.get(url, params=params, headers=headers)\nresp.raise_for_status()\n\nresult = resp.json()\ndata = result['data']\n"
          },
          {
            "lang": "PHP",
            "source": "\n$client = new GuzzleHttp\\Client();\n\n$url = 'https://api.congressus.nl/v30';\n$options = [\n    'headers' => ['Authorization' => 'Bearer {api_access_key}']\n];\n\n$res = $client->request('GET', $url, $options);\necho $res->getStatusCode();\n// \"200\"\n\necho $res->getHeader('content-type')[0];\n// 'application/json; charset=utf8'\n\necho $res->getBody();\n// {\"data\": []...}\n"
          }
        ],
        "tags": [
          "Background processes"
        ]
      }
    },
    "/v30/background-processes/{obj_id}": {
      "get": {
        "parameters": [],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BackgroundProcess"
                }
              }
            }
          }
        },
        "summary": "Retrieve BackgroundProcess",
        "description": "",
        "tags": [
          "Background processes"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "obj_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        }
      ]
    },
    "/v30/background-processes/results/{obj_id}": {
      "get": {
        "parameters": [],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BackgroundProcessResult"
                }
              }
            }
          }
        },
        "summary": "Retrieve BackgroundProcess",
        "description": "",
        "tags": [
          "Background processes"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "obj_id",
          "required": true,
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ]
    },
    "/v30/bank": {
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "period_filter",
            "description": "Filter period on `mutation_date`",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "status",
            "description": "Filter on `status`",
            "schema": {
              "type": "string",
              "enum": [
                "matched",
                "not matched"
              ]
            },
            "required": false
          },
          {
            "in": "query",
            "name": "mutation_type",
            "description": "Filter on `mutation_type`",
            "schema": {
              "type": "string",
              "enum": [
                "sdd",
                "bank"
              ]
            },
            "required": false
          },
          {
            "in": "query",
            "name": "bank_import_id",
            "description": "Filter by Bank import",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "required": false,
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "bank_statement_id",
            "description": "Filter by Bank statement",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "required": false,
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "bank_mutation_id",
            "description": "Filter by Bank mutation",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "required": false,
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1
            },
            "required": false
          },
          {
            "in": "query",
            "name": "page_size",
            "schema": {
              "type": "integer",
              "default": 25,
              "minimum": 1,
              "maximum": 100
            },
            "required": false
          },
          {
            "in": "query",
            "name": "order",
            "schema": {
              "type": "string",
              "default": "mutation_date:desc,id:desc"
            },
            "required": false
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/bank mutationPagination"
                }
              }
            }
          }
        },
        "summary": "List bank mutations",
        "description": "",
        "x-codeSamples": [
          {
            "lang": "Python",
            "source": "\nimport requests\n\nheaders = {'Authorization': 'Bearer {api_access_key}'}\nparams = {}\nurl = 'https://api.congressus.nl/v30/bank'\n\nresp = requests.get(url, params=params, headers=headers)\nresp.raise_for_status()\n\nresult = resp.json()\ndata = result['data']\n"
          },
          {
            "lang": "PHP",
            "source": "\n$client = new GuzzleHttp\\Client();\n\n$url = 'https://api.congressus.nl/v30/bank';\n$options = [\n    'headers' => ['Authorization' => 'Bearer {api_access_key}']\n];\n\n$res = $client->request('GET', $url, $options);\necho $res->getStatusCode();\n// \"200\"\n\necho $res->getHeader('content-type')[0];\n// 'application/json; charset=utf8'\n\necho $res->getBody();\n// {\"data\": []...}\n"
          }
        ],
        "tags": [
          "Bank mutations"
        ]
      }
    },
    "/v30/bank/{obj_id}": {
      "get": {
        "parameters": [],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BankMutation"
                }
              }
            }
          }
        },
        "summary": "Retrieve bank mutation",
        "description": "",
        "tags": [
          "Bank mutations"
        ]
      },
      "delete": {
        "parameters": [],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "204": {
            "description": "No content"
          }
        },
        "summary": "Delete bank mutation",
        "description": "",
        "tags": [
          "Bank mutations"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "obj_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        }
      ]
    },
    "/v30/bank/{obj_id}/match": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SaleInvoiceBankMutationMatch"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "204": {
            "description": "No content"
          }
        },
        "summary": "Match mutation with a sale invoice",
        "description": "",
        "tags": [
          "Bank mutations"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "obj_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        }
      ]
    },
    "/v30/bank/{obj_id}/unmatch": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SaleInvoiceBankMutationMatch"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "204": {
            "description": "No content"
          }
        },
        "summary": "Remove match with a sale invoice",
        "description": "",
        "tags": [
          "Bank mutations"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "obj_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        }
      ]
    },
    "/v30/blogs/authors": {
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1
            },
            "required": false
          },
          {
            "in": "query",
            "name": "page_size",
            "schema": {
              "type": "integer",
              "default": 25,
              "minimum": 1,
              "maximum": 100
            },
            "required": false
          },
          {
            "in": "query",
            "name": "order",
            "schema": {
              "type": "string",
              "default": null,
              "nullable": true
            },
            "required": false
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlogAuthorPagination"
                }
              }
            }
          }
        },
        "summary": "List Blog authors",
        "description": "",
        "x-codeSamples": [
          {
            "lang": "Python",
            "source": "\nimport requests\n\nheaders = {'Authorization': 'Bearer {api_access_key}'}\nparams = {}\nurl = 'https://api.congressus.nl/v30'\n\nresp = requests.get(url, params=params, headers=headers)\nresp.raise_for_status()\n\nresult = resp.json()\ndata = result['data']\n"
          },
          {
            "lang": "PHP",
            "source": "\n$client = new GuzzleHttp\\Client();\n\n$url = 'https://api.congressus.nl/v30';\n$options = [\n    'headers' => ['Authorization' => 'Bearer {api_access_key}']\n];\n\n$res = $client->request('GET', $url, $options);\necho $res->getStatusCode();\n// \"200\"\n\necho $res->getHeader('content-type')[0];\n// 'application/json; charset=utf8'\n\necho $res->getBody();\n// {\"data\": []...}\n"
          }
        ],
        "tags": [
          "Blogs"
        ]
      },
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BlogAuthor"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlogAuthor"
                }
              }
            }
          }
        },
        "summary": "Create BlogAuthor",
        "description": "",
        "tags": [
          "Blogs"
        ]
      }
    },
    "/v30/blogs/authors/{obj_id}": {
      "get": {
        "parameters": [],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlogAuthor"
                }
              }
            }
          }
        },
        "summary": "Retrieve BlogAuthor",
        "description": "",
        "tags": [
          "Blogs"
        ]
      },
      "put": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BlogAuthor"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "202": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlogAuthor"
                }
              }
            }
          }
        },
        "summary": "Update BlogAuthor",
        "description": "",
        "tags": [
          "Blogs"
        ]
      },
      "delete": {
        "parameters": [],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "204": {
            "description": "No content"
          }
        },
        "summary": "Delete BlogAuthor",
        "description": "",
        "tags": [
          "Blogs"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "obj_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        }
      ]
    },
    "/v30/blogs": {
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "period_filter",
            "description": "Filter period on `published_from`",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "author_id",
            "description": "Filter by Author",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "required": false,
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "issue_id",
            "description": "Filter by Issue",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "required": false,
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "category_id",
            "description": "Filter by Category",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "required": false,
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "published",
            "description": "Filter on `published`",
            "schema": {
              "type": "integer",
              "enum": [
                0,
                1
              ]
            },
            "required": false
          },
          {
            "in": "query",
            "name": "visibility",
            "description": "Filter by Visibility",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "public",
                  "protected"
                ]
              }
            },
            "required": false,
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1
            },
            "required": false
          },
          {
            "in": "query",
            "name": "page_size",
            "schema": {
              "type": "integer",
              "default": 25,
              "minimum": 1,
              "maximum": 100
            },
            "required": false
          },
          {
            "in": "query",
            "name": "order",
            "schema": {
              "type": "string",
              "default": "published_from:desc"
            },
            "required": false
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlogPagination"
                }
              }
            }
          }
        },
        "summary": "List Blogs",
        "description": "",
        "x-codeSamples": [
          {
            "lang": "Python",
            "source": "\nimport requests\n\nheaders = {'Authorization': 'Bearer {api_access_key}'}\nparams = {}\nurl = 'https://api.congressus.nl/v30/blogs'\n\nresp = requests.get(url, params=params, headers=headers)\nresp.raise_for_status()\n\nresult = resp.json()\ndata = result['data']\n"
          },
          {
            "lang": "PHP",
            "source": "\n$client = new GuzzleHttp\\Client();\n\n$url = 'https://api.congressus.nl/v30/blogs';\n$options = [\n    'headers' => ['Authorization' => 'Bearer {api_access_key}']\n];\n\n$res = $client->request('GET', $url, $options);\necho $res->getStatusCode();\n// \"200\"\n\necho $res->getHeader('content-type')[0];\n// 'application/json; charset=utf8'\n\necho $res->getBody();\n// {\"data\": []...}\n"
          }
        ],
        "tags": [
          "Blogs"
        ]
      },
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Blog"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Blog"
                }
              }
            }
          }
        },
        "summary": "Create Blog",
        "description": "",
        "tags": [
          "Blogs"
        ]
      }
    },
    "/v30/blogs/{obj_id}": {
      "get": {
        "parameters": [],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlogWithParagraph"
                }
              }
            }
          }
        },
        "summary": "Retrieve Blog",
        "description": "",
        "tags": [
          "Blogs"
        ]
      },
      "put": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BlogWithParagraph"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "202": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlogWithParagraph"
                }
              }
            }
          }
        },
        "summary": "Update Blog",
        "description": "",
        "tags": [
          "Blogs"
        ]
      },
      "delete": {
        "parameters": [],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "204": {
            "description": "No content"
          }
        },
        "summary": "Delete Blog",
        "description": "",
        "tags": [
          "Blogs"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "obj_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        }
      ]
    },
    "/v30/blogs/{obj_id}/paragraphs/text": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BlogTextParagraph"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlogTextParagraph"
                }
              }
            }
          }
        },
        "summary": "Create BlogTextParagraph",
        "description": "",
        "tags": [
          "Blogs"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "obj_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        }
      ]
    },
    "/v30/blogs/{obj_id}/paragraphs/image": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BlogImageParagraph"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlogImageParagraph"
                }
              }
            }
          }
        },
        "summary": "Create BlogImageParagraph",
        "description": "",
        "tags": [
          "Blogs"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "obj_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        }
      ]
    },
    "/v30/blogs/paragraphs/text/{obj_id}": {
      "get": {
        "parameters": [],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlogTextParagraph"
                }
              }
            }
          }
        },
        "summary": "Retrieve BlogTextParagraph",
        "description": "",
        "tags": [
          "Blogs"
        ]
      },
      "put": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BlogTextParagraph"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "202": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlogTextParagraph"
                }
              }
            }
          }
        },
        "summary": "Update BlogTextParagraph",
        "description": "",
        "tags": [
          "Blogs"
        ]
      },
      "delete": {
        "parameters": [],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "204": {
            "description": "No content"
          }
        },
        "summary": "Delete BlogTextParagraph",
        "description": "",
        "tags": [
          "Blogs"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "obj_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        }
      ]
    },
    "/v30/blogs/paragraphs/image/{obj_id}": {
      "get": {
        "parameters": [],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlogImageParagraph"
                }
              }
            }
          }
        },
        "summary": "Retrieve BlogImageParagraph",
        "description": "",
        "tags": [
          "Blogs"
        ]
      },
      "put": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BlogImageParagraph"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "202": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlogImageParagraph"
                }
              }
            }
          }
        },
        "summary": "Update BlogImageParagraph",
        "description": "",
        "tags": [
          "Blogs"
        ]
      },
      "delete": {
        "parameters": [],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "204": {
            "description": "No content"
          }
        },
        "summary": "Delete BlogImageParagraph",
        "description": "",
        "tags": [
          "Blogs"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "obj_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        }
      ]
    },
    "/v30/blogs/categories": {
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1
            },
            "required": false
          },
          {
            "in": "query",
            "name": "page_size",
            "schema": {
              "type": "integer",
              "default": 25,
              "minimum": 1,
              "maximum": 100
            },
            "required": false
          },
          {
            "in": "query",
            "name": "order",
            "schema": {
              "type": "string",
              "default": null,
              "nullable": true
            },
            "required": false
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Blog categoryPagination"
                }
              }
            }
          }
        },
        "summary": "List Blog categories",
        "description": "",
        "x-codeSamples": [
          {
            "lang": "Python",
            "source": "\nimport requests\n\nheaders = {'Authorization': 'Bearer {api_access_key}'}\nparams = {}\nurl = 'https://api.congressus.nl/v30'\n\nresp = requests.get(url, params=params, headers=headers)\nresp.raise_for_status()\n\nresult = resp.json()\ndata = result['data']\n"
          },
          {
            "lang": "PHP",
            "source": "\n$client = new GuzzleHttp\\Client();\n\n$url = 'https://api.congressus.nl/v30';\n$options = [\n    'headers' => ['Authorization' => 'Bearer {api_access_key}']\n];\n\n$res = $client->request('GET', $url, $options);\necho $res->getStatusCode();\n// \"200\"\n\necho $res->getHeader('content-type')[0];\n// 'application/json; charset=utf8'\n\necho $res->getBody();\n// {\"data\": []...}\n"
          }
        ],
        "tags": [
          "Blogs"
        ]
      },
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BlogCategory"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlogCategory"
                }
              }
            }
          }
        },
        "summary": "Create Blog category",
        "description": "",
        "tags": [
          "Blogs"
        ]
      }
    },
    "/v30/blogs/categories/{obj_id}": {
      "get": {
        "parameters": [],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlogCategory"
                }
              }
            }
          }
        },
        "summary": "Retrieve Blog category",
        "description": "",
        "tags": [
          "Blogs"
        ]
      },
      "put": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BlogCategory"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "202": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlogCategory"
                }
              }
            }
          }
        },
        "summary": "Update Blog category",
        "description": "",
        "tags": [
          "Blogs"
        ]
      },
      "delete": {
        "parameters": [],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "204": {
            "description": "No content"
          }
        },
        "summary": "Delete Blog category",
        "description": "",
        "tags": [
          "Blogs"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "obj_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        }
      ]
    },
    "/v30/blogs/issues": {
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1
            },
            "required": false
          },
          {
            "in": "query",
            "name": "page_size",
            "schema": {
              "type": "integer",
              "default": 25,
              "minimum": 1,
              "maximum": 100
            },
            "required": false
          },
          {
            "in": "query",
            "name": "order",
            "schema": {
              "type": "string",
              "default": null,
              "nullable": true
            },
            "required": false
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlogIssuePagination"
                }
              }
            }
          }
        },
        "summary": "List Blog issues",
        "description": "",
        "x-codeSamples": [
          {
            "lang": "Python",
            "source": "\nimport requests\n\nheaders = {'Authorization': 'Bearer {api_access_key}'}\nparams = {}\nurl = 'https://api.congressus.nl/v30'\n\nresp = requests.get(url, params=params, headers=headers)\nresp.raise_for_status()\n\nresult = resp.json()\ndata = result['data']\n"
          },
          {
            "lang": "PHP",
            "source": "\n$client = new GuzzleHttp\\Client();\n\n$url = 'https://api.congressus.nl/v30';\n$options = [\n    'headers' => ['Authorization' => 'Bearer {api_access_key}']\n];\n\n$res = $client->request('GET', $url, $options);\necho $res->getStatusCode();\n// \"200\"\n\necho $res->getHeader('content-type')[0];\n// 'application/json; charset=utf8'\n\necho $res->getBody();\n// {\"data\": []...}\n"
          }
        ],
        "tags": [
          "Blogs"
        ]
      },
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BlogIssue"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlogIssue"
                }
              }
            }
          }
        },
        "summary": "Create BlogIssue",
        "description": "",
        "tags": [
          "Blogs"
        ]
      }
    },
    "/v30/blogs/issues/{obj_id}": {
      "get": {
        "parameters": [],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlogIssue"
                }
              }
            }
          }
        },
        "summary": "Retrieve BlogIssue",
        "description": "",
        "tags": [
          "Blogs"
        ]
      },
      "put": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BlogIssue"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "202": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlogIssue"
                }
              }
            }
          }
        },
        "summary": "Update BlogIssue",
        "description": "",
        "tags": [
          "Blogs"
        ]
      },
      "delete": {
        "parameters": [],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "204": {
            "description": "No content"
          }
        },
        "summary": "Delete BlogIssue",
        "description": "",
        "tags": [
          "Blogs"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "obj_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        }
      ]
    },
    "/v30/career/partners/categories": {
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1
            },
            "required": false
          },
          {
            "in": "query",
            "name": "page_size",
            "schema": {
              "type": "integer",
              "default": 25,
              "minimum": 1,
              "maximum": 100
            },
            "required": false
          },
          {
            "in": "query",
            "name": "order",
            "schema": {
              "type": "string",
              "default": null,
              "nullable": true
            },
            "required": false
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Career partner categoryPagination"
                }
              }
            }
          }
        },
        "summary": "List Career partner categories",
        "description": "",
        "x-codeSamples": [
          {
            "lang": "Python",
            "source": "\nimport requests\n\nheaders = {'Authorization': 'Bearer {api_access_key}'}\nparams = {}\nurl = 'https://api.congressus.nl/v30'\n\nresp = requests.get(url, params=params, headers=headers)\nresp.raise_for_status()\n\nresult = resp.json()\ndata = result['data']\n"
          },
          {
            "lang": "PHP",
            "source": "\n$client = new GuzzleHttp\\Client();\n\n$url = 'https://api.congressus.nl/v30';\n$options = [\n    'headers' => ['Authorization' => 'Bearer {api_access_key}']\n];\n\n$res = $client->request('GET', $url, $options);\necho $res->getStatusCode();\n// \"200\"\n\necho $res->getHeader('content-type')[0];\n// 'application/json; charset=utf8'\n\necho $res->getBody();\n// {\"data\": []...}\n"
          }
        ],
        "tags": [
          "Career partners"
        ]
      },
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CareerPartnerCategory"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CareerPartnerCategory"
                }
              }
            }
          }
        },
        "summary": "Create Career partner category",
        "description": "",
        "tags": [
          "Career partners"
        ]
      }
    },
    "/v30/career/partners/categories/{obj_id}": {
      "get": {
        "parameters": [],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CareerPartnerCategory"
                }
              }
            }
          }
        },
        "summary": "Retrieve Career partner category",
        "description": "",
        "tags": [
          "Career partners"
        ]
      },
      "put": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CareerPartnerCategory"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "202": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CareerPartnerCategory"
                }
              }
            }
          }
        },
        "summary": "Update Career partner category",
        "description": "",
        "tags": [
          "Career partners"
        ]
      },
      "delete": {
        "parameters": [],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "204": {
            "description": "No content"
          }
        },
        "summary": "Delete Career partner category",
        "description": "",
        "tags": [
          "Career partners"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "obj_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        }
      ]
    },
    "/v30/career/partners": {
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "career_partner_category_id",
            "description": "Filter by Category",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "required": false,
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1
            },
            "required": false
          },
          {
            "in": "query",
            "name": "page_size",
            "schema": {
              "type": "integer",
              "default": 25,
              "minimum": 1,
              "maximum": 100
            },
            "required": false
          },
          {
            "in": "query",
            "name": "order",
            "schema": {
              "type": "string",
              "default": "name"
            },
            "required": false
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Career partnerPagination"
                }
              }
            }
          }
        },
        "summary": "List Career partners",
        "description": "",
        "x-codeSamples": [
          {
            "lang": "Python",
            "source": "\nimport requests\n\nheaders = {'Authorization': 'Bearer {api_access_key}'}\nparams = {}\nurl = 'https://api.congressus.nl/v30'\n\nresp = requests.get(url, params=params, headers=headers)\nresp.raise_for_status()\n\nresult = resp.json()\ndata = result['data']\n"
          },
          {
            "lang": "PHP",
            "source": "\n$client = new GuzzleHttp\\Client();\n\n$url = 'https://api.congressus.nl/v30';\n$options = [\n    'headers' => ['Authorization' => 'Bearer {api_access_key}']\n];\n\n$res = $client->request('GET', $url, $options);\necho $res->getStatusCode();\n// \"200\"\n\necho $res->getHeader('content-type')[0];\n// 'application/json; charset=utf8'\n\necho $res->getBody();\n// {\"data\": []...}\n"
          }
        ],
        "tags": [
          "Career partners"
        ]
      },
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CareerPartner"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CareerPartner"
                }
              }
            }
          }
        },
        "summary": "Create Career partner",
        "description": "",
        "tags": [
          "Career partners"
        ]
      }
    },
    "/v30/career/partners/{obj_id}": {
      "get": {
        "parameters": [],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CareerPartner"
                }
              }
            }
          }
        },
        "summary": "Retrieve Career partner",
        "description": "",
        "tags": [
          "Career partners"
        ]
      },
      "put": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CareerPartner"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "202": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CareerPartner"
                }
              }
            }
          }
        },
        "summary": "Update Career partner",
        "description": "",
        "tags": [
          "Career partners"
        ]
      },
      "delete": {
        "parameters": [],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "204": {
            "description": "No content"
          }
        },
        "summary": "Delete Career partner",
        "description": "",
        "tags": [
          "Career partners"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "obj_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        }
      ]
    },
    "/v30/communication/saved-replies": {
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1
            },
            "required": false
          },
          {
            "in": "query",
            "name": "page_size",
            "schema": {
              "type": "integer",
              "default": 25,
              "minimum": 1,
              "maximum": 100
            },
            "required": false
          },
          {
            "in": "query",
            "name": "order",
            "schema": {
              "type": "string",
              "default": "name:asc"
            },
            "required": false
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SavedReplyPagination"
                }
              }
            }
          }
        },
        "summary": "List saved replies",
        "description": "",
        "x-codeSamples": [
          {
            "lang": "Python",
            "source": "\nimport requests\n\nheaders = {'Authorization': 'Bearer {api_access_key}'}\nparams = {}\nurl = 'https://api.congressus.nl/v30'\n\nresp = requests.get(url, params=params, headers=headers)\nresp.raise_for_status()\n\nresult = resp.json()\ndata = result['data']\n"
          },
          {
            "lang": "PHP",
            "source": "\n$client = new GuzzleHttp\\Client();\n\n$url = 'https://api.congressus.nl/v30';\n$options = [\n    'headers' => ['Authorization' => 'Bearer {api_access_key}']\n];\n\n$res = $client->request('GET', $url, $options);\necho $res->getStatusCode();\n// \"200\"\n\necho $res->getHeader('content-type')[0];\n// 'application/json; charset=utf8'\n\necho $res->getBody();\n// {\"data\": []...}\n"
          }
        ],
        "tags": [
          "Communication"
        ]
      },
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SavedReply"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SavedReply"
                }
              }
            }
          }
        },
        "summary": "Create SavedReply",
        "description": "",
        "tags": [
          "Communication"
        ]
      }
    },
    "/v30/communication/saved-replies/{obj_id}": {
      "get": {
        "parameters": [],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SavedReply"
                }
              }
            }
          }
        },
        "summary": "Retrieve SavedReply",
        "description": "",
        "tags": [
          "Communication"
        ]
      },
      "put": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SavedReply"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "202": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SavedReply"
                }
              }
            }
          }
        },
        "summary": "Update SavedReply",
        "description": "",
        "tags": [
          "Communication"
        ]
      },
      "delete": {
        "parameters": [],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "204": {
            "description": "No content"
          }
        },
        "summary": "Delete SavedReply",
        "description": "",
        "tags": [
          "Communication"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "obj_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        }
      ]
    },
    "/v30/countries": {
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1
            },
            "required": false
          },
          {
            "in": "query",
            "name": "page_size",
            "schema": {
              "type": "integer",
              "default": 25,
              "minimum": 1,
              "maximum": 100
            },
            "required": false
          },
          {
            "in": "query",
            "name": "order",
            "schema": {
              "type": "string",
              "default": null,
              "nullable": true
            },
            "required": false
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CountryPagination"
                }
              }
            }
          }
        },
        "summary": "List Countries",
        "description": "",
        "x-codeSamples": [
          {
            "lang": "Python",
            "source": "\nimport requests\n\nheaders = {'Authorization': 'Bearer {api_access_key}'}\nparams = {}\nurl = 'https://api.congressus.nl/v30'\n\nresp = requests.get(url, params=params, headers=headers)\nresp.raise_for_status()\n\nresult = resp.json()\ndata = result['data']\n"
          },
          {
            "lang": "PHP",
            "source": "\n$client = new GuzzleHttp\\Client();\n\n$url = 'https://api.congressus.nl/v30';\n$options = [\n    'headers' => ['Authorization' => 'Bearer {api_access_key}']\n];\n\n$res = $client->request('GET', $url, $options);\necho $res->getStatusCode();\n// \"200\"\n\necho $res->getHeader('content-type')[0];\n// 'application/json; charset=utf8'\n\necho $res->getBody();\n// {\"data\": []...}\n"
          }
        ],
        "tags": [
          "Countries"
        ]
      }
    },
    "/v30/countries/{obj_id}": {
      "get": {
        "parameters": [],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Country"
                }
              }
            }
          }
        },
        "summary": "Retrieve Country",
        "description": "",
        "tags": [
          "Countries"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "obj_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        }
      ]
    },
    "/v30/event-categories": {
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1
            },
            "required": false
          },
          {
            "in": "query",
            "name": "page_size",
            "schema": {
              "type": "integer",
              "default": 25,
              "minimum": 1,
              "maximum": 100
            },
            "required": false
          },
          {
            "in": "query",
            "name": "order",
            "schema": {
              "type": "string",
              "default": "name"
            },
            "required": false
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Event categoryPagination"
                }
              }
            }
          }
        },
        "summary": "List Event categories",
        "description": "",
        "x-codeSamples": [
          {
            "lang": "Python",
            "source": "\nimport requests\n\nheaders = {'Authorization': 'Bearer {api_access_key}'}\nparams = {}\nurl = 'https://api.congressus.nl/v30'\n\nresp = requests.get(url, params=params, headers=headers)\nresp.raise_for_status()\n\nresult = resp.json()\ndata = result['data']\n"
          },
          {
            "lang": "PHP",
            "source": "\n$client = new GuzzleHttp\\Client();\n\n$url = 'https://api.congressus.nl/v30';\n$options = [\n    'headers' => ['Authorization' => 'Bearer {api_access_key}']\n];\n\n$res = $client->request('GET', $url, $options);\necho $res->getStatusCode();\n// \"200\"\n\necho $res->getHeader('content-type')[0];\n// 'application/json; charset=utf8'\n\necho $res->getBody();\n// {\"data\": []...}\n"
          }
        ],
        "tags": [
          "Event categories"
        ]
      }
    },
    "/v30/events": {
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "category_id",
            "description": "Filter by Category",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "required": false,
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "period_filter",
            "description": "Filter period on `start`, `end`",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "published",
            "description": "Filter on `published`",
            "schema": {
              "type": "string",
              "enum": [
                "0",
                "1"
              ]
            },
            "required": false
          },
          {
            "in": "query",
            "name": "participation_billing_enabled",
            "description": "Filter by Billing type",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "disabled",
                  "direct",
                  "later"
                ]
              }
            },
            "required": false,
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "participating_member_id",
            "description": "Filter by None",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "required": false,
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "socie_app_id",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "member_id",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1
            },
            "required": false
          },
          {
            "in": "query",
            "name": "page_size",
            "schema": {
              "type": "integer",
              "default": 25,
              "minimum": 1,
              "maximum": 100
            },
            "required": false
          },
          {
            "in": "query",
            "name": "order",
            "schema": {
              "type": "string",
              "default": "start:desc"
            },
            "required": false
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventPagination"
                }
              }
            }
          }
        },
        "summary": "List Events",
        "description": "",
        "x-codeSamples": [
          {
            "lang": "Python",
            "source": "\nimport requests\n\nheaders = {'Authorization': 'Bearer {api_access_key}'}\nparams = {}\nurl = 'https://api.congressus.nl/v30/events'\n\nresp = requests.get(url, params=params, headers=headers)\nresp.raise_for_status()\n\nresult = resp.json()\ndata = result['data']\n"
          },
          {
            "lang": "PHP",
            "source": "\n$client = new GuzzleHttp\\Client();\n\n$url = 'https://api.congressus.nl/v30/events';\n$options = [\n    'headers' => ['Authorization' => 'Bearer {api_access_key}']\n];\n\n$res = $client->request('GET', $url, $options);\necho $res->getStatusCode();\n// \"200\"\n\necho $res->getHeader('content-type')[0];\n// 'application/json; charset=utf8'\n\necho $res->getBody();\n// {\"data\": []...}\n"
          }
        ],
        "tags": [
          "Events"
        ]
      },
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Event"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Event"
                }
              }
            }
          }
        },
        "summary": "Create Event",
        "description": "",
        "tags": [
          "Events"
        ]
      }
    },
    "/v30/events/{obj_id}": {
      "get": {
        "parameters": [],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Event"
                }
              }
            }
          }
        },
        "summary": "Retrieve Event",
        "description": "",
        "tags": [
          "Events"
        ]
      },
      "put": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Event"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "202": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Event"
                }
              }
            }
          }
        },
        "summary": "Update Event",
        "description": "",
        "tags": [
          "Events"
        ]
      },
      "delete": {
        "parameters": [],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "204": {
            "description": "No content"
          }
        },
        "summary": "Delete Event",
        "description": "",
        "tags": [
          "Events"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "obj_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        }
      ]
    },
    "/v30/events/{obj_id}/participations": {
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "event_id",
            "description": "Filter by Event",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "required": false,
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "status",
            "description": "Filter by Status",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "approved",
                  "waiting list",
                  "unsubscribed",
                  "declined",
                  "payment pending"
                ]
              }
            },
            "required": false,
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "has_invoice",
            "description": "Filter on `has_invoice`",
            "schema": {
              "type": "string",
              "enum": [
                "0",
                "1"
              ]
            },
            "required": false
          },
          {
            "in": "query",
            "name": "sale_invoice_status",
            "description": "Filter by Invoice status",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "concept",
                  "open",
                  "late",
                  "reminded",
                  "pending_payment",
                  "paid"
                ]
              }
            },
            "required": false,
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "member_id",
            "description": "Filter by member_id",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "required": false,
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1
            },
            "required": false
          },
          {
            "in": "query",
            "name": "page_size",
            "schema": {
              "type": "integer",
              "default": 25,
              "minimum": 1,
              "maximum": 100
            },
            "required": false
          },
          {
            "in": "query",
            "name": "order",
            "schema": {
              "type": "string",
              "default": "created:desc"
            },
            "required": false
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Event participationPagination"
                }
              }
            }
          }
        },
        "summary": "List Event participations",
        "description": "",
        "x-codeSamples": [
          {
            "lang": "Python",
            "source": "\nimport requests\n\nheaders = {'Authorization': 'Bearer {api_access_key}'}\nparams = {}\nurl = 'https://api.congressus.nl/v30'\n\nresp = requests.get(url, params=params, headers=headers)\nresp.raise_for_status()\n\nresult = resp.json()\ndata = result['data']\n"
          },
          {
            "lang": "PHP",
            "source": "\n$client = new GuzzleHttp\\Client();\n\n$url = 'https://api.congressus.nl/v30';\n$options = [\n    'headers' => ['Authorization' => 'Bearer {api_access_key}']\n];\n\n$res = $client->request('GET', $url, $options);\necho $res->getStatusCode();\n// \"200\"\n\necho $res->getHeader('content-type')[0];\n// 'application/json; charset=utf8'\n\necho $res->getBody();\n// {\"data\": []...}\n"
          }
        ],
        "tags": [
          "Events"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "obj_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        }
      ]
    },
    "/v30/events/{event_id}/participations/{obj_id}": {
      "get": {
        "parameters": [],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventParticipationWithRelations"
                }
              }
            }
          }
        },
        "summary": "Retrieve Event participation",
        "description": "",
        "tags": [
          "Events"
        ]
      },
      "put": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventParticipationWithRelations"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "202": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventParticipationWithRelations"
                }
              }
            }
          }
        },
        "summary": "Update Event participation",
        "description": "",
        "tags": [
          "Events"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "obj_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        },
        {
          "in": "path",
          "name": "event_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        }
      ]
    },
    "/v30/events/{event_id}/participations/{obj_id}/set-presence": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventParticipationPresence"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "204": {
            "description": "No content"
          }
        },
        "summary": "Set presence on all tickets within participation",
        "description": "This action endpoint requires valid `status_presence` data as payload. Optionally, both `participation_certificates_credits_override` and `participation_certificates_date_override` are accepted.",
        "tags": [
          "Events"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "obj_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        },
        {
          "in": "path",
          "name": "event_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        }
      ]
    },
    "/v30/events/{event_id}/participations/{obj_id}/approve": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventParticipationConditional"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "204": {
            "description": "No content"
          }
        },
        "summary": "Approve participation",
        "description": "Approve a participation. Requires the participation to be in a state where it can be approved. When `check_conditions` is True, approval is only possible when there are tickets available.",
        "tags": [
          "Events"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "obj_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        },
        {
          "in": "path",
          "name": "event_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        }
      ]
    },
    "/v30/events/{event_id}/participations/{obj_id}/wait": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventParticipationConditional"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "204": {
            "description": "No content"
          }
        },
        "summary": "Move participation to waiting list",
        "description": "Add participation to the waiting list. When `check_conditions` is True, the waiting list has to be active.",
        "tags": [
          "Events"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "obj_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        },
        {
          "in": "path",
          "name": "event_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        }
      ]
    },
    "/v30/events/{event_id}/participations/{obj_id}/unsubscribe": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventParticipationFine"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "204": {
            "description": "No content"
          }
        },
        "summary": "Unsubscribe participation",
        "description": "Unsubscribe a participation. Requires the participation to be in a state where it can be unsubscribed.",
        "tags": [
          "Events"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "obj_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        },
        {
          "in": "path",
          "name": "event_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        }
      ]
    },
    "/v30/events/{event_id}/participations/{obj_id}/decline": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventParticipationFine"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "204": {
            "description": "No content"
          }
        },
        "summary": "Decline participation",
        "description": "Decline a participation. Requires the participation to be in a state where it can be declined.",
        "tags": [
          "Events"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "obj_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        },
        {
          "in": "path",
          "name": "event_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        }
      ]
    },
    "/v30/events/{obj_id}/sign-up": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventParticipationBuilder"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventParticipationBuilder"
                }
              }
            }
          }
        },
        "summary": "Create Event Participation (sign up)",
        "description": " - Depending on the selected ticket types, `addressee` and e-mail are `required`. They can be omitted if `member_id` is given.\n - `member_id` is required for tickets with `visibility_level=members|members_filter` and should be omitted for tickets with the `visibility_level=external_only`\n - The invoice properties are required when the event has `participation_billing_enabled=True`.\n - `remarks` can be submitted when the event has `participant_remarks_enabled=True`, otherwise they are not editable in the manager\n - When an event has `participation_information_collection_type=ticket`, `name`  and `email` is required per ticket.",
        "tags": [
          "Events"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "obj_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        }
      ]
    },
    "/v30/events/{obj_id}/ticket-types": {
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "is_available_for_members",
            "description": "Filter on `is_available_for_members`",
            "schema": {
              "type": "string",
              "enum": [
                "0",
                "1"
              ]
            },
            "required": false
          },
          {
            "in": "query",
            "name": "is_available_for_external",
            "description": "Filter on `is_available_for_external`",
            "schema": {
              "type": "string",
              "enum": [
                "0",
                "1"
              ]
            },
            "required": false
          },
          {
            "in": "query",
            "name": "availability_status",
            "description": "Filter by Availability",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "available",
                  "limited",
                  "waiting list",
                  "sold out",
                  "available soon",
                  "unavailable"
                ]
              }
            },
            "required": false,
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1
            },
            "required": false
          },
          {
            "in": "query",
            "name": "page_size",
            "schema": {
              "type": "integer",
              "default": 25,
              "minimum": 1,
              "maximum": 100
            },
            "required": false
          },
          {
            "in": "query",
            "name": "order",
            "schema": {
              "type": "string",
              "default": "created:desc"
            },
            "required": false
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Ticket typePagination"
                }
              }
            }
          }
        },
        "summary": "List Ticket types",
        "description": "",
        "x-codeSamples": [
          {
            "lang": "Python",
            "source": "\nimport requests\n\nheaders = {'Authorization': 'Bearer {api_access_key}'}\nparams = {}\nurl = 'https://api.congressus.nl/v30'\n\nresp = requests.get(url, params=params, headers=headers)\nresp.raise_for_status()\n\nresult = resp.json()\ndata = result['data']\n"
          },
          {
            "lang": "PHP",
            "source": "\n$client = new GuzzleHttp\\Client();\n\n$url = 'https://api.congressus.nl/v30';\n$options = [\n    'headers' => ['Authorization' => 'Bearer {api_access_key}']\n];\n\n$res = $client->request('GET', $url, $options);\necho $res->getStatusCode();\n// \"200\"\n\necho $res->getHeader('content-type')[0];\n// 'application/json; charset=utf8'\n\necho $res->getBody();\n// {\"data\": []...}\n"
          }
        ],
        "tags": [
          "Events"
        ]
      },
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventTicketType"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventTicketType"
                }
              }
            }
          }
        },
        "summary": "Create Ticket type",
        "description": "",
        "tags": [
          "Events"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "obj_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        }
      ]
    },
    "/v30/events/{event_id}/ticket-types/{obj_id}": {
      "get": {
        "parameters": [],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventTicketType"
                }
              }
            }
          }
        },
        "summary": "Retrieve Ticket type",
        "description": "",
        "tags": [
          "Events"
        ]
      },
      "put": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventTicketType"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "202": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventTicketType"
                }
              }
            }
          }
        },
        "summary": "Update Ticket type",
        "description": "",
        "tags": [
          "Events"
        ]
      },
      "delete": {
        "parameters": [],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "204": {
            "description": "No content"
          }
        },
        "summary": "Delete Ticket type",
        "description": "",
        "tags": [
          "Events"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "obj_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        },
        {
          "in": "path",
          "name": "event_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        }
      ]
    },
    "/v30/external-invoices/imports": {
      "post": {
        "responses": {
          "204": {
            "description": "Imported successfully"
          }
        },
        "summary": "Add a new external invoice import",
        "description": "**Note:** this endpoint is part of the external invoices module and is only available if the module is enabled.\n\nTo import external invoices, you need to send a `multipart/form-data` POST request to this endpoint. The following\nfields are required:\n\n- `file`: The file to import;\n- `source`: The source of the file (e.g. \"creo\"), this value can be defined by the client but should be consistent;\n- `format`: The format of the file (e.g. \"eExact\"), this value is used to validate and parse the file.\n\n### Example\n\nBelow is a raw HTTP request that can be used to import an external invoice file:\n\n```http\nPOST http://api.congressus.nl/v30/external-invoices/imports\nAuthorization: Bearer [your bearer token]\nContent-Type: multipart/form-data; boundary=WebAppBoundary\n\n--WebAppBoundary\nContent-Disposition: form-data; name=\"source\"\nContent-Type: text/plain\n\ncreo\n--WebAppBoundary\nContent-Disposition: form-data; name=\"format\"\nContent-Type: text/plain\n\neExact\n--WebAppBoundary\nContent-Disposition: form-data; name=\"file\"; filename=\"export_01-02-2023.xml\"\n\n< /path/to/export_01-02-2023.xml\n--WebAppBoundary--\n```\n\nYou can perform the same request using `curl`:\n\n```bash\ncurl -X POST --location \"http://api.congressus.nl/v30/external-invoices/imports\" \\\n    -H \"Authorization: Bearer [your bearer token]\" \\\n    -H \"Content-Type: multipart/form-data; boundary=WebAppBoundary\" \\\n    -F \"source=creo;type=text/plain\" \\\n    -F \"format=eExact;type=text/plain\" \\\n    -F \"file=@/path/to/export_01-02-2023.xml;filename=export_01-02-2023.xml;type=*/*\"\n```",
        "tags": [
          "External invoices"
        ]
      }
    },
    "/v30/galleries/albums": {
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "socie_app",
            "description": "Filter on `filter_id`, `published`",
            "schema": {
              "type": "string",
              "enum": [
                "0",
                "1"
              ]
            },
            "required": false
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1
            },
            "required": false
          },
          {
            "in": "query",
            "name": "page_size",
            "schema": {
              "type": "integer",
              "default": 25,
              "minimum": 1,
              "maximum": 100
            },
            "required": false
          },
          {
            "in": "query",
            "name": "order",
            "schema": {
              "type": "string",
              "default": "order"
            },
            "required": false
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Gallery albumPagination"
                }
              }
            }
          }
        },
        "summary": "List Gallery albums",
        "description": "",
        "x-codeSamples": [
          {
            "lang": "Python",
            "source": "\nimport requests\n\nheaders = {'Authorization': 'Bearer {api_access_key}'}\nparams = {}\nurl = 'https://api.congressus.nl/v30/galleries/albums'\n\nresp = requests.get(url, params=params, headers=headers)\nresp.raise_for_status()\n\nresult = resp.json()\ndata = result['data']\n"
          },
          {
            "lang": "PHP",
            "source": "\n$client = new GuzzleHttp\\Client();\n\n$url = 'https://api.congressus.nl/v30/galleries/albums';\n$options = [\n    'headers' => ['Authorization' => 'Bearer {api_access_key}']\n];\n\n$res = $client->request('GET', $url, $options);\necho $res->getStatusCode();\n// \"200\"\n\necho $res->getHeader('content-type')[0];\n// 'application/json; charset=utf8'\n\necho $res->getBody();\n// {\"data\": []...}\n"
          }
        ],
        "tags": [
          "Galleries"
        ]
      }
    },
    "/v30/galleries/albums/{obj_id}": {
      "get": {
        "parameters": [],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GalleryAlbum"
                }
              }
            }
          }
        },
        "summary": "Retrieve Gallery album",
        "description": "",
        "tags": [
          "Galleries"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "obj_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        }
      ]
    },
    "/v30/galleries/albums/{album_id}/photos": {
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1
            },
            "required": false
          },
          {
            "in": "query",
            "name": "page_size",
            "schema": {
              "type": "integer",
              "default": 25,
              "minimum": 1,
              "maximum": 100
            },
            "required": false
          },
          {
            "in": "query",
            "name": "order",
            "schema": {
              "type": "string",
              "default": "order"
            },
            "required": false
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Gallery photoPagination"
                }
              }
            }
          }
        },
        "summary": "List Gallery photos",
        "description": "",
        "x-codeSamples": [
          {
            "lang": "Python",
            "source": "\nimport requests\n\nheaders = {'Authorization': 'Bearer {api_access_key}'}\nparams = {}\nurl = 'https://api.congressus.nl/v30/galleries/albums/<int:album_id>/photos'\n\nresp = requests.get(url, params=params, headers=headers)\nresp.raise_for_status()\n\nresult = resp.json()\ndata = result['data']\n"
          },
          {
            "lang": "PHP",
            "source": "\n$client = new GuzzleHttp\\Client();\n\n$url = 'https://api.congressus.nl/v30/galleries/albums/<int:album_id>/photos';\n$options = [\n    'headers' => ['Authorization' => 'Bearer {api_access_key}']\n];\n\n$res = $client->request('GET', $url, $options);\necho $res->getStatusCode();\n// \"200\"\n\necho $res->getHeader('content-type')[0];\n// 'application/json; charset=utf8'\n\necho $res->getBody();\n// {\"data\": []...}\n"
          }
        ],
        "tags": [
          "Galleries"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "album_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        }
      ]
    },
    "/v30/galleries/albums/{album_id}/photos/{obj_id}": {
      "get": {
        "parameters": [],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GalleryPhoto"
                }
              }
            }
          }
        },
        "summary": "Retrieve Gallery photo",
        "description": "",
        "tags": [
          "Galleries"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "album_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        },
        {
          "in": "path",
          "name": "obj_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        }
      ]
    },
    "/v30/group-folders/recursive": {
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1
            },
            "required": false
          },
          {
            "in": "query",
            "name": "page_size",
            "schema": {
              "type": "integer",
              "default": 25,
              "minimum": 1,
              "maximum": 100
            },
            "required": false
          },
          {
            "in": "query",
            "name": "order",
            "schema": {
              "type": "string",
              "default": "name"
            },
            "required": false
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupFolderListRecursivePagination"
                }
              }
            }
          }
        },
        "summary": "List Group folders - recursive",
        "description": "Recursive list with all group folders and their children. Added for convenience, e.g. when you\n    want to render a select dropdown with all folders.",
        "x-codeSamples": [
          {
            "lang": "Python",
            "source": "\nimport requests\n\nheaders = {'Authorization': 'Bearer {api_access_key}'}\nparams = {}\nurl = 'https://api.congressus.nl/v30'\n\nresp = requests.get(url, params=params, headers=headers)\nresp.raise_for_status()\n\nresult = resp.json()\ndata = result['data']\n"
          },
          {
            "lang": "PHP",
            "source": "\n$client = new GuzzleHttp\\Client();\n\n$url = 'https://api.congressus.nl/v30';\n$options = [\n    'headers' => ['Authorization' => 'Bearer {api_access_key}']\n];\n\n$res = $client->request('GET', $url, $options);\necho $res->getStatusCode();\n// \"200\"\n\necho $res->getHeader('content-type')[0];\n// 'application/json; charset=utf8'\n\necho $res->getBody();\n// {\"data\": []...}\n"
          }
        ],
        "tags": [
          "Group folders"
        ]
      }
    },
    "/v30/group-folders": {
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "published",
            "description": "Filter on `published`",
            "schema": {
              "type": "string",
              "enum": [
                "0",
                "1"
              ]
            },
            "required": false
          },
          {
            "in": "query",
            "name": "parent_id",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1
            },
            "required": false
          },
          {
            "in": "query",
            "name": "page_size",
            "schema": {
              "type": "integer",
              "default": 25,
              "minimum": 1,
              "maximum": 100
            },
            "required": false
          },
          {
            "in": "query",
            "name": "order",
            "schema": {
              "type": "string",
              "default": "name"
            },
            "required": false
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Group folderPagination"
                }
              }
            }
          }
        },
        "summary": "List Group folders",
        "description": "",
        "x-codeSamples": [
          {
            "lang": "Python",
            "source": "\nimport requests\n\nheaders = {'Authorization': 'Bearer {api_access_key}'}\nparams = {}\nurl = 'https://api.congressus.nl/v30'\n\nresp = requests.get(url, params=params, headers=headers)\nresp.raise_for_status()\n\nresult = resp.json()\ndata = result['data']\n"
          },
          {
            "lang": "PHP",
            "source": "\n$client = new GuzzleHttp\\Client();\n\n$url = 'https://api.congressus.nl/v30';\n$options = [\n    'headers' => ['Authorization' => 'Bearer {api_access_key}']\n];\n\n$res = $client->request('GET', $url, $options);\necho $res->getStatusCode();\n// \"200\"\n\necho $res->getHeader('content-type')[0];\n// 'application/json; charset=utf8'\n\necho $res->getBody();\n// {\"data\": []...}\n"
          }
        ],
        "tags": [
          "Group folders"
        ]
      },
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupFolder"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupFolder"
                }
              }
            }
          }
        },
        "summary": "Create Group folder",
        "description": "",
        "tags": [
          "Group folders"
        ]
      }
    },
    "/v30/group-folders/{obj_id}": {
      "get": {
        "parameters": [],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupFolder"
                }
              }
            }
          }
        },
        "summary": "Retrieve Group folder",
        "description": "",
        "tags": [
          "Group folders"
        ]
      },
      "put": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupFolder"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "202": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupFolder"
                }
              }
            }
          }
        },
        "summary": "Update Group folder",
        "description": "",
        "tags": [
          "Group folders"
        ]
      },
      "delete": {
        "parameters": [],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "204": {
            "description": "No content"
          }
        },
        "summary": "Delete Group folder",
        "description": "",
        "tags": [
          "Group folders"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "obj_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        }
      ]
    },
    "/v30/groups/folders/recursive": {
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1
            },
            "required": false
          },
          {
            "in": "query",
            "name": "page_size",
            "schema": {
              "type": "integer",
              "default": 25,
              "minimum": 1,
              "maximum": 100
            },
            "required": false
          },
          {
            "in": "query",
            "name": "order",
            "schema": {
              "type": "string",
              "default": "name"
            },
            "required": false
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupFolderListRecursivePagination"
                }
              }
            }
          }
        },
        "summary": "List Group folders - recursive",
        "description": "Use /group-folders/recursive endpoint instead",
        "deprecated": true,
        "x-codeSamples": [
          {
            "lang": "Python",
            "source": "\nimport requests\n\nheaders = {'Authorization': 'Bearer {api_access_key}'}\nparams = {}\nurl = 'https://api.congressus.nl/v30'\n\nresp = requests.get(url, params=params, headers=headers)\nresp.raise_for_status()\n\nresult = resp.json()\ndata = result['data']\n"
          },
          {
            "lang": "PHP",
            "source": "\n$client = new GuzzleHttp\\Client();\n\n$url = 'https://api.congressus.nl/v30';\n$options = [\n    'headers' => ['Authorization' => 'Bearer {api_access_key}']\n];\n\n$res = $client->request('GET', $url, $options);\necho $res->getStatusCode();\n// \"200\"\n\necho $res->getHeader('content-type')[0];\n// 'application/json; charset=utf8'\n\necho $res->getBody();\n// {\"data\": []...}\n"
          }
        ],
        "tags": [
          "Groups"
        ]
      }
    },
    "/v30/groups/folders": {
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "published",
            "description": "Filter on `published`",
            "schema": {
              "type": "string",
              "enum": [
                "0",
                "1"
              ]
            },
            "required": false
          },
          {
            "in": "query",
            "name": "parent_id",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1
            },
            "required": false
          },
          {
            "in": "query",
            "name": "page_size",
            "schema": {
              "type": "integer",
              "default": 25,
              "minimum": 1,
              "maximum": 100
            },
            "required": false
          },
          {
            "in": "query",
            "name": "order",
            "schema": {
              "type": "string",
              "default": "name"
            },
            "required": false
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Group folderPagination"
                }
              }
            }
          }
        },
        "summary": "List Group folders",
        "description": "Use /group-folders endpoint instead",
        "deprecated": true,
        "x-codeSamples": [
          {
            "lang": "Python",
            "source": "\nimport requests\n\nheaders = {'Authorization': 'Bearer {api_access_key}'}\nparams = {}\nurl = 'https://api.congressus.nl/v30'\n\nresp = requests.get(url, params=params, headers=headers)\nresp.raise_for_status()\n\nresult = resp.json()\ndata = result['data']\n"
          },
          {
            "lang": "PHP",
            "source": "\n$client = new GuzzleHttp\\Client();\n\n$url = 'https://api.congressus.nl/v30';\n$options = [\n    'headers' => ['Authorization' => 'Bearer {api_access_key}']\n];\n\n$res = $client->request('GET', $url, $options);\necho $res->getStatusCode();\n// \"200\"\n\necho $res->getHeader('content-type')[0];\n// 'application/json; charset=utf8'\n\necho $res->getBody();\n// {\"data\": []...}\n"
          }
        ],
        "tags": [
          "Groups"
        ]
      },
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupFolder"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupFolder"
                }
              }
            }
          }
        },
        "summary": "Create Group folder",
        "description": "Use /group-folders endpoint instead",
        "deprecated": true,
        "tags": [
          "Groups"
        ]
      }
    },
    "/v30/groups/folders/{obj_id}": {
      "get": {
        "parameters": [],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupFolder"
                }
              }
            }
          }
        },
        "summary": "Retrieve Group folder",
        "description": "Use /group-folders/{obj_id} endpoint instead",
        "deprecated": true,
        "tags": [
          "Groups"
        ]
      },
      "put": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupFolder"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "202": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupFolder"
                }
              }
            }
          }
        },
        "summary": "Update Group folder",
        "description": "Use /group-folders/{obj_id} endpoint instead",
        "deprecated": true,
        "tags": [
          "Groups"
        ]
      },
      "delete": {
        "parameters": [],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "204": {
            "description": "No content"
          }
        },
        "summary": "Delete Group folder",
        "description": "Use /group-folders/{obj_id} endpoint instead",
        "deprecated": true,
        "tags": [
          "Groups"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "obj_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        }
      ]
    },
    "/v30/groups": {
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "published",
            "description": "Filter on `published`",
            "schema": {
              "type": "string",
              "enum": [
                "0",
                "1"
              ]
            },
            "required": false
          },
          {
            "in": "query",
            "name": "folder_id",
            "description": "Filter by Folder",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "required": false,
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "member_id",
            "description": "Filter by Member",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "required": false,
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "socie_app_id",
            "description": "Filter by None",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "required": false,
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1
            },
            "required": false
          },
          {
            "in": "query",
            "name": "page_size",
            "schema": {
              "type": "integer",
              "default": 25,
              "minimum": 1,
              "maximum": 100
            },
            "required": false
          },
          {
            "in": "query",
            "name": "order",
            "schema": {
              "type": "string",
              "default": "name"
            },
            "required": false
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupPagination"
                }
              }
            }
          }
        },
        "summary": "List Groups",
        "description": "",
        "x-codeSamples": [
          {
            "lang": "Python",
            "source": "\nimport requests\n\nheaders = {'Authorization': 'Bearer {api_access_key}'}\nparams = {}\nurl = 'https://api.congressus.nl/v30'\n\nresp = requests.get(url, params=params, headers=headers)\nresp.raise_for_status()\n\nresult = resp.json()\ndata = result['data']\n"
          },
          {
            "lang": "PHP",
            "source": "\n$client = new GuzzleHttp\\Client();\n\n$url = 'https://api.congressus.nl/v30';\n$options = [\n    'headers' => ['Authorization' => 'Bearer {api_access_key}']\n];\n\n$res = $client->request('GET', $url, $options);\necho $res->getStatusCode();\n// \"200\"\n\necho $res->getHeader('content-type')[0];\n// 'application/json; charset=utf8'\n\necho $res->getBody();\n// {\"data\": []...}\n"
          }
        ],
        "tags": [
          "Groups"
        ]
      }
    },
    "/v30/groups/{obj_id}": {
      "get": {
        "parameters": [],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupWithMemberships"
                }
              }
            }
          }
        },
        "summary": "Retrieve Group",
        "description": "",
        "tags": [
          "Groups"
        ]
      },
      "put": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupWithMemberships"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "202": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupWithMemberships"
                }
              }
            }
          }
        },
        "summary": "Update Group",
        "description": "",
        "tags": [
          "Groups"
        ]
      },
      "delete": {
        "parameters": [],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "204": {
            "description": "No content"
          }
        },
        "summary": "Delete Group",
        "description": "",
        "tags": [
          "Groups"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "obj_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        }
      ]
    },
    "/v30/groups/memberships": {
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "group_id",
            "description": "Filter by Group",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "required": false,
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "member_id",
            "description": "Filter by Member",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "required": false,
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1
            },
            "required": false
          },
          {
            "in": "query",
            "name": "page_size",
            "schema": {
              "type": "integer",
              "default": 25,
              "minimum": 1,
              "maximum": 100
            },
            "required": false
          },
          {
            "in": "query",
            "name": "order",
            "schema": {
              "type": "string",
              "default": null,
              "nullable": true
            },
            "required": false
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Group membershipPagination"
                }
              }
            }
          }
        },
        "summary": "List Group memberships",
        "description": "",
        "x-codeSamples": [
          {
            "lang": "Python",
            "source": "\nimport requests\n\nheaders = {'Authorization': 'Bearer {api_access_key}'}\nparams = {}\nurl = 'https://api.congressus.nl/v30'\n\nresp = requests.get(url, params=params, headers=headers)\nresp.raise_for_status()\n\nresult = resp.json()\ndata = result['data']\n"
          },
          {
            "lang": "PHP",
            "source": "\n$client = new GuzzleHttp\\Client();\n\n$url = 'https://api.congressus.nl/v30';\n$options = [\n    'headers' => ['Authorization' => 'Bearer {api_access_key}']\n];\n\n$res = $client->request('GET', $url, $options);\necho $res->getStatusCode();\n// \"200\"\n\necho $res->getHeader('content-type')[0];\n// 'application/json; charset=utf8'\n\necho $res->getBody();\n// {\"data\": []...}\n"
          }
        ],
        "tags": [
          "Groups"
        ]
      },
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupMembership"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupMembership"
                }
              }
            }
          }
        },
        "summary": "Create Group membership",
        "description": "",
        "tags": [
          "Groups"
        ]
      }
    },
    "/v30/groups/memberships/{obj_id}": {
      "get": {
        "parameters": [],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupMembership"
                }
              }
            }
          }
        },
        "summary": "Retrieve Group membership",
        "description": "",
        "tags": [
          "Groups"
        ]
      },
      "put": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupMembership"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "202": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupMembership"
                }
              }
            }
          }
        },
        "summary": "Update Group membership",
        "description": "",
        "tags": [
          "Groups"
        ]
      },
      "delete": {
        "parameters": [],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "204": {
            "description": "No content"
          }
        },
        "summary": "Delete Group membership",
        "description": "",
        "tags": [
          "Groups"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "obj_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        }
      ]
    },
    "/v30/tasks": {
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "author_id",
            "description": "Filter by None",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "required": false,
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "assignee_id",
            "description": "Filter by None",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "required": false,
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "subject_type",
            "description": "Filter by None",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "Membership",
                  "SaleInvoice",
                  "Other"
                ]
              }
            },
            "required": false,
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "is_completed",
            "description": "Filter on `is_completed`",
            "schema": {
              "type": "string",
              "enum": [
                "0",
                "1"
              ]
            },
            "required": false
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1
            },
            "required": false
          },
          {
            "in": "query",
            "name": "page_size",
            "schema": {
              "type": "integer",
              "default": 25,
              "minimum": 1,
              "maximum": 100
            },
            "required": false
          },
          {
            "in": "query",
            "name": "order",
            "schema": {
              "type": "string",
              "default": "id"
            },
            "required": false
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskPagination"
                }
              }
            }
          }
        },
        "summary": "List Tasks",
        "description": "",
        "x-codeSamples": [
          {
            "lang": "Python",
            "source": "\nimport requests\n\nheaders = {'Authorization': 'Bearer {api_access_key}'}\nparams = {}\nurl = 'https://api.congressus.nl/v30/tasks'\n\nresp = requests.get(url, params=params, headers=headers)\nresp.raise_for_status()\n\nresult = resp.json()\ndata = result['data']\n"
          },
          {
            "lang": "PHP",
            "source": "\n$client = new GuzzleHttp\\Client();\n\n$url = 'https://api.congressus.nl/v30/tasks';\n$options = [\n    'headers' => ['Authorization' => 'Bearer {api_access_key}']\n];\n\n$res = $client->request('GET', $url, $options);\necho $res->getStatusCode();\n// \"200\"\n\necho $res->getHeader('content-type')[0];\n// 'application/json; charset=utf8'\n\necho $res->getBody();\n// {\"data\": []...}\n"
          }
        ],
        "tags": [
          "Logs"
        ]
      }
    },
    "/v30/tasks/{obj_id}": {
      "put": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTask"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "202": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Task"
                }
              }
            }
          }
        },
        "summary": "Update Task",
        "description": "",
        "tags": [
          "Logs"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "obj_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        }
      ]
    },
    "/v30/member-statuses": {
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "archived",
            "description": "Filter on `archived`",
            "schema": {
              "type": "string",
              "enum": [
                "0",
                "1"
              ]
            },
            "required": false
          },
          {
            "in": "query",
            "name": "hidden",
            "description": "Filter on `hidden`",
            "schema": {
              "type": "string",
              "enum": [
                "0",
                "1"
              ]
            },
            "required": false
          },
          {
            "in": "query",
            "name": "deceased",
            "description": "Filter on `is_deceased`",
            "schema": {
              "type": "string",
              "enum": [
                "0",
                "1"
              ]
            },
            "required": false
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1
            },
            "required": false
          },
          {
            "in": "query",
            "name": "page_size",
            "schema": {
              "type": "integer",
              "default": 25,
              "minimum": 1,
              "maximum": 100
            },
            "required": false
          },
          {
            "in": "query",
            "name": "order",
            "schema": {
              "type": "string",
              "default": "hidden:asc,archived:asc,order:asc,name:asc"
            },
            "required": false
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MemberStatusListPagination"
                }
              }
            }
          }
        },
        "summary": "List Member statuses",
        "description": "Use the _include_hidden_ parameter to include hidden member statuses. Hidden member statuses\n    are not shown by default.",
        "x-codeSamples": [
          {
            "lang": "Python",
            "source": "\nimport requests\n\nheaders = {'Authorization': 'Bearer {api_access_key}'}\nparams = {}\nurl = 'https://api.congressus.nl/v30'\n\nresp = requests.get(url, params=params, headers=headers)\nresp.raise_for_status()\n\nresult = resp.json()\ndata = result['data']\n"
          },
          {
            "lang": "PHP",
            "source": "\n$client = new GuzzleHttp\\Client();\n\n$url = 'https://api.congressus.nl/v30';\n$options = [\n    'headers' => ['Authorization' => 'Bearer {api_access_key}']\n];\n\n$res = $client->request('GET', $url, $options);\necho $res->getStatusCode();\n// \"200\"\n\necho $res->getHeader('content-type')[0];\n// 'application/json; charset=utf8'\n\necho $res->getBody();\n// {\"data\": []...}\n"
          }
        ],
        "tags": [
          "Member statuses"
        ]
      }
    },
    "/v30/member-statuses/{obj_id}": {
      "get": {
        "parameters": [],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MemberStatusWithFieldSettings"
                }
              }
            }
          }
        },
        "summary": "Retrieve Member status",
        "description": "",
        "tags": [
          "Member statuses"
        ]
      },
      "put": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MemberStatusWithFieldSettings"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "202": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MemberStatusWithFieldSettings"
                }
              }
            }
          }
        },
        "summary": "Update Member status",
        "description": "",
        "tags": [
          "Member statuses"
        ]
      },
      "delete": {
        "parameters": [],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "204": {
            "description": "No content"
          }
        },
        "summary": "Delete Member status",
        "description": "",
        "tags": [
          "Member statuses"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "obj_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        }
      ]
    },
    "/v30/members/custom-fields": {
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1
            },
            "required": false
          },
          {
            "in": "query",
            "name": "page_size",
            "schema": {
              "type": "integer",
              "default": 25,
              "minimum": 1,
              "maximum": 100
            },
            "required": false
          },
          {
            "in": "query",
            "name": "order",
            "schema": {
              "type": "string",
              "default": "ref"
            },
            "required": false
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Custom fieldPagination"
                }
              }
            }
          }
        },
        "summary": "List Custom fields",
        "description": "",
        "x-codeSamples": [
          {
            "lang": "Python",
            "source": "\nimport requests\n\nheaders = {'Authorization': 'Bearer {api_access_key}'}\nparams = {}\nurl = 'https://api.congressus.nl/v30'\n\nresp = requests.get(url, params=params, headers=headers)\nresp.raise_for_status()\n\nresult = resp.json()\ndata = result['data']\n"
          },
          {
            "lang": "PHP",
            "source": "\n$client = new GuzzleHttp\\Client();\n\n$url = 'https://api.congressus.nl/v30';\n$options = [\n    'headers' => ['Authorization' => 'Bearer {api_access_key}']\n];\n\n$res = $client->request('GET', $url, $options);\necho $res->getStatusCode();\n// \"200\"\n\necho $res->getHeader('content-type')[0];\n// 'application/json; charset=utf8'\n\necho $res->getBody();\n// {\"data\": []...}\n"
          }
        ],
        "tags": [
          "Members"
        ]
      }
    },
    "/v30/members/custom-fields/{obj_id}": {
      "get": {
        "parameters": [],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MemberField"
                }
              }
            }
          }
        },
        "summary": "Retrieve Custom field by ID",
        "description": "",
        "tags": [
          "Members"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "obj_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        }
      ]
    },
    "/v30/members/custom-fields/{ref}": {
      "get": {
        "parameters": [],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MemberField"
                }
              }
            }
          }
        },
        "summary": "Retrieve Custom field by ref",
        "description": "",
        "tags": [
          "Members"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "ref",
          "required": true,
          "schema": {
            "type": "string",
            "minLength": 1
          }
        }
      ]
    },
    "/v30/members/{member_id}/logs": {
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "author_id",
            "description": "Filter by None",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "required": false,
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "type",
            "description": "Filter by None",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "Note",
                  "Task",
                  "Action",
                  "Change"
                ]
              }
            },
            "required": false,
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1
            },
            "required": false
          },
          {
            "in": "query",
            "name": "page_size",
            "schema": {
              "type": "integer",
              "default": 25,
              "minimum": 1,
              "maximum": 100
            },
            "required": false
          },
          {
            "in": "query",
            "name": "order",
            "schema": {
              "type": "string",
              "default": "created:desc"
            },
            "required": false
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogEntryPagination"
                }
              }
            }
          }
        },
        "summary": "List LogEntries",
        "description": "List log entries. Log entries can be of type `note`, `task`, `action` or `change`.",
        "x-codeSamples": [
          {
            "lang": "Python",
            "source": "\nimport requests\n\nheaders = {'Authorization': 'Bearer {api_access_key}'}\nparams = {}\nurl = 'https://api.congressus.nl/v30/members/<int:member_id>/logs'\n\nresp = requests.get(url, params=params, headers=headers)\nresp.raise_for_status()\n\nresult = resp.json()\ndata = result['data']\n"
          },
          {
            "lang": "PHP",
            "source": "\n$client = new GuzzleHttp\\Client();\n\n$url = 'https://api.congressus.nl/v30/members/<int:member_id>/logs';\n$options = [\n    'headers' => ['Authorization' => 'Bearer {api_access_key}']\n];\n\n$res = $client->request('GET', $url, $options);\necho $res->getStatusCode();\n// \"200\"\n\necho $res->getHeader('content-type')[0];\n// 'application/json; charset=utf8'\n\necho $res->getBody();\n// {\"data\": []...}\n"
          }
        ],
        "tags": [
          "Members"
        ]
      },
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateLogEntry"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogEntry"
                }
              }
            }
          }
        },
        "summary": "Create LogEntry",
        "description": "Create a log entry. This is only possible for log entries of type `note` or `task`.",
        "tags": [
          "Members"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "member_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        }
      ]
    },
    "/v30/members/{member_id}/logs/{log_entry_id}": {
      "get": {
        "parameters": [],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogEntry"
                }
              }
            }
          }
        },
        "summary": "Retrieve LogEntry",
        "description": "",
        "tags": [
          "Members"
        ]
      },
      "put": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateLogEntry"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "202": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogEntry"
                }
              }
            }
          }
        },
        "summary": "Update LogEntry",
        "description": "\n## Update a log entry\n\n### Limitations:\nThis is only possible for log entries of type `note` or `task`.\n\n### Updating simple fields:\nFor notes, only the `text` field can be updated. For tasks, it's also possible to update the assignee through the\n`assignee_type` and `assignee_id` fields.\n\n### Marking tasks as completed:\nTasks can also be marked as complete by setting `is_completed` to true and\noptionally setting `completed_by_id` to the ID of the user that completed the task. If `completed_by_id` is not set,\nthe current user will be used.\n",
        "tags": [
          "Members"
        ]
      },
      "delete": {
        "parameters": [],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "204": {
            "description": "No content"
          }
        },
        "summary": "Delete LogEntry",
        "description": "Delete a log entry. This is only possible for log entries of type `note` or `task`.",
        "tags": [
          "Members"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "member_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        },
        {
          "in": "path",
          "name": "log_entry_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        }
      ]
    },
    "/v30/members": {
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "status_id",
            "description": "Filter by None",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "required": false,
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "socie_app_id",
            "description": "Filter by None",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "required": false,
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1
            },
            "required": false
          },
          {
            "in": "query",
            "name": "page_size",
            "schema": {
              "type": "integer",
              "default": 25,
              "minimum": 1,
              "maximum": 100
            },
            "required": false
          },
          {
            "in": "query",
            "name": "order",
            "schema": {
              "type": "string",
              "default": "id"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "context",
            "description": "Filter by None",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "sign_up",
                  "profile_activate",
                  "profile_edit",
                  "almanac",
                  "manager_add",
                  "manager_edit"
                ]
              }
            },
            "required": false,
            "explode": true,
            "style": "form"
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MemberPagination"
                }
              }
            }
          }
        },
        "summary": "List Members",
        "description": "By passing the `context` query filter\neach row is filtered according to the context derived by there status.\nThis means that each row will only contain the fields that are set to visible or higher.\nThe settings for each context can be found in the manager: https://manager.congressus.nl/settings/statuses",
        "x-codeSamples": [
          {
            "lang": "Python",
            "source": "\nimport requests\n\nheaders = {'Authorization': 'Bearer {api_access_key}'}\nparams = {}\nurl = 'https://api.congressus.nl/v30/members'\n\nresp = requests.get(url, params=params, headers=headers)\nresp.raise_for_status()\n\nresult = resp.json()\ndata = result['data']\n"
          },
          {
            "lang": "PHP",
            "source": "\n$client = new GuzzleHttp\\Client();\n\n$url = 'https://api.congressus.nl/v30/members';\n$options = [\n    'headers' => ['Authorization' => 'Bearer {api_access_key}']\n];\n\n$res = $client->request('GET', $url, $options);\necho $res->getStatusCode();\n// \"200\"\n\necho $res->getHeader('content-type')[0];\n// 'application/json; charset=utf8'\n\necho $res->getBody();\n// {\"data\": []...}\n"
          }
        ],
        "tags": [
          "Members"
        ]
      },
      "post": {
        "parameters": [
          {
            "in": "query",
            "name": "context",
            "description": "Filter by None",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "sign_up",
                  "profile_activate",
                  "profile_edit",
                  "almanac",
                  "manager_add",
                  "manager_edit"
                ]
              }
            },
            "required": false,
            "explode": true,
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateMember"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Member"
                }
              }
            }
          }
        },
        "summary": "Create Member",
        "description": "",
        "tags": [
          "Members"
        ]
      }
    },
    "/v30/members/{obj_id}": {
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "context",
            "description": "Filter by None",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "sign_up",
                  "profile_activate",
                  "profile_edit",
                  "almanac",
                  "manager_add",
                  "manager_edit"
                ]
              }
            },
            "required": false,
            "explode": true,
            "style": "form"
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MemberWithCustomFields"
                }
              }
            }
          }
        },
        "summary": "Retrieve Member",
        "description": "",
        "tags": [
          "Members"
        ]
      },
      "put": {
        "parameters": [
          {
            "in": "query",
            "name": "context",
            "description": "Filter by None",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "sign_up",
                  "profile_activate",
                  "profile_edit",
                  "almanac",
                  "manager_add",
                  "manager_edit"
                ]
              }
            },
            "required": false,
            "explode": true,
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MemberWithCustomFields"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "202": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MemberWithCustomFields"
                }
              }
            }
          }
        },
        "summary": "Update Member",
        "description": "",
        "tags": [
          "Members"
        ]
      },
      "delete": {
        "parameters": [],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "204": {
            "description": "No content"
          }
        },
        "summary": "Delete Member",
        "description": "",
        "tags": [
          "Members"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "obj_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        }
      ]
    },
    "/v30/members/{obj_id}/statuses": {
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1
            },
            "required": false
          },
          {
            "in": "query",
            "name": "page_size",
            "schema": {
              "type": "integer",
              "default": 25,
              "minimum": 1,
              "maximum": 100
            },
            "required": false
          },
          {
            "in": "query",
            "name": "order",
            "schema": {
              "type": "string",
              "default": "member_from:desc"
            },
            "required": false
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Membership statusPagination"
                }
              }
            }
          }
        },
        "summary": "List Membership statuses",
        "description": "",
        "x-codeSamples": [
          {
            "lang": "Python",
            "source": "\nimport requests\n\nheaders = {'Authorization': 'Bearer {api_access_key}'}\nparams = {}\nurl = 'https://api.congressus.nl/v30'\n\nresp = requests.get(url, params=params, headers=headers)\nresp.raise_for_status()\n\nresult = resp.json()\ndata = result['data']\n"
          },
          {
            "lang": "PHP",
            "source": "\n$client = new GuzzleHttp\\Client();\n\n$url = 'https://api.congressus.nl/v30';\n$options = [\n    'headers' => ['Authorization' => 'Bearer {api_access_key}']\n];\n\n$res = $client->request('GET', $url, $options);\necho $res->getStatusCode();\n// \"200\"\n\necho $res->getHeader('content-type')[0];\n// 'application/json; charset=utf8'\n\necho $res->getBody();\n// {\"data\": []...}\n"
          }
        ],
        "tags": [
          "Members"
        ]
      },
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MembershipStatus"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MembershipStatus"
                }
              }
            }
          }
        },
        "summary": "Create Membership status",
        "description": "",
        "tags": [
          "Members"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "obj_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        }
      ]
    },
    "/v30/members/{obj_id}/statuses/{membership_status_id}": {
      "get": {
        "parameters": [],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MembershipStatus"
                }
              }
            }
          }
        },
        "summary": "Retrieve Membership status",
        "description": "",
        "tags": [
          "Members"
        ]
      },
      "put": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MembershipStatus"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "202": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MembershipStatus"
                }
              }
            }
          }
        },
        "summary": "Update Membership status",
        "description": "",
        "tags": [
          "Members"
        ]
      },
      "delete": {
        "parameters": [],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "204": {
            "description": "No content"
          }
        },
        "summary": "Delete Membership status",
        "description": "",
        "tags": [
          "Members"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "obj_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        },
        {
          "in": "path",
          "name": "membership_status_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        }
      ]
    },
    "/v30/members/search": {
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "term",
            "schema": {
              "type": "string",
              "minLength": 3,
              "maxLength": 64
            },
            "required": true
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1
            },
            "required": false
          },
          {
            "in": "query",
            "name": "page_size",
            "schema": {
              "type": "integer",
              "default": 25,
              "minimum": 1,
              "maximum": 100
            },
            "required": false
          },
          {
            "in": "query",
            "name": "order",
            "schema": {
              "type": "string",
              "default": null,
              "nullable": true
            },
            "required": false
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ElasticMemberPagination"
                }
              }
            }
          }
        },
        "summary": "Search Members",
        "description": "",
        "x-codeSamples": [
          {
            "lang": "Python",
            "source": "\nimport requests\n\nheaders = {'Authorization': 'Bearer {api_access_key}'}\nparams = {}\nurl = 'https://api.congressus.nl/v30'\n\nresp = requests.get(url, params=params, headers=headers)\nresp.raise_for_status()\n\nresult = resp.json()\ndata = result['data']\n"
          },
          {
            "lang": "PHP",
            "source": "\n$client = new GuzzleHttp\\Client();\n\n$url = 'https://api.congressus.nl/v30';\n$options = [\n    'headers' => ['Authorization' => 'Bearer {api_access_key}']\n];\n\n$res = $client->request('GET', $url, $options);\necho $res->getStatusCode();\n// \"200\"\n\necho $res->getHeader('content-type')[0];\n// 'application/json; charset=utf8'\n\necho $res->getBody();\n// {\"data\": []...}\n"
          }
        ],
        "tags": [
          "Members"
        ]
      }
    },
    "/v30/news": {
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "period_filter",
            "description": "Filter period on `published_from`",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "actual",
            "description": "Filter on `actual`",
            "schema": {
              "type": "string",
              "enum": [
                "0",
                "1"
              ]
            },
            "required": false
          },
          {
            "in": "query",
            "name": "comments_open",
            "description": "Filter on `comments_open`",
            "schema": {
              "type": "string",
              "enum": [
                "0",
                "1"
              ]
            },
            "required": false
          },
          {
            "in": "query",
            "name": "visibility",
            "description": "Filter by Visibility",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "public",
                  "protected"
                ]
              }
            },
            "required": false,
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1
            },
            "required": false
          },
          {
            "in": "query",
            "name": "page_size",
            "schema": {
              "type": "integer",
              "default": 25,
              "minimum": 1,
              "maximum": 100
            },
            "required": false
          },
          {
            "in": "query",
            "name": "order",
            "schema": {
              "type": "string",
              "default": "published_from:desc"
            },
            "required": false
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NewsPagination"
                }
              }
            }
          }
        },
        "summary": "List News",
        "description": "",
        "x-codeSamples": [
          {
            "lang": "Python",
            "source": "\nimport requests\n\nheaders = {'Authorization': 'Bearer {api_access_key}'}\nparams = {}\nurl = 'https://api.congressus.nl/v30'\n\nresp = requests.get(url, params=params, headers=headers)\nresp.raise_for_status()\n\nresult = resp.json()\ndata = result['data']\n"
          },
          {
            "lang": "PHP",
            "source": "\n$client = new GuzzleHttp\\Client();\n\n$url = 'https://api.congressus.nl/v30';\n$options = [\n    'headers' => ['Authorization' => 'Bearer {api_access_key}']\n];\n\n$res = $client->request('GET', $url, $options);\necho $res->getStatusCode();\n// \"200\"\n\necho $res->getHeader('content-type')[0];\n// 'application/json; charset=utf8'\n\necho $res->getBody();\n// {\"data\": []...}\n"
          }
        ],
        "tags": [
          "News"
        ]
      },
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/News"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/News"
                }
              }
            }
          }
        },
        "summary": "Create News",
        "description": "",
        "tags": [
          "News"
        ]
      }
    },
    "/v30/news/{obj_id}": {
      "get": {
        "parameters": [],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/News"
                }
              }
            }
          }
        },
        "summary": "Retrieve News",
        "description": "",
        "tags": [
          "News"
        ]
      },
      "put": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/News"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "202": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/News"
                }
              }
            }
          }
        },
        "summary": "Update News",
        "description": "",
        "tags": [
          "News"
        ]
      },
      "delete": {
        "parameters": [],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "204": {
            "description": "No content"
          }
        },
        "summary": "Delete News",
        "description": "",
        "tags": [
          "News"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "obj_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        }
      ]
    },
    "/v30/notifications": {
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1
            },
            "required": false
          },
          {
            "in": "query",
            "name": "page_size",
            "schema": {
              "type": "integer",
              "default": 25,
              "minimum": 1,
              "maximum": 100
            },
            "required": false
          },
          {
            "in": "query",
            "name": "order",
            "schema": {
              "type": "string",
              "default": null,
              "nullable": true
            },
            "required": false
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationPagination"
                }
              }
            }
          }
        },
        "summary": "List Notifications",
        "description": "",
        "x-codeSamples": [
          {
            "lang": "Python",
            "source": "\nimport requests\n\nheaders = {'Authorization': 'Bearer {api_access_key}'}\nparams = {}\nurl = 'https://api.congressus.nl/v30'\n\nresp = requests.get(url, params=params, headers=headers)\nresp.raise_for_status()\n\nresult = resp.json()\ndata = result['data']\n"
          },
          {
            "lang": "PHP",
            "source": "\n$client = new GuzzleHttp\\Client();\n\n$url = 'https://api.congressus.nl/v30';\n$options = [\n    'headers' => ['Authorization' => 'Bearer {api_access_key}']\n];\n\n$res = $client->request('GET', $url, $options);\necho $res->getStatusCode();\n// \"200\"\n\necho $res->getHeader('content-type')[0];\n// 'application/json; charset=utf8'\n\necho $res->getBody();\n// {\"data\": []...}\n"
          }
        ],
        "tags": [
          "Notifications"
        ]
      }
    },
    "/v30/organisations/categories": {
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1
            },
            "required": false
          },
          {
            "in": "query",
            "name": "page_size",
            "schema": {
              "type": "integer",
              "default": 25,
              "minimum": 1,
              "maximum": 100
            },
            "required": false
          },
          {
            "in": "query",
            "name": "order",
            "schema": {
              "type": "string",
              "default": null,
              "nullable": true
            },
            "required": false
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organisation categoryPagination"
                }
              }
            }
          }
        },
        "summary": "List Organisation categories",
        "description": "",
        "x-codeSamples": [
          {
            "lang": "Python",
            "source": "\nimport requests\n\nheaders = {'Authorization': 'Bearer {api_access_key}'}\nparams = {}\nurl = 'https://api.congressus.nl/v30'\n\nresp = requests.get(url, params=params, headers=headers)\nresp.raise_for_status()\n\nresult = resp.json()\ndata = result['data']\n"
          },
          {
            "lang": "PHP",
            "source": "\n$client = new GuzzleHttp\\Client();\n\n$url = 'https://api.congressus.nl/v30';\n$options = [\n    'headers' => ['Authorization' => 'Bearer {api_access_key}']\n];\n\n$res = $client->request('GET', $url, $options);\necho $res->getStatusCode();\n// \"200\"\n\necho $res->getHeader('content-type')[0];\n// 'application/json; charset=utf8'\n\necho $res->getBody();\n// {\"data\": []...}\n"
          }
        ],
        "tags": [
          "Organisations"
        ]
      },
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganisationCategory"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganisationCategory"
                }
              }
            }
          }
        },
        "summary": "Create Organisation category",
        "description": "",
        "tags": [
          "Organisations"
        ]
      }
    },
    "/v30/organisations/categories/{obj_id}": {
      "get": {
        "parameters": [],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganisationCategory"
                }
              }
            }
          }
        },
        "summary": "Retrieve Organisation category",
        "description": "",
        "tags": [
          "Organisations"
        ]
      },
      "put": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganisationCategory"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "202": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganisationCategory"
                }
              }
            }
          }
        },
        "summary": "Update Organisation category",
        "description": "",
        "tags": [
          "Organisations"
        ]
      },
      "delete": {
        "parameters": [],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "204": {
            "description": "No content"
          }
        },
        "summary": "Delete Organisation category",
        "description": "",
        "tags": [
          "Organisations"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "obj_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        }
      ]
    },
    "/v30/organisations": {
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "category_id",
            "description": "Filter by Category",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "required": false,
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "sbi_code",
            "description": "Filter by SBI code",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "required": false,
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "legal_form",
            "description": "Filter by Legal form",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "required": false,
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "member_id",
            "description": "Filter by Member",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "required": false,
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1
            },
            "required": false
          },
          {
            "in": "query",
            "name": "page_size",
            "schema": {
              "type": "integer",
              "default": 25,
              "minimum": 1,
              "maximum": 100
            },
            "required": false
          },
          {
            "in": "query",
            "name": "order",
            "schema": {
              "type": "string",
              "default": "name"
            },
            "required": false
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganisationPagination"
                }
              }
            }
          }
        },
        "summary": "List Organisations",
        "description": "",
        "x-codeSamples": [
          {
            "lang": "Python",
            "source": "\nimport requests\n\nheaders = {'Authorization': 'Bearer {api_access_key}'}\nparams = {}\nurl = 'https://api.congressus.nl/v30'\n\nresp = requests.get(url, params=params, headers=headers)\nresp.raise_for_status()\n\nresult = resp.json()\ndata = result['data']\n"
          },
          {
            "lang": "PHP",
            "source": "\n$client = new GuzzleHttp\\Client();\n\n$url = 'https://api.congressus.nl/v30';\n$options = [\n    'headers' => ['Authorization' => 'Bearer {api_access_key}']\n];\n\n$res = $client->request('GET', $url, $options);\necho $res->getStatusCode();\n// \"200\"\n\necho $res->getHeader('content-type')[0];\n// 'application/json; charset=utf8'\n\necho $res->getBody();\n// {\"data\": []...}\n"
          }
        ],
        "tags": [
          "Organisations"
        ]
      },
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Organisation"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organisation"
                }
              }
            }
          }
        },
        "summary": "Create Organisation",
        "description": "",
        "tags": [
          "Organisations"
        ]
      }
    },
    "/v30/organisations/{obj_id}": {
      "get": {
        "parameters": [],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organisation"
                }
              }
            }
          }
        },
        "summary": "Retrieve Organisation",
        "description": "",
        "tags": [
          "Organisations"
        ]
      },
      "put": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Organisation"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "202": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organisation"
                }
              }
            }
          }
        },
        "summary": "Update Organisation",
        "description": "",
        "tags": [
          "Organisations"
        ]
      },
      "delete": {
        "parameters": [],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "204": {
            "description": "No content"
          }
        },
        "summary": "Delete Organisation",
        "description": "",
        "tags": [
          "Organisations"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "obj_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        }
      ]
    },
    "/v30/organisations/memberships": {
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "organisation_id",
            "description": "Filter by Organisation",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "required": false,
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "member_id",
            "description": "Filter by Member",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "required": false,
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1
            },
            "required": false
          },
          {
            "in": "query",
            "name": "page_size",
            "schema": {
              "type": "integer",
              "default": 25,
              "minimum": 1,
              "maximum": 100
            },
            "required": false
          },
          {
            "in": "query",
            "name": "order",
            "schema": {
              "type": "string",
              "default": null,
              "nullable": true
            },
            "required": false
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organisation membershipPagination"
                }
              }
            }
          }
        },
        "summary": "List Organisation memberships",
        "description": "",
        "x-codeSamples": [
          {
            "lang": "Python",
            "source": "\nimport requests\n\nheaders = {'Authorization': 'Bearer {api_access_key}'}\nparams = {}\nurl = 'https://api.congressus.nl/v30'\n\nresp = requests.get(url, params=params, headers=headers)\nresp.raise_for_status()\n\nresult = resp.json()\ndata = result['data']\n"
          },
          {
            "lang": "PHP",
            "source": "\n$client = new GuzzleHttp\\Client();\n\n$url = 'https://api.congressus.nl/v30';\n$options = [\n    'headers' => ['Authorization' => 'Bearer {api_access_key}']\n];\n\n$res = $client->request('GET', $url, $options);\necho $res->getStatusCode();\n// \"200\"\n\necho $res->getHeader('content-type')[0];\n// 'application/json; charset=utf8'\n\necho $res->getBody();\n// {\"data\": []...}\n"
          }
        ],
        "tags": [
          "Organisations"
        ]
      },
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganisationMembership"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganisationMembership"
                }
              }
            }
          }
        },
        "summary": "Create Organisation membership",
        "description": "",
        "tags": [
          "Organisations"
        ]
      }
    },
    "/v30/organisations/memberships/{obj_id}": {
      "get": {
        "parameters": [],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganisationMembership"
                }
              }
            }
          }
        },
        "summary": "Retrieve Organisation membership",
        "description": "",
        "tags": [
          "Organisations"
        ]
      },
      "put": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganisationMembership"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "202": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganisationMembership"
                }
              }
            }
          }
        },
        "summary": "Update Organisation membership",
        "description": "",
        "tags": [
          "Organisations"
        ]
      },
      "delete": {
        "parameters": [],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "204": {
            "description": "No content"
          }
        },
        "summary": "Delete Organisation membership",
        "description": "",
        "tags": [
          "Organisations"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "obj_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        }
      ]
    },
    "/v30/product-folders/recursive": {
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "published",
            "description": "Filter on `published`",
            "schema": {
              "type": "string",
              "enum": [
                "0",
                "1"
              ]
            },
            "required": false
          },
          {
            "in": "query",
            "name": "parent_id",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1
            },
            "required": false
          },
          {
            "in": "query",
            "name": "page_size",
            "schema": {
              "type": "integer",
              "default": 25,
              "minimum": 1,
              "maximum": 100
            },
            "required": false
          },
          {
            "in": "query",
            "name": "order",
            "schema": {
              "type": "string",
              "default": "name"
            },
            "required": false
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductFolderListRecursivePagination"
                }
              }
            }
          }
        },
        "summary": "List Product folders - recursive",
        "description": "Recursive list with all product folders and their children. Added for convenience, e.g. when you\n    want to render a select dropdown with all folders.",
        "x-codeSamples": [
          {
            "lang": "Python",
            "source": "\nimport requests\n\nheaders = {'Authorization': 'Bearer {api_access_key}'}\nparams = {}\nurl = 'https://api.congressus.nl/v30'\n\nresp = requests.get(url, params=params, headers=headers)\nresp.raise_for_status()\n\nresult = resp.json()\ndata = result['data']\n"
          },
          {
            "lang": "PHP",
            "source": "\n$client = new GuzzleHttp\\Client();\n\n$url = 'https://api.congressus.nl/v30';\n$options = [\n    'headers' => ['Authorization' => 'Bearer {api_access_key}']\n];\n\n$res = $client->request('GET', $url, $options);\necho $res->getStatusCode();\n// \"200\"\n\necho $res->getHeader('content-type')[0];\n// 'application/json; charset=utf8'\n\necho $res->getBody();\n// {\"data\": []...}\n"
          }
        ],
        "tags": [
          "Product folders"
        ]
      }
    },
    "/v30/product-folders": {
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "published",
            "description": "Filter on `published`",
            "schema": {
              "type": "string",
              "enum": [
                "0",
                "1"
              ]
            },
            "required": false
          },
          {
            "in": "query",
            "name": "parent_id",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1
            },
            "required": false
          },
          {
            "in": "query",
            "name": "page_size",
            "schema": {
              "type": "integer",
              "default": 25,
              "minimum": 1,
              "maximum": 100
            },
            "required": false
          },
          {
            "in": "query",
            "name": "order",
            "schema": {
              "type": "string",
              "default": "name"
            },
            "required": false
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product folderPagination"
                }
              }
            }
          }
        },
        "summary": "List Product folders",
        "description": "",
        "x-codeSamples": [
          {
            "lang": "Python",
            "source": "\nimport requests\n\nheaders = {'Authorization': 'Bearer {api_access_key}'}\nparams = {}\nurl = 'https://api.congressus.nl/v30'\n\nresp = requests.get(url, params=params, headers=headers)\nresp.raise_for_status()\n\nresult = resp.json()\ndata = result['data']\n"
          },
          {
            "lang": "PHP",
            "source": "\n$client = new GuzzleHttp\\Client();\n\n$url = 'https://api.congressus.nl/v30';\n$options = [\n    'headers' => ['Authorization' => 'Bearer {api_access_key}']\n];\n\n$res = $client->request('GET', $url, $options);\necho $res->getStatusCode();\n// \"200\"\n\necho $res->getHeader('content-type')[0];\n// 'application/json; charset=utf8'\n\necho $res->getBody();\n// {\"data\": []...}\n"
          }
        ],
        "tags": [
          "Product folders"
        ]
      },
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductFolder"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductFolder"
                }
              }
            }
          }
        },
        "summary": "Create Product folder",
        "description": "",
        "tags": [
          "Product folders"
        ]
      }
    },
    "/v30/product-folders/{obj_id}": {
      "get": {
        "parameters": [],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductFolder"
                }
              }
            }
          }
        },
        "summary": "Retrieve Product folder",
        "description": "",
        "tags": [
          "Product folders"
        ]
      },
      "put": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductFolder"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "202": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductFolder"
                }
              }
            }
          }
        },
        "summary": "Update Product folder",
        "description": "",
        "tags": [
          "Product folders"
        ]
      },
      "delete": {
        "parameters": [],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "204": {
            "description": "No content"
          }
        },
        "summary": "Delete Product folder",
        "description": "",
        "tags": [
          "Product folders"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "obj_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        }
      ]
    },
    "/v30/products": {
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "published",
            "description": "Filter on `published`",
            "schema": {
              "type": "string",
              "enum": [
                "0",
                "1"
              ]
            },
            "required": false
          },
          {
            "in": "query",
            "name": "status",
            "description": "Filter on `status`",
            "schema": {
              "type": "string",
              "enum": [
                "all",
                "published",
                "concept",
                "archived"
              ]
            },
            "required": false
          },
          {
            "in": "query",
            "name": "folder_id",
            "description": "Filter by Folder",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "required": false,
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1
            },
            "required": false
          },
          {
            "in": "query",
            "name": "page_size",
            "schema": {
              "type": "integer",
              "default": 25,
              "minimum": 1,
              "maximum": 100
            },
            "required": false
          },
          {
            "in": "query",
            "name": "order",
            "schema": {
              "type": "string",
              "default": null,
              "nullable": true
            },
            "required": false
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductPagination"
                }
              }
            }
          }
        },
        "summary": "List Products",
        "description": "",
        "x-codeSamples": [
          {
            "lang": "Python",
            "source": "\nimport requests\n\nheaders = {'Authorization': 'Bearer {api_access_key}'}\nparams = {}\nurl = 'https://api.congressus.nl/v30'\n\nresp = requests.get(url, params=params, headers=headers)\nresp.raise_for_status()\n\nresult = resp.json()\ndata = result['data']\n"
          },
          {
            "lang": "PHP",
            "source": "\n$client = new GuzzleHttp\\Client();\n\n$url = 'https://api.congressus.nl/v30';\n$options = [\n    'headers' => ['Authorization' => 'Bearer {api_access_key}']\n];\n\n$res = $client->request('GET', $url, $options);\necho $res->getStatusCode();\n// \"200\"\n\necho $res->getHeader('content-type')[0];\n// 'application/json; charset=utf8'\n\necho $res->getBody();\n// {\"data\": []...}\n"
          }
        ],
        "tags": [
          "Products"
        ]
      },
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Product"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          }
        },
        "summary": "Create Product",
        "description": "",
        "tags": [
          "Products"
        ]
      }
    },
    "/v30/products/{obj_id}": {
      "get": {
        "parameters": [],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          }
        },
        "summary": "Retrieve Product",
        "description": "",
        "tags": [
          "Products"
        ]
      },
      "put": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Product"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "202": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          }
        },
        "summary": "Update Product",
        "description": "",
        "tags": [
          "Products"
        ]
      },
      "delete": {
        "parameters": [],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "204": {
            "description": "No content"
          }
        },
        "summary": "Delete Product",
        "description": "",
        "tags": [
          "Products"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "obj_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        }
      ]
    },
    "/v30/sale-invoices/{obj_id}/logs": {
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "author_id",
            "description": "Filter by None",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "required": false,
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "type",
            "description": "Filter by None",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "Note",
                  "Task",
                  "Action",
                  "Change"
                ]
              }
            },
            "required": false,
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1
            },
            "required": false
          },
          {
            "in": "query",
            "name": "page_size",
            "schema": {
              "type": "integer",
              "default": 25,
              "minimum": 1,
              "maximum": 100
            },
            "required": false
          },
          {
            "in": "query",
            "name": "order",
            "schema": {
              "type": "string",
              "default": "created:desc"
            },
            "required": false
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogEntryPagination"
                }
              }
            }
          }
        },
        "summary": "List LogEntries",
        "description": "List log entries. Log entries can be of type `note`, `task`, `action` or `change`.",
        "x-codeSamples": [
          {
            "lang": "Python",
            "source": "\nimport requests\n\nheaders = {'Authorization': 'Bearer {api_access_key}'}\nparams = {}\nurl = 'https://api.congressus.nl/v30/sale-invoices/<int:obj_id>/logs'\n\nresp = requests.get(url, params=params, headers=headers)\nresp.raise_for_status()\n\nresult = resp.json()\ndata = result['data']\n"
          },
          {
            "lang": "PHP",
            "source": "\n$client = new GuzzleHttp\\Client();\n\n$url = 'https://api.congressus.nl/v30/sale-invoices/<int:obj_id>/logs';\n$options = [\n    'headers' => ['Authorization' => 'Bearer {api_access_key}']\n];\n\n$res = $client->request('GET', $url, $options);\necho $res->getStatusCode();\n// \"200\"\n\necho $res->getHeader('content-type')[0];\n// 'application/json; charset=utf8'\n\necho $res->getBody();\n// {\"data\": []...}\n"
          }
        ],
        "tags": [
          "Sale invoices"
        ]
      },
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateLogEntry"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogEntry"
                }
              }
            }
          }
        },
        "summary": "Create LogEntry",
        "description": "Create a log entry. This is only possible for log entries of type `note` or `task`.",
        "tags": [
          "Sale invoices"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "obj_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        }
      ]
    },
    "/v30/sale-invoices/{obj_id}/logs/{log_entry_id}": {
      "get": {
        "parameters": [],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogEntry"
                }
              }
            }
          }
        },
        "summary": "Retrieve LogEntry",
        "description": "",
        "tags": [
          "Sale invoices"
        ]
      },
      "put": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateLogEntry"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "202": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogEntry"
                }
              }
            }
          }
        },
        "summary": "Update LogEntry",
        "description": "\n## Update a log entry\n\n### Limitations:\nThis is only possible for log entries of type `note` or `task`.\n\n### Updating simple fields:\nFor notes, only the `text` field can be updated. For tasks, it's also possible to update the assignee through the\n`assignee_type` and `assignee_id` fields.\n\n### Marking tasks as completed:\nTasks can also be marked as complete by setting `is_completed` to true and\noptionally setting `completed_by_id` to the ID of the user that completed the task. If `completed_by_id` is not set,\nthe current user will be used.\n",
        "tags": [
          "Sale invoices"
        ]
      },
      "delete": {
        "parameters": [],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "204": {
            "description": "No content"
          }
        },
        "summary": "Delete LogEntry",
        "description": "Delete a log entry. This is only possible for log entries of type `note` or `task`.",
        "tags": [
          "Sale invoices"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "log_entry_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        },
        {
          "in": "path",
          "name": "obj_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        }
      ]
    },
    "/v30/sale-invoices": {
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "entity_id",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "period_filter",
            "description": "Filter period on `invoice_date`",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "invoice_status",
            "description": "Filter by Invoice status",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "concept",
                  "open",
                  "pending_payment",
                  "late",
                  "reminded",
                  "paid",
                  "uncollectible"
                ]
              }
            },
            "required": false,
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "invoice_num_reminders_send",
            "description": "Filter by # Reminders",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "0",
                  "1",
                  "2",
                  "3"
                ]
              }
            },
            "required": false,
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "invoice_type",
            "description": "Filter by Invoice type",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "credit",
                  "debit",
                  "is_credited",
                  "is_not_credited",
                  "overpaid",
                  "suppressed",
                  "member",
                  "collection",
                  "external"
                ]
              }
            },
            "required": false,
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "category",
            "description": "Filter by Category",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "contribution",
                  "event_participation",
                  "planning",
                  "rental",
                  "webshop"
                ]
              }
            },
            "required": false,
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "product_offer_id",
            "description": "Filter by Product",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "required": false,
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "member_id",
            "description": "Filter by Member",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "required": false,
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "collection_id",
            "description": "Filter by Collection",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "required": false,
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "use_direct_debit",
            "description": "Filter on `use_direct_debit`",
            "schema": {
              "type": "string",
              "enum": [
                "0",
                "1"
              ]
            },
            "required": false
          },
          {
            "in": "query",
            "name": "contribution_start",
            "description": "Filter period on `contribution_start`",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "contribution_end",
            "description": "Filter period on `contribution_end`",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1
            },
            "required": false
          },
          {
            "in": "query",
            "name": "page_size",
            "schema": {
              "type": "integer",
              "default": 25,
              "minimum": 1,
              "maximum": 100
            },
            "required": false
          },
          {
            "in": "query",
            "name": "order",
            "schema": {
              "type": "string",
              "default": null,
              "nullable": true
            },
            "required": false
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SaleInvoicePagination"
                }
              }
            }
          }
        },
        "summary": "List Sale invoices",
        "description": "",
        "x-codeSamples": [
          {
            "lang": "Python",
            "source": "\nimport requests\n\nheaders = {'Authorization': 'Bearer {api_access_key}'}\nparams = {}\nurl = 'https://api.congressus.nl/v30/sale-invoices'\n\nresp = requests.get(url, params=params, headers=headers)\nresp.raise_for_status()\n\nresult = resp.json()\ndata = result['data']\n"
          },
          {
            "lang": "PHP",
            "source": "\n$client = new GuzzleHttp\\Client();\n\n$url = 'https://api.congressus.nl/v30/sale-invoices';\n$options = [\n    'headers' => ['Authorization' => 'Bearer {api_access_key}']\n];\n\n$res = $client->request('GET', $url, $options);\necho $res->getStatusCode();\n// \"200\"\n\necho $res->getHeader('content-type')[0];\n// 'application/json; charset=utf8'\n\necho $res->getBody();\n// {\"data\": []...}\n"
          }
        ],
        "tags": [
          "Sale invoices"
        ]
      },
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SaleInvoice"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SaleInvoice"
                }
              }
            }
          }
        },
        "summary": "Create SaleInvoice",
        "description": "",
        "tags": [
          "Sale invoices"
        ]
      }
    },
    "/v30/sale-invoices/{obj_id}": {
      "get": {
        "parameters": [],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SaleInvoice"
                }
              }
            }
          }
        },
        "summary": "Retrieve sale invoice",
        "description": "",
        "tags": [
          "Sale invoices"
        ]
      },
      "put": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SaleInvoice"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "202": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SaleInvoice"
                }
              }
            }
          }
        },
        "summary": "Update sale invoice",
        "description": "",
        "tags": [
          "Sale invoices"
        ]
      },
      "delete": {
        "parameters": [],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "204": {
            "description": "No content"
          }
        },
        "summary": "Delete sale invoice",
        "description": "",
        "tags": [
          "Sale invoices"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "obj_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        }
      ]
    },
    "/v30/sale-invoices/{obj_id}/send": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SaleInvoiceSend"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "204": {
            "description": "No content"
          }
        },
        "summary": "Send a sale invoice",
        "description": "",
        "tags": [
          "Sale invoices"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "obj_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        }
      ]
    },
    "/v30/sale-invoices/{obj_id}/remind": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Schema"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "204": {
            "description": "No content"
          }
        },
        "summary": "Remind a sale invoice",
        "description": "",
        "tags": [
          "Sale invoices"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "obj_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        }
      ]
    },
    "/v30/sale-invoices/{obj_id}/mark-uncollectible": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Schema"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "204": {
            "description": "No content"
          }
        },
        "summary": "Mark sale invoice as uncollectible",
        "description": "",
        "tags": [
          "Sale invoices"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "obj_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        }
      ]
    },
    "/v30/sale-invoices/{obj_id}/mark-collectible": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Schema"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "204": {
            "description": "No content"
          }
        },
        "summary": "Mark sale invoice as collectible",
        "description": "",
        "tags": [
          "Sale invoices"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "obj_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        }
      ]
    },
    "/v30/sale-invoices/{obj_id}/download": {
      "get": {
        "parameters": [],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "200": {
            "description": "OK"
          }
        },
        "summary": "Download a sale invoice as PDF file",
        "description": "",
        "tags": [
          "Sale invoices"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "obj_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        }
      ]
    },
    "/v30/sale-invoices/{obj_id}/items": {
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1
            },
            "required": false
          },
          {
            "in": "query",
            "name": "page_size",
            "schema": {
              "type": "integer",
              "default": 25,
              "minimum": 1,
              "maximum": 100
            },
            "required": false
          },
          {
            "in": "query",
            "name": "order",
            "schema": {
              "type": "string",
              "default": null,
              "nullable": true
            },
            "required": false
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/sale invoice itemPagination"
                }
              }
            }
          }
        },
        "summary": "List sale invoice items",
        "description": "",
        "x-codeSamples": [
          {
            "lang": "Python",
            "source": "\nimport requests\n\nheaders = {'Authorization': 'Bearer {api_access_key}'}\nparams = {}\nurl = 'https://api.congressus.nl/v30/sale-invoices/{obj_id}/items'\n\nresp = requests.get(url, params=params, headers=headers)\nresp.raise_for_status()\n\nresult = resp.json()\ndata = result['data']\n"
          },
          {
            "lang": "PHP",
            "source": "\n$client = new GuzzleHttp\\Client();\n\n$url = 'https://api.congressus.nl/v30/sale-invoices/{obj_id}/items';\n$options = [\n    'headers' => ['Authorization' => 'Bearer {api_access_key}']\n];\n\n$res = $client->request('GET', $url, $options);\necho $res->getStatusCode();\n// \"200\"\n\necho $res->getHeader('content-type')[0];\n// 'application/json; charset=utf8'\n\necho $res->getBody();\n// {\"data\": []...}\n"
          }
        ],
        "tags": [
          "Sale invoices"
        ]
      },
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SaleInvoiceItem"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SaleInvoiceItem"
                }
              }
            }
          }
        },
        "summary": "Create sale invoice item",
        "description": "",
        "tags": [
          "Sale invoices"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "obj_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        }
      ]
    },
    "/v30/sale-invoices/workflows": {
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1
            },
            "required": false
          },
          {
            "in": "query",
            "name": "page_size",
            "schema": {
              "type": "integer",
              "default": 25,
              "minimum": 1,
              "maximum": 100
            },
            "required": false
          },
          {
            "in": "query",
            "name": "order",
            "schema": {
              "type": "string",
              "default": "name"
            },
            "required": false
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/sale invoice workflowPagination"
                }
              }
            }
          }
        },
        "summary": "List sale invoice workflows",
        "description": "",
        "x-codeSamples": [
          {
            "lang": "Python",
            "source": "\nimport requests\n\nheaders = {'Authorization': 'Bearer {api_access_key}'}\nparams = {}\nurl = 'https://api.congressus.nl/v30/sale-invoices/workflows'\n\nresp = requests.get(url, params=params, headers=headers)\nresp.raise_for_status()\n\nresult = resp.json()\ndata = result['data']\n"
          },
          {
            "lang": "PHP",
            "source": "\n$client = new GuzzleHttp\\Client();\n\n$url = 'https://api.congressus.nl/v30/sale-invoices/workflows';\n$options = [\n    'headers' => ['Authorization' => 'Bearer {api_access_key}']\n];\n\n$res = $client->request('GET', $url, $options);\necho $res->getStatusCode();\n// \"200\"\n\necho $res->getHeader('content-type')[0];\n// 'application/json; charset=utf8'\n\necho $res->getBody();\n// {\"data\": []...}\n"
          }
        ],
        "tags": [
          "Sale invoices"
        ]
      }
    },
    "/v30/storage": {
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1
            },
            "required": false
          },
          {
            "in": "query",
            "name": "page_size",
            "schema": {
              "type": "integer",
              "default": 25,
              "minimum": 1,
              "maximum": 100
            },
            "required": false
          },
          {
            "in": "query",
            "name": "order",
            "schema": {
              "type": "string",
              "default": null,
              "nullable": true
            },
            "required": false
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StorageObjectPagination"
                }
              }
            }
          }
        },
        "summary": "List StorageObjects",
        "description": "",
        "x-codeSamples": [
          {
            "lang": "Python",
            "source": "\nimport requests\n\nheaders = {'Authorization': 'Bearer {api_access_key}'}\nparams = {}\nurl = 'https://api.congressus.nl/v30'\n\nresp = requests.get(url, params=params, headers=headers)\nresp.raise_for_status()\n\nresult = resp.json()\ndata = result['data']\n"
          },
          {
            "lang": "PHP",
            "source": "\n$client = new GuzzleHttp\\Client();\n\n$url = 'https://api.congressus.nl/v30';\n$options = [\n    'headers' => ['Authorization' => 'Bearer {api_access_key}']\n];\n\n$res = $client->request('GET', $url, $options);\necho $res->getStatusCode();\n// \"200\"\n\necho $res->getHeader('content-type')[0];\n// 'application/json; charset=utf8'\n\necho $res->getBody();\n// {\"data\": []...}\n"
          }
        ],
        "tags": [
          "Storage"
        ]
      },
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StorageObject"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StorageObject"
                }
              }
            }
          }
        },
        "summary": "Create StorageObject",
        "description": "",
        "tags": [
          "Storage"
        ]
      }
    },
    "/v30/storage/{obj_id}": {
      "get": {
        "parameters": [],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StorageObject"
                }
              }
            }
          }
        },
        "summary": "Retrieve StorageObject",
        "description": "",
        "tags": [
          "Storage"
        ]
      },
      "put": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StorageObject"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "202": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StorageObject"
                }
              }
            }
          }
        },
        "summary": "Update StorageObject",
        "description": "",
        "tags": [
          "Storage"
        ]
      },
      "delete": {
        "parameters": [],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "204": {
            "description": "No content"
          }
        },
        "summary": "Delete StorageObject",
        "description": "",
        "tags": [
          "Storage"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "obj_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        }
      ]
    },
    "/v30/storage/{obj_id}/file-content": {
      "put": {
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_ENTITY"
          },
          "201": {
            "description": "Created"
          }
        },
        "requestBody": {
          "description": "The file to upload",
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/FileUpload"
              }
            }
          }
        },
        "summary": "Upload a file to an existing storage object",
        "tags": [
          "Storage"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "obj_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        }
      ]
    },
    "/v30/webhooks": {
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1
            },
            "required": false
          },
          {
            "in": "query",
            "name": "page_size",
            "schema": {
              "type": "integer",
              "default": 25,
              "minimum": 1,
              "maximum": 100
            },
            "required": false
          },
          {
            "in": "query",
            "name": "order",
            "schema": {
              "type": "string",
              "default": null,
              "nullable": true
            },
            "required": false
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookPagination"
                }
              }
            }
          }
        },
        "summary": "List Webhooks",
        "description": "",
        "x-codeSamples": [
          {
            "lang": "Python",
            "source": "\nimport requests\n\nheaders = {'Authorization': 'Bearer {api_access_key}'}\nparams = {}\nurl = 'https://api.congressus.nl/v30/webhooks'\n\nresp = requests.get(url, params=params, headers=headers)\nresp.raise_for_status()\n\nresult = resp.json()\ndata = result['data']\n"
          },
          {
            "lang": "PHP",
            "source": "\n$client = new GuzzleHttp\\Client();\n\n$url = 'https://api.congressus.nl/v30/webhooks';\n$options = [\n    'headers' => ['Authorization' => 'Bearer {api_access_key}']\n];\n\n$res = $client->request('GET', $url, $options);\necho $res->getStatusCode();\n// \"200\"\n\necho $res->getHeader('content-type')[0];\n// 'application/json; charset=utf8'\n\necho $res->getBody();\n// {\"data\": []...}\n"
          }
        ],
        "tags": [
          "Webhooks"
        ]
      },
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Webhook"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Webhook"
                }
              }
            }
          }
        },
        "summary": "Create Webhook",
        "description": "",
        "tags": [
          "Webhooks"
        ]
      }
    },
    "/v30/webhooks/{obj_id}": {
      "get": {
        "parameters": [],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Webhook"
                }
              }
            }
          }
        },
        "summary": "Retrieve Webhook",
        "description": "",
        "tags": [
          "Webhooks"
        ]
      },
      "put": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Webhook"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "202": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Webhook"
                }
              }
            }
          }
        },
        "summary": "Update Webhook",
        "description": "",
        "tags": [
          "Webhooks"
        ]
      },
      "delete": {
        "parameters": [],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "204": {
            "description": "No content"
          }
        },
        "summary": "Delete Webhook",
        "description": "",
        "tags": [
          "Webhooks"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "obj_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        }
      ]
    },
    "/v30/webhooks/{obj_id}/calls": {
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "period_filter",
            "description": "Filter period on `requested_at`",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "status_code",
            "description": "Filter by Status code",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "200",
                  "404",
                  "500"
                ]
              }
            },
            "required": false,
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1
            },
            "required": false
          },
          {
            "in": "query",
            "name": "page_size",
            "schema": {
              "type": "integer",
              "default": 25,
              "minimum": 1,
              "maximum": 100
            },
            "required": false
          },
          {
            "in": "query",
            "name": "order",
            "schema": {
              "type": "string",
              "default": null,
              "nullable": true
            },
            "required": false
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookCallPagination"
                }
              }
            }
          }
        },
        "summary": "List Webhook calls",
        "description": "",
        "x-codeSamples": [
          {
            "lang": "Python",
            "source": "\nimport requests\n\nheaders = {'Authorization': 'Bearer {api_access_key}'}\nparams = {}\nurl = 'https://api.congressus.nl/v30/webhooks/<int:obj_id>/calls'\n\nresp = requests.get(url, params=params, headers=headers)\nresp.raise_for_status()\n\nresult = resp.json()\ndata = result['data']\n"
          },
          {
            "lang": "PHP",
            "source": "\n$client = new GuzzleHttp\\Client();\n\n$url = 'https://api.congressus.nl/v30/webhooks/<int:obj_id>/calls';\n$options = [\n    'headers' => ['Authorization' => 'Bearer {api_access_key}']\n];\n\n$res = $client->request('GET', $url, $options);\necho $res->getStatusCode();\n// \"200\"\n\necho $res->getHeader('content-type')[0];\n// 'application/json; charset=utf8'\n\necho $res->getBody();\n// {\"data\": []...}\n"
          }
        ],
        "tags": [
          "Webhooks"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "obj_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        }
      ]
    },
    "/v30/webpages": {
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "published",
            "description": "Filter on `published`",
            "schema": {
              "type": "string",
              "enum": [
                "0",
                "1"
              ]
            },
            "required": false
          },
          {
            "in": "query",
            "name": "website_id",
            "description": "Filter by Website",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "required": false,
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "template_id",
            "description": "Filter by Template",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "required": false,
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1
            },
            "required": false
          },
          {
            "in": "query",
            "name": "page_size",
            "schema": {
              "type": "integer",
              "default": 25,
              "minimum": 1,
              "maximum": 100
            },
            "required": false
          },
          {
            "in": "query",
            "name": "order",
            "schema": {
              "type": "string",
              "default": "order"
            },
            "required": false
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebpagePagination"
                }
              }
            }
          }
        },
        "summary": "List Webpages",
        "description": "",
        "x-codeSamples": [
          {
            "lang": "Python",
            "source": "\nimport requests\n\nheaders = {'Authorization': 'Bearer {api_access_key}'}\nparams = {}\nurl = 'https://api.congressus.nl/v30/webpages'\n\nresp = requests.get(url, params=params, headers=headers)\nresp.raise_for_status()\n\nresult = resp.json()\ndata = result['data']\n"
          },
          {
            "lang": "PHP",
            "source": "\n$client = new GuzzleHttp\\Client();\n\n$url = 'https://api.congressus.nl/v30/webpages';\n$options = [\n    'headers' => ['Authorization' => 'Bearer {api_access_key}']\n];\n\n$res = $client->request('GET', $url, $options);\necho $res->getStatusCode();\n// \"200\"\n\necho $res->getHeader('content-type')[0];\n// 'application/json; charset=utf8'\n\necho $res->getBody();\n// {\"data\": []...}\n"
          }
        ],
        "tags": [
          "Webpages"
        ]
      }
    },
    "/v30/webpages/{obj_id}": {
      "get": {
        "parameters": [],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebpageWithContent"
                }
              }
            }
          }
        },
        "summary": "Retrieve Webpage",
        "description": "",
        "tags": [
          "Webpages"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "obj_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        }
      ]
    },
    "/v30/websites": {
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "published",
            "description": "Filter on `published`",
            "schema": {
              "type": "string",
              "enum": [
                "0",
                "1"
              ]
            },
            "required": false
          },
          {
            "in": "query",
            "name": "template_id",
            "description": "Filter by Website template",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "required": false,
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1
            },
            "required": false
          },
          {
            "in": "query",
            "name": "page_size",
            "schema": {
              "type": "integer",
              "default": 25,
              "minimum": 1,
              "maximum": 100
            },
            "required": false
          },
          {
            "in": "query",
            "name": "order",
            "schema": {
              "type": "string",
              "default": null,
              "nullable": true
            },
            "required": false
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebsitePagination"
                }
              }
            }
          }
        },
        "summary": "List Websites",
        "description": "",
        "x-codeSamples": [
          {
            "lang": "Python",
            "source": "\nimport requests\n\nheaders = {'Authorization': 'Bearer {api_access_key}'}\nparams = {}\nurl = 'https://api.congressus.nl/v30/websites'\n\nresp = requests.get(url, params=params, headers=headers)\nresp.raise_for_status()\n\nresult = resp.json()\ndata = result['data']\n"
          },
          {
            "lang": "PHP",
            "source": "\n$client = new GuzzleHttp\\Client();\n\n$url = 'https://api.congressus.nl/v30/websites';\n$options = [\n    'headers' => ['Authorization' => 'Bearer {api_access_key}']\n];\n\n$res = $client->request('GET', $url, $options);\necho $res->getStatusCode();\n// \"200\"\n\necho $res->getHeader('content-type')[0];\n// 'application/json; charset=utf8'\n\necho $res->getBody();\n// {\"data\": []...}\n"
          }
        ],
        "tags": [
          "Websites"
        ]
      }
    },
    "/v30/websites/{obj_id}": {
      "get": {
        "parameters": [],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Website"
                }
              }
            }
          }
        },
        "summary": "Retrieve Website",
        "description": "",
        "tags": [
          "Websites"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "obj_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        }
      ]
    },
    "/v30/websites/{obj_id}/webpages": {
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "published",
            "description": "Filter on `published`",
            "schema": {
              "type": "string",
              "enum": [
                "0",
                "1"
              ]
            },
            "required": false
          },
          {
            "in": "query",
            "name": "website_id",
            "description": "Filter by Website",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "required": false,
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "template_id",
            "description": "Filter by Template",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "required": false,
            "explode": true,
            "style": "form"
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1
            },
            "required": false
          },
          {
            "in": "query",
            "name": "page_size",
            "schema": {
              "type": "integer",
              "default": 25,
              "minimum": 1,
              "maximum": 100
            },
            "required": false
          },
          {
            "in": "query",
            "name": "order",
            "schema": {
              "type": "string",
              "default": "order"
            },
            "required": false
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebpagePagination"
                }
              }
            }
          }
        },
        "summary": "List Webpages",
        "description": "Retrieve the complete tree of Webpages on this Website.",
        "x-codeSamples": [
          {
            "lang": "Python",
            "source": "\nimport requests\n\nheaders = {'Authorization': 'Bearer {api_access_key}'}\nparams = {}\nurl = 'https://api.congressus.nl/v30/websites/{obj_id}/webpages'\n\nresp = requests.get(url, params=params, headers=headers)\nresp.raise_for_status()\n\nresult = resp.json()\ndata = result['data']\n"
          },
          {
            "lang": "PHP",
            "source": "\n$client = new GuzzleHttp\\Client();\n\n$url = 'https://api.congressus.nl/v30/websites/{obj_id}/webpages';\n$options = [\n    'headers' => ['Authorization' => 'Bearer {api_access_key}']\n];\n\n$res = $client->request('GET', $url, $options);\necho $res->getStatusCode();\n// \"200\"\n\necho $res->getHeader('content-type')[0];\n// 'application/json; charset=utf8'\n\necho $res->getBody();\n// {\"data\": []...}\n"
          }
        ],
        "tags": [
          "Websites"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "obj_id",
          "required": true,
          "schema": {
            "type": "integer",
            "minimum": 0
          }
        }
      ]
    }
  },
  "tags": [
    {
      "name": "Background processes",
      "description": "\nBackground processes are used for async tasks, e.g. sending mailings and creating downloadable exports of information from Congressus.\n"
    },
    {
      "name": "Bank mutations",
      "description": "\nBankMutation objects represent mutations in the bank account of an association\n\n## Data model\n- **BankMutation** - Main object, representing a mutation\n- **BankStatement** - Statement on which one or more mutations are collected\n- **BankImport** - Import of one or more bank statements in one or more CAMT.053-files\n"
    },
    {
      "name": "Blogs",
      "description": "\nBlogs are used for a the publication of articles on the website(s) of an association.\n\n## Data model\n- **Blog** - Base model for blogs, which functions as a container for BlogParagraph objects.\n- **BlogParagraph** - Content of a Blog. A blog consists of one or more BlogParagraphs.\n  - BlogTextParagraph\n  - BlogImageParagraph\n- **BlogCategory** - Defines category and basic publication settings for the associated blogs. Each blog has exactly \none category.\n- **BlogIssue** - Defines an issue to which a Blog is linked. Optional.\n- **BlogAuthor** - Defines the author of a Blog. Optional.\n\n> Keep published set to False as long you do not want to share your blog with the outside world. \nAfter the creation of the Blog object you can start filling the blog with either text (BlogTextParagraph) or \nimages (BlogImageParagraph).\n\n> The content of an blog (list of BlogParagraphs) is returned withing the get blogs/<obj_id> endpoint. \nThe /blogs list view does not contain them.\n\n## Uploading images\nImages are saved in the form of a StorageObject. Create a StorageObject first before you create a BlogImageParagraph.\n"
    },
    {
      "name": "Career partners",
      "description": "\nCareer partners are used as a special kind of organisation. They are used to display a list of partners, e.g. on the\nwebsite. Career partners are grouped into categories. Each partner has exactly one category.\n\n## Data model\n- **CareerPartner**.\n- **CareerPartnerCategory** - Defines category and basic publication settings for the associated partners.\n\n"
    },
    {
      "name": "Communication",
      "description": "Communication"
    },
    {
      "name": "Countries",
      "description": "\nCountries are used to define the countries and their specifics that are available within Congressus.\n"
    },
    {
      "name": "EditorJS",
      "description": "\nFile upload endpoints for editor-js.\n"
    },
    {
      "name": "Event categories",
      "description": "\nEvent categories\n"
    },
    {
      "name": "Events",
      "description": "\nEvents are used for a the publication of events on the website(s) of an association. When enabled, both \nmembers and/or external persons can sign up for an event.\n\nSign up has multiple modes; `registration` for single ticket registrations for an event and `ticketing` for more\ncomplex sign up with the option to select one or more tickets per participation.\n\nBilling and payment is defined by the sign up settings too.\n- When `participation_billing_enabled`, the `participation_billing_type` defines if an invoice is send direct or later.\n- The `participation_payment_<xx>` options define the available payment methods when participation_billing_enabled and \nparticipation_billing_type is set to direct.\n\n## Data model\n- **Event** - Base model for events\n- **EventCategory** - Defines category and basic publication settings for the associated events. Each event has exactly \none category.\n- **EventTicketType** - Ticket type available for an event\n- **EventParticipation** - Participation with one or more sold tickets\n- **EventParticipationTicket** - Ticket sold for an event to a member or non-member\n\n"
    },
    {
      "name": "External invoices",
      "description": ""
    },
    {
      "name": "Galleries",
      "description": "\nPhoto galleries\n"
    },
    {
      "name": "Group folders",
      "description": "\nGroup folders\n"
    },
    {
      "name": "Groups",
      "description": "\nGroups are a collection of Members e.g. a Board, Committee, etc.\n\n## Data model\n- **Group**.\n- **GroupFolder** - Organize Groups in a folder-like structure.\n- **GroupMembership** - Relate members to a group.\n"
    },
    {
      "name": "Logs",
      "description": "\nLogs are used to track user activity within Congressus.\n"
    },
    {
      "name": "Member statuses",
      "description": "\n## Member statuses\n\nWe do provide a list with all member statuses. These statuses have different types:\n- Active member status - contains members that have the ability to log in at the website(s) of the association\n- Archived member status - contains archived members. Complete profiles are available within Congressus Manager, but archived members are not able te log in at any website.\n\nSpecial cases:\n- Hidden member status - former member statuses, not currently in use in the administration. These are hidden from many places, but history is preserved.\n- Deceased member status - contains archived members who have passed away. This feature is only available for our Enterprise plan. \n\n"
    },
    {
      "name": "Members",
      "description": "\n\n## Data model\n- **Member** - Main object, representing the member\n- **MembershipStatus** - Represents the status of a Member at a given period defined by `member_from` and optional\n`member_to` dates.\n\n\n## Membership statuses\nCongressus tracks the MemberStatus of a member over time. Each member has exactly one MemberStatus at each given\nmoment in time. The current MemberStatus is derived from the MembershipStatus model, which has a `member_from` and an\noptional `member_to` date.\n\nAll operations on the status of the membership are done through the `/member/<obj_id>/statuses` resources. These\nresources make sure that MembershipStatuses do not overlap. **~~These resources are currently not implemented.~~\nThese resources are available as of June 28th, 2022.**\n\n### Member statuses\nWe do provide a list with all Member statuses. These statuses have different types:\n- Active member status - contains members that have the ability to log in at the website(s) of the association\n- Archived member status - contains archived members. Complete profiles are available within Congressus Manager, but archived members are not able te log in at any website.\n\nSpecial cases:\n- Hidden member status - former member statuses, not currently in use in the administration. These are hidden from many places, but history is preserved.\n- Deceased member status - contains archived members who have passed away. This feature is only available for our Enterprise plan.\n\n\n## Name of a member\nThe name of a person is quite an extensive part within the Member-object. Congressus registers a list with\nname-attributes. Depending on the choices of the assocation, not all attributes are used. Based on the attributes, we\nalso render a list of derived name properties.\n\nAttributes of a name - can be set using the API:\n- `initials` - Initials of the member\n- `given_name` - Given name of the member\n- `first_name` - Full list of first names\n- `primary_last_name_main` - Main part of the last name\n- `primary_last_name_prefix` - Additional part of the last name (e.g. 'van der', 'von', etc.)\n- `secondary_last_name_main`- Main part of an additional last name (e.g. maiden name)\n- `secondary_last_name_prefix` - Additional part of the secondary last name (e.g. 'van der', 'von', etc.)\n- `last_name_display` - Sets which last names are used in day-to-day communication by the member.\n- `prefix` - e.g. 'Prof. dr.'\n- `suffix` - e.g. 'MSc.'\n\nProperties - based on name attributes:\n- `last_name` - combination of all *_last_name_* fields, rendered according to the 'last_name_display' attribute\n- `primary_last_name` - combination of all primary_last_name_* fields\n- `secondary_last_name` - combination of all secondary_last_name_* fields\n\n## Context for validation\n\nValidation could be extended with a context. This context defines which fields are available, editable and required for\na certain member. This context is set per MemberStatus from within Congressus Manager (settings > member statuses).\n\nAdding the context-parameter to a request ensures that only the fields within that context could be read and updated.\nThere are six different contexts available:\n1. `sign_up` - context for the online sign-up on the website of the association\n2. `profile_activate` - context for activating the personal account on the website of the association\n3. `profile_edit` - context for editing the personal profile via the website of the association\n4. `almanac` - context for showing data in the member list / almanac on the website. This context has no editable fields.\n5. `manager_add` - context used when adding new members via Congressus Manager\n5. `manager_edit` - context used when editing members via Congressus Manager\n\n\n## Custom fields\nWithin Congressus, custom fields could be added to the member profiles. These custom fields are added as a list\nattribute of the Member-object.\n\nCustom field properties are available in the `/members/custom-fields` resource. This includes available choices/options\nthat could be used to render a dropdown list or radio buttons when appropriate.\n\nCustom fields could handle a large amount of different data types, which makes validation tricky. Invalid values are\nreturned as a 400 Bad Request response, including the field name and a message.\n\nCustom field types currently supported:\n\n- `text_long` - String, single line with a max length of 255 characters\n  - `email` - String, valid email addresses only\n  - `url` - String, valid URL's only\n- `text_multi` - Multi line text field\n\n- `datetime` - Date and time. In UTC.\n- `date` - Date only\n\n- `number` - Integer value\n- `decimal` - Decimal value\n  - `euro` - Decimal value, rendered with two decimal places\n\n- `checkbox` - Boolean value, rendered as a checkbox, null is interpreted as False\n- `yes_no` - Boolean value, rendered as a yes / no field, null is interpreted as No\n\n- `option` - Dropdown list, only one option could be selected\n  - `option_radio` - Same as option, but presented in the web interface as radio fields\n\n- `option_multiple` - Dropdown list in which multiple options could be selected\n  - `option_multiple_checkbox` - Same as option_multiple, but presented in the web interface as checkboxes\n\n- `address` - Address with separate fields for address, zip, city and country.\n- `phonenumber` - Phone number with separate fields for number and country (calling code).\n\n- `education_study_duo` - Option field with an opinionated list of studies in The Netherlands.\n\n- `storage_object` - Relation with a storage object, see the Storage objects documentation for more information.\n\n"
    },
    {
      "name": "News",
      "description": "\nNews\n"
    },
    {
      "name": "Notifications",
      "description": "\nNotifications \n\n"
    },
    {
      "name": "Organisations",
      "description": "\nOrganisations are used as a special kind of group. Organisations have a profile which can be published on the website. \nMembers can be related to the Organisation, for example as employees or owners of the Organisation.\n\n## Data model\n- **Organisation**.\n- **OrganisationCategory** - Defines category and basic publication settings for the associated organisations. Each \norganisation has exactly one category.\n\n"
    },
    {
      "name": "Pricing",
      "description": "\nPricing information for our marketing website.\n"
    },
    {
      "name": "Product folders",
      "description": "\nProduct folders\n"
    },
    {
      "name": "Products",
      "description": "\nProducts are used for invoices. Congressus creates products automatically for event tickets, planning and rental.\n"
    },
    {
      "name": "Sale invoices",
      "description": "\nSaleInvoice objects represent a sale invoice\n\n## Data model\n- **SaleInvoice** - Main object, representing a sale invoice\n- **SaleInvoiceItem** - Row on a sale invoice with information about the invoiced Product (goods, products or services)\n- **SaleInvoicePayment** - Payment related to a sale invoice\n\n## Sale invoice workflows\nAll communication, default delivery methods, payment conditions and due intervals for a sale invoice are defined by the \nsale invoice workflow attached to the sale invoice.\n\n## Invoice status\nThe invoice status is managed and could not be set manually. The invoice_status attribute has one of the following \nstatuses:\n- `concept` - The sale invoice is created but not yet sent\n- `open` - The sale invoice is sent to the debtor, not yet paid and not due\n- `late` - According to the workflow, this sale invoice is due\n- `reminded` - A reminder is send to the debtor after the sale invoice was late\n- `paid` - The sale invoice is fully paid\n- `pending_payment` - Status used when the invoice is in a direct debit batch (to be collected) or active \niDeal-transaction\n- `uncollectible` - Status used when the debtor is not expected to be able to pay the invoice at any moment\n\n\n## Invoice actions\nThe invoice status changes when certain actions are triggered. Some actions are automatic or triggered by other actions,\nsuch as marking sale invoices late (due) and when a payment is initiated (pending).\n\nOther actions are triggered manually, and these actions are also available in the API:\n- send\n- remind\n- mark-uncollectible\n- mark-collectible\n\nOur API always inherits the status flow, shown in the flowchart below:\n![SaleInvoice status flow with actions](https://congressus-static.s3-eu-west-1.amazonaws.com/api-docs/v30/saleinvoice_status_flowchart.png)\n \n"
    },
    {
      "name": "Storage",
      "description": "\nGeneral layer for file storage objects like images and documents\n"
    },
    {
      "name": "Webhooks",
      "description": "\nWebhooks are useful in a broad range of situations. When the state of an object changes, Congressus will perform a \nHTTP request to the URL you provide. Based on the payload of the request, you can determine which action you need to \nperform.\n\nYou can read more about webhooks at Congressus in the special section about Webhooks at the top of our API \ndocumentation.\n"
    },
    {
      "name": "Webpages",
      "description": "\nWebpage objects represent a webpage on a Website\n\n## Data model \n- **Webpage** - Pages linked to a Website. Have a parent/child relationship, so we can build a nice tree of Webpages\n- **ContentRow** - A webpage has one or more rows for with content (see remarks).\n- **ContentItem** - Section with content. Has a `size` which defines if the content has to be shown full width or not.\n\n\n## Content rows\nAt this moment each Webpage has exactly one row with content. We plan to support multiple rows and row types in the \nfuture e.g. CTA rows, rows with different background, etc.\n\nThe only additional information for content rows at this moment is the `order`. This order defaults to 1.\n\n\n## Content items\nA generic type, returning the content for a section of content shown on the webpage. We expect to expand on the \ndifferent content types in future updates of this API. \n\n"
    },
    {
      "name": "Websites",
      "description": "\nWebsite objects represent a website\n\n## Data model\n- **Website** - Website including properties as language and URL \n- **Webpage** - Pages linked to a Website. Have a parent/child relationship, so we can build a nice tree of Webpages\n\n"
    }
  ],
  "openapi": "3.0.2",
  "components": {
    "schemas": {
      "Error": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "Error code"
          },
          "status": {
            "type": "string",
            "description": "Error name"
          },
          "message": {
            "type": "string",
            "description": "Error message"
          },
          "errors": {
            "type": "object",
            "description": "Errors"
          }
        }
      },
      "PaginationMetadata": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer"
          },
          "total_pages": {
            "type": "integer"
          },
          "first_page": {
            "type": "integer"
          },
          "last_page": {
            "type": "integer"
          },
          "page": {
            "type": "integer"
          },
          "previous_page": {
            "type": "integer"
          },
          "next_page": {
            "type": "integer"
          }
        }
      },
      "BackgroundProcess": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "uuid": {
            "type": "string",
            "readOnly": true,
            "nullable": true,
            "maxLength": 32
          },
          "context": {
            "type": "string",
            "readOnly": true,
            "nullable": true,
            "maxLength": 255
          },
          "state": {
            "type": "string",
            "readOnly": true,
            "nullable": true,
            "maxLength": 255
          },
          "result": {
            "readOnly": true,
            "nullable": true
          },
          "humanized_message": {
            "type": "string",
            "readOnly": true
          },
          "humanized_context": {
            "type": "string",
            "readOnly": true
          },
          "task": {
            "type": "string",
            "readOnly": true,
            "nullable": true,
            "maxLength": 255
          },
          "user_id": {
            "readOnly": true
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "nullable": true
          },
          "modified": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "nullable": true
          }
        }
      },
      "Background processPagination": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer"
          },
          "has_prev": {
            "type": "boolean"
          },
          "prev_num": {
            "type": "integer",
            "nullable": true
          },
          "has_next": {
            "type": "boolean"
          },
          "next_num": {
            "type": "integer",
            "nullable": true
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BackgroundProcess"
            }
          }
        }
      },
      "BackgroundProcessResult": {
        "type": "object",
        "properties": {
          "state": {
            "type": "string",
            "readOnly": true
          },
          "result": {
            "type": "object",
            "readOnly": true
          },
          "uuid": {
            "type": "string",
            "readOnly": true
          }
        }
      },
      "BankImport": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "nullable": true
          },
          "status": {
            "type": "string",
            "enum": [
              "completed",
              "not completed"
            ],
            "readOnly": true,
            "description": "Match status for all mutations within this import"
          }
        }
      },
      "BankStatement": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "bank_import": {
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/BankImport"
              }
            ]
          },
          "statement_id": {
            "type": "string",
            "readOnly": true,
            "nullable": true,
            "maxLength": 255
          },
          "iban": {
            "type": "string",
            "readOnly": true,
            "nullable": true,
            "maxLength": 255
          },
          "begin": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "nullable": true
          },
          "end": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "nullable": true
          }
        }
      },
      "SaleInvoicePayment": {
        "type": "object",
        "properties": {
          "id": {
            "readOnly": true
          },
          "sale_invoice_id": {},
          "payment_date_time": {},
          "payment_type": {},
          "payment_amount": {},
          "payment_method": {},
          "payment_status": {
            "readOnly": true
          },
          "created": {
            "readOnly": true
          }
        }
      },
      "BankMutationMatch": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "type": {
            "type": "string",
            "readOnly": true,
            "nullable": true,
            "maxLength": 50
          },
          "payment": {
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/SaleInvoicePayment"
              }
            ]
          },
          "payment_amount": {
            "readOnly": true
          }
        }
      },
      "BankMutation": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "bank_statement": {
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/BankStatement"
              }
            ]
          },
          "matches": {
            "readOnly": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BankMutationMatch"
            }
          },
          "status": {
            "type": "string",
            "enum": [
              "matched",
              "not mathced"
            ],
            "readOnly": true,
            "description": "Match status for this mutation"
          },
          "end_to_end_id": {
            "type": "string",
            "readOnly": true,
            "nullable": true,
            "maxLength": 255
          },
          "mutation_date": {
            "type": "string",
            "format": "date",
            "readOnly": true,
            "nullable": true
          },
          "iban": {
            "type": "string",
            "readOnly": true,
            "nullable": true,
            "maxLength": 255
          },
          "name": {
            "type": "string",
            "readOnly": true,
            "nullable": true,
            "maxLength": 255
          },
          "description": {
            "type": "string",
            "readOnly": true,
            "nullable": true
          },
          "amount": {
            "type": "number",
            "readOnly": true,
            "nullable": true
          },
          "prop_bank_code": {
            "type": "string",
            "readOnly": true,
            "nullable": true,
            "maxLength": 255
          },
          "is_sdd": {
            "type": "boolean",
            "readOnly": true,
            "nullable": true
          },
          "sdd_reason_code": {
            "type": "string",
            "readOnly": true,
            "nullable": true,
            "description": "Reason code for reversed SEPA direct debit payments, only relevant when `is_sdd = true`"
          },
          "sdd_reason_code_description": {
            "type": "string",
            "readOnly": true,
            "nullable": true,
            "description": "Human readable information on the sdd_reason_code, only relevant when `is_sdd = true`"
          }
        }
      },
      "bank mutationPagination": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer"
          },
          "has_prev": {
            "type": "boolean"
          },
          "prev_num": {
            "type": "integer",
            "nullable": true
          },
          "has_next": {
            "type": "boolean"
          },
          "next_num": {
            "type": "integer",
            "nullable": true
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BankMutation"
            }
          }
        }
      },
      "SaleInvoiceBankMutationMatch": {
        "type": "object",
        "properties": {
          "sale_invoice_id": {
            "type": "integer"
          },
          "amount": {
            "type": "number",
            "default": null,
            "nullable": true,
            "description": "Amount to match. When empty, the unpaid amount for the sale invoice is used."
          }
        }
      },
      "StorageObject": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "url": {},
          "url_sm": {},
          "url_md": {},
          "url_lg": {},
          "is_image": {},
          "type": {
            "enum": [
              "members",
              "files",
              "template",
              "groups",
              "user",
              "gallery",
              "contracts"
            ],
            "nullable": true,
            "maxLength": 9
          }
        }
      },
      "BlogAuthor": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "description": {},
          "image": {
            "$ref": "#/components/schemas/StorageObject"
          }
        },
        "required": [
          "name"
        ]
      },
      "BlogAuthorPagination": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer"
          },
          "has_prev": {
            "type": "boolean"
          },
          "prev_num": {
            "type": "integer",
            "nullable": true
          },
          "has_next": {
            "type": "boolean"
          },
          "next_num": {
            "type": "integer",
            "nullable": true
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BlogAuthor"
            }
          }
        }
      },
      "Blog": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "title": {
            "type": "string",
            "maxLength": 255
          },
          "category_id": {
            "type": "integer"
          },
          "author_id": {
            "type": "integer",
            "nullable": true
          },
          "issue_id": {
            "type": "integer",
            "nullable": true
          },
          "published": {
            "type": "boolean",
            "description": "True when this blog is published on the website"
          },
          "published_from": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "visibility": {
            "type": "string",
            "enum": [
              "public",
              "protected",
              "private"
            ],
            "description": "Visibility level set for this blog"
          },
          "authentication_required": {
            "type": "boolean",
            "readOnly": true,
            "description": "True when only authenticated users are allowed to view this blog"
          },
          "memo": {
            "type": "string",
            "description": "Internal notes for this blog"
          }
        },
        "required": [
          "category_id",
          "title"
        ]
      },
      "BlogPagination": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer"
          },
          "has_prev": {
            "type": "boolean"
          },
          "prev_num": {
            "type": "integer",
            "nullable": true
          },
          "has_next": {
            "type": "boolean"
          },
          "next_num": {
            "type": "integer",
            "nullable": true
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Blog"
            }
          }
        }
      },
      "BlogTextParagraph": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "template": {
            "type": "string",
            "enum": [
              "introduction",
              "normal",
              "quote"
            ]
          },
          "content": {
            "type": "string"
          },
          "order": {
            "type": "integer",
            "nullable": true
          },
          "type": {
            "type": "string",
            "readOnly": true,
            "nullable": true,
            "maxLength": 63
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "nullable": true
          },
          "modified": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "nullable": true
          }
        },
        "required": [
          "content"
        ]
      },
      "BlogImageParagraph": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "template": {
            "type": "string",
            "enum": [
              "full",
              "full-complete",
              "inline"
            ]
          },
          "caption": {
            "type": "string",
            "nullable": true,
            "maxLength": 255
          },
          "order": {
            "type": "integer",
            "nullable": true
          },
          "type": {
            "type": "string",
            "readOnly": true,
            "nullable": true,
            "maxLength": 63
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "nullable": true
          },
          "modified": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "nullable": true
          },
          "image": {
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/StorageObject"
              }
            ]
          },
          "image_id": {
            "type": "integer",
            "writeOnly": true
          }
        }
      },
      "BlogParagraph": {
        "type": "object",
        "properties": {},
        "oneOf": [
          {
            "$ref": "#/components/schemas/BlogTextParagraph"
          },
          {
            "$ref": "#/components/schemas/BlogImageParagraph"
          }
        ],
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "BlogTextParagraph": "#/components/schemas/BlogTextParagraph",
            "BlogImageParagraph": "#/components/schemas/BlogImageParagraph"
          }
        }
      },
      "BlogWithParagraph": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "title": {
            "type": "string",
            "maxLength": 255
          },
          "category_id": {
            "type": "integer"
          },
          "author_id": {
            "type": "integer",
            "nullable": true
          },
          "issue_id": {
            "type": "integer",
            "nullable": true
          },
          "published": {
            "type": "boolean",
            "description": "True when this blog is published on the website"
          },
          "published_from": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "visibility": {
            "type": "string",
            "enum": [
              "public",
              "protected",
              "private"
            ],
            "description": "Visibility level set for this blog"
          },
          "authentication_required": {
            "type": "boolean",
            "readOnly": true,
            "description": "True when only authenticated users are allowed to view this blog"
          },
          "memo": {
            "type": "string",
            "description": "Internal notes for this blog"
          },
          "paragraphs": {
            "readOnly": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BlogParagraph"
            }
          }
        },
        "required": [
          "category_id",
          "title"
        ]
      },
      "BaseWebsite": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "readOnly": true,
            "maxLength": 255
          },
          "url": {
            "type": "string",
            "format": "url",
            "readOnly": true
          }
        },
        "required": [
          "name"
        ]
      },
      "BlogCategory": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "color": {
            "type": "string",
            "nullable": true,
            "maxLength": 16
          },
          "slug": {
            "type": "string",
            "readOnly": true,
            "nullable": true,
            "maxLength": 255
          },
          "published": {
            "type": "boolean",
            "nullable": true
          },
          "visibility": {
            "enum": [
              "public",
              "protected",
              "private"
            ],
            "nullable": true,
            "maxLength": 9
          },
          "websites": {
            "readOnly": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BaseWebsite"
            }
          }
        },
        "required": [
          "name"
        ]
      },
      "Blog categoryPagination": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer"
          },
          "has_prev": {
            "type": "boolean"
          },
          "prev_num": {
            "type": "integer",
            "nullable": true
          },
          "has_next": {
            "type": "boolean"
          },
          "next_num": {
            "type": "integer",
            "nullable": true
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BlogCategory"
            }
          }
        }
      },
      "BlogIssue": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "description": {},
          "image": {
            "$ref": "#/components/schemas/StorageObject"
          }
        },
        "required": [
          "name"
        ]
      },
      "BlogIssuePagination": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer"
          },
          "has_prev": {
            "type": "boolean"
          },
          "prev_num": {
            "type": "integer",
            "nullable": true
          },
          "has_next": {
            "type": "boolean"
          },
          "next_num": {
            "type": "integer",
            "nullable": true
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BlogIssue"
            }
          }
        }
      },
      "CareerPartnerCategory": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "color": {
            "type": "string",
            "nullable": true,
            "maxLength": 16
          },
          "slug": {
            "type": "string",
            "readOnly": true,
            "nullable": true,
            "maxLength": 255
          },
          "published": {
            "type": "boolean"
          },
          "visibility": {
            "enum": [
              "public",
              "protected",
              "private"
            ],
            "nullable": true,
            "maxLength": 9
          },
          "websites": {
            "readOnly": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BaseWebsite"
            }
          }
        },
        "required": [
          "name"
        ]
      },
      "Career partner categoryPagination": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer"
          },
          "has_prev": {
            "type": "boolean"
          },
          "prev_num": {
            "type": "integer",
            "nullable": true
          },
          "has_next": {
            "type": "boolean"
          },
          "next_num": {
            "type": "integer",
            "nullable": true
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CareerPartnerCategory"
            }
          }
        }
      },
      "Locale": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string",
            "nullable": true,
            "maxLength": 255
          },
          "code": {
            "type": "string",
            "nullable": true,
            "maxLength": 32
          }
        }
      },
      "Country": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "readOnly": true,
            "maxLength": 255
          },
          "name_local": {
            "type": "string",
            "readOnly": true,
            "maxLength": 255
          },
          "name_locale_nl": {
            "type": "string",
            "readOnly": true,
            "maxLength": 255
          },
          "name_locale_en": {
            "type": "string",
            "readOnly": true,
            "maxLength": 255
          },
          "country_code": {
            "type": "string",
            "readOnly": true,
            "maxLength": 16
          },
          "calling_code": {
            "type": "string",
            "readOnly": true,
            "maxLength": 16
          },
          "default_locale": {
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/Locale"
              }
            ]
          }
        },
        "required": [
          "calling_code",
          "country_code",
          "name",
          "name_local",
          "name_locale_nl"
        ]
      },
      "Address": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string",
            "nullable": true
          },
          "zip": {
            "type": "string",
            "nullable": true,
            "maxLength": 64
          },
          "city": {
            "type": "string",
            "nullable": true,
            "maxLength": 255
          },
          "province": {
            "type": "string",
            "nullable": true,
            "maxLength": 255
          },
          "country": {
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/Country"
              }
            ]
          },
          "country_id": {
            "type": "integer",
            "writeOnly": true
          },
          "lat": {
            "type": "number",
            "readOnly": true,
            "nullable": true
          },
          "lng": {
            "type": "number",
            "readOnly": true,
            "nullable": true
          },
          "location": {
            "type": "string",
            "readOnly": true,
            "nullable": true
          }
        },
        "required": [
          "zip"
        ]
      },
      "ClientEntity": {
        "type": "object",
        "properties": {
          "id": {
            "readOnly": true
          },
          "client_id": {},
          "fullname": {},
          "name": {},
          "address": {
            "$ref": "#/components/schemas/Address"
          },
          "currency": {
            "readOnly": true
          },
          "vat_number": {},
          "coc_number": {}
        }
      },
      "EventCategoryBase": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255,
            "description": "Name of this category"
          },
          "color": {
            "type": "string",
            "description": "Color for this category. A valid hex value is required. Default color is used when left blank."
          },
          "entity": {
            "$ref": "#/components/schemas/ClientEntity"
          }
        },
        "required": [
          "name"
        ]
      },
      "CommentRate": {
        "type": "object",
        "properties": {}
      },
      "EventComment": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "member_id": {
            "type": "integer"
          },
          "type": {
            "type": "string"
          },
          "comment": {
            "type": "string"
          },
          "rating": {
            "type": "integer",
            "readOnly": true
          },
          "rates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommentRate"
            }
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "modified": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "event_id": {
            "type": "integer"
          }
        },
        "required": [
          "comment",
          "member_id"
        ]
      },
      "BaseEvent": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "category_id": {
            "type": "integer",
            "writeOnly": true
          },
          "category": {
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/EventCategoryBase"
              }
            ]
          },
          "status": {
            "type": "string",
            "enum": [
              "on sale",
              "waiting list",
              "sold out",
              "not on sale",
              "no participation"
            ],
            "readOnly": true,
            "description": "Status for participating at this event"
          },
          "slug": {
            "type": "string",
            "readOnly": true,
            "nullable": true,
            "maxLength": 255
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "published": {
            "type": "boolean",
            "description": "True when this event is published on the website"
          },
          "visibility": {
            "type": "string",
            "enum": [
              "public",
              "protected",
              "private"
            ],
            "description": "Visibility level set for this event"
          },
          "authentication_required": {
            "type": "boolean",
            "readOnly": true,
            "description": "True when only authenticated users are allowed to view this event"
          },
          "start": {
            "type": "string",
            "format": "date-time"
          },
          "end": {
            "type": "string",
            "format": "date-time"
          },
          "whole_day": {
            "type": "boolean",
            "nullable": true
          },
          "location": {
            "type": "string",
            "nullable": true,
            "maxLength": 255
          },
          "num_tickets": {
            "type": "integer",
            "nullable": true,
            "description": "Capacity for this event. Null means no capacity limit."
          },
          "num_tickets_sold": {
            "type": "integer",
            "readOnly": true,
            "nullable": true,
            "description": "Number of tickets that are sold for this event"
          },
          "website_url": {
            "type": "string",
            "format": "url",
            "readOnly": true,
            "description": "URL for this event on the website. If the association has multiple websites, the first available website on which this event is published, is used."
          },
          "website_subscribe_url": {
            "type": "string",
            "format": "url",
            "readOnly": true,
            "description": "URL on the website to subscribe for this event. If the association has multiple websites, the first available website on which this event is published, is used."
          },
          "comments_open": {
            "type": "boolean",
            "nullable": true
          },
          "comments": {
            "readOnly": true,
            "nullable": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventComment"
            }
          },
          "media": {
            "readOnly": true,
            "nullable": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StorageObject"
            }
          },
          "memo": {
            "type": "string",
            "description": "Internal notes for this event"
          }
        },
        "required": [
          "category_id",
          "name"
        ]
      },
      "CareerPartner": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "nullable": true,
            "maxLength": 255
          },
          "slug": {
            "type": "string",
            "description": "Slug for this partner, used for navigation on the website"
          },
          "category_id": {
            "type": "integer"
          },
          "category": {
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/CareerPartnerCategory"
              }
            ]
          },
          "address": {
            "$ref": "#/components/schemas/Address"
          },
          "postal_address": {
            "$ref": "#/components/schemas/Address"
          },
          "description": {
            "type": "string",
            "description": "Description for this partner. HTML is allowed."
          },
          "description_short": {
            "type": "string",
            "description": "Brief description for this partner. No HTML allowed."
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "Email address for the partner"
          },
          "url": {
            "type": "string",
            "format": "url"
          },
          "logo": {
            "$ref": "#/components/schemas/StorageObject"
          },
          "memo": {
            "type": "string",
            "description": "Internal notes for this partner"
          },
          "invoice_reference": {
            "type": "string",
            "maxLength": 255,
            "description": "Invoice reference for this organisation"
          },
          "invoice_addressee_attention": {
            "type": "string",
            "maxLength": 255,
            "description": "Invoice addressee attention for this organisation"
          },
          "invoice_address_field": {
            "type": "string",
            "enum": [
              "address",
              "postal_address"
            ],
            "description": "Invoice address field for this organisation"
          },
          "invoice_email": {
            "type": "string",
            "format": "email",
            "maxLength": 255,
            "description": "Invoice email address for this organisation. Leave empty to use the general email address."
          },
          "events": {
            "readOnly": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BaseEvent"
            }
          }
        },
        "required": [
          "category_id",
          "id",
          "invoice_address_field",
          "slug"
        ]
      },
      "Career partnerPagination": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer"
          },
          "has_prev": {
            "type": "boolean"
          },
          "prev_num": {
            "type": "integer",
            "nullable": true
          },
          "has_next": {
            "type": "boolean"
          },
          "next_num": {
            "type": "integer",
            "nullable": true
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CareerPartner"
            }
          }
        }
      },
      "SavedReply": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "category_id": {
            "type": "integer"
          },
          "subject": {
            "type": "string",
            "nullable": true,
            "maxLength": 255
          },
          "message_json": {}
        },
        "required": [
          "category_id",
          "name"
        ]
      },
      "SavedReplyPagination": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer"
          },
          "has_prev": {
            "type": "boolean"
          },
          "prev_num": {
            "type": "integer",
            "nullable": true
          },
          "has_next": {
            "type": "boolean"
          },
          "next_num": {
            "type": "integer",
            "nullable": true
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SavedReply"
            }
          }
        }
      },
      "CountryPagination": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer"
          },
          "has_prev": {
            "type": "boolean"
          },
          "prev_num": {
            "type": "integer",
            "nullable": true
          },
          "has_next": {
            "type": "boolean"
          },
          "next_num": {
            "type": "integer",
            "nullable": true
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Country"
            }
          }
        }
      },
      "BasicFilter": {
        "type": "object",
        "properties": {}
      },
      "EventCategory": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255,
            "description": "Name of this category"
          },
          "color": {
            "type": "string",
            "description": "Color for this category. A valid hex value is required. Default color is used when left blank."
          },
          "entity": {
            "$ref": "#/components/schemas/ClientEntity"
          },
          "published": {
            "type": "boolean",
            "default": true,
            "description": "Set the publication of objects in this category."
          },
          "visibility": {
            "type": "string",
            "enum": [
              "public",
              "protected",
              "private"
            ],
            "description": "Set the visibility of objects in this category."
          },
          "filter": {
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/BasicFilter"
              }
            ]
          },
          "websites": {
            "readOnly": true,
            "nullable": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BaseWebsite"
            }
          }
        },
        "required": [
          "name"
        ]
      },
      "Event categoryPagination": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer"
          },
          "has_prev": {
            "type": "boolean"
          },
          "prev_num": {
            "type": "integer",
            "nullable": true
          },
          "has_next": {
            "type": "boolean"
          },
          "next_num": {
            "type": "integer",
            "nullable": true
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventCategory"
            }
          }
        }
      },
      "VatCategory": {
        "type": "object",
        "properties": {
          "id": {
            "readOnly": true
          },
          "name": {},
          "percentage": {}
        }
      },
      "EventTicketType": {
        "type": "object",
        "properties": {
          "availability_status": {
            "type": "string",
            "enum": [
              "available",
              "limited",
              "waiting list",
              "sold out",
              "available soon",
              "unavailable"
            ],
            "readOnly": true,
            "description": "Status for the availability of this ticket type. Ticket types with status \"available\", \"limited\" and \"waiting list\" are available for new participants."
          },
          "available_from": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "available_to": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "cancel_to": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "confirmation_email_text": {
            "type": "string",
            "nullable": true,
            "description": "Additional text added to the confirmation email for participants. Only added when the corresponding boolean is set to True"
          },
          "confirmation_email_text_enabled": {
            "type": "boolean",
            "description": "True when an additional text has to be added to the confirmation email for participants"
          },
          "description": {
            "type": "string",
            "nullable": true,
            "description": "Optional description for this ticket type"
          },
          "event_id": {
            "type": "integer",
            "readOnly": true,
            "nullable": true
          },
          "filter_id": {
            "type": "integer",
            "nullable": true
          },
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "modified": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "nullable": true
          },
          "name": {
            "type": "string",
            "maxLength": 255,
            "description": "Name for this ticket type"
          },
          "num_tickets": {
            "type": "integer",
            "description": "Max. number of tickets that could be sold for this ticket type"
          },
          "num_tickets_available": {
            "readOnly": true
          },
          "num_tickets_max": {
            "type": "integer",
            "nullable": true
          },
          "num_tickets_max_per": {
            "type": "string",
            "nullable": true,
            "maxLength": 255
          },
          "num_tickets_sold": {
            "type": "integer",
            "readOnly": true,
            "description": "Number of tickets that are sold for this ticket type"
          },
          "price": {
            "type": "number",
            "nullable": true,
            "minimum": 0,
            "description": "Price for this ticket. Set to 0 to show _free_, set to null to hide price."
          },
          "pricing_enabled": {
            "type": "boolean",
            "nullable": true
          },
          "vat_category": {
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/VatCategory"
              }
            ]
          },
          "vat_category_id": {
            "type": "integer",
            "writeOnly": true,
            "nullable": true
          },
          "visibility_level": {
            "type": "string"
          },
          "waiting_list_enabled": {
            "type": "boolean",
            "nullable": true
          },
          "participation_certificate_credits": {
            "type": "number",
            "nullable": true,
            "minimum": 0,
            "description": "Number of credits for the participation certificate. Set to 0 to disable certificate. Set to null to use the default value from the event."
          }
        },
        "required": [
          "name",
          "vat_category_id"
        ]
      },
      "RentalCategory": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255,
            "description": "Name of this category"
          },
          "color": {
            "type": "string",
            "description": "Color for this category. A valid hex value is required. Default color is used when left blank."
          }
        },
        "required": [
          "name"
        ]
      },
      "CareerPartner1": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "nullable": true,
            "maxLength": 255
          },
          "slug": {
            "type": "string",
            "description": "Slug for this partner, used for navigation on the website"
          },
          "category_id": {
            "type": "integer"
          },
          "category": {
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/CareerPartnerCategory"
              }
            ]
          },
          "address": {
            "$ref": "#/components/schemas/Address"
          },
          "postal_address": {
            "$ref": "#/components/schemas/Address"
          },
          "description": {
            "type": "string",
            "description": "Description for this partner. HTML is allowed."
          },
          "description_short": {
            "type": "string",
            "description": "Brief description for this partner. No HTML allowed."
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "Email address for the partner"
          },
          "url": {
            "type": "string",
            "format": "url"
          },
          "logo": {
            "$ref": "#/components/schemas/StorageObject"
          },
          "memo": {
            "type": "string",
            "description": "Internal notes for this partner"
          },
          "invoice_reference": {
            "type": "string",
            "maxLength": 255,
            "description": "Invoice reference for this organisation"
          },
          "invoice_addressee_attention": {
            "type": "string",
            "maxLength": 255,
            "description": "Invoice addressee attention for this organisation"
          },
          "invoice_address_field": {
            "type": "string",
            "enum": [
              "address",
              "postal_address"
            ],
            "description": "Invoice address field for this organisation"
          },
          "invoice_email": {
            "type": "string",
            "format": "email",
            "maxLength": 255,
            "description": "Invoice email address for this organisation. Leave empty to use the general email address."
          }
        },
        "required": [
          "category_id",
          "id",
          "invoice_address_field",
          "slug"
        ]
      },
      "Event": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "category_id": {
            "type": "integer",
            "writeOnly": true
          },
          "category": {
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/EventCategoryBase"
              }
            ]
          },
          "status": {
            "type": "string",
            "enum": [
              "on sale",
              "waiting list",
              "sold out",
              "not on sale",
              "no participation"
            ],
            "readOnly": true,
            "description": "Status for participating at this event"
          },
          "slug": {
            "type": "string",
            "readOnly": true,
            "nullable": true,
            "maxLength": 255
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "published": {
            "type": "boolean",
            "description": "True when this event is published on the website"
          },
          "visibility": {
            "type": "string",
            "enum": [
              "public",
              "protected",
              "private"
            ],
            "description": "Visibility level set for this event"
          },
          "authentication_required": {
            "type": "boolean",
            "readOnly": true,
            "description": "True when only authenticated users are allowed to view this event"
          },
          "start": {
            "type": "string",
            "format": "date-time"
          },
          "end": {
            "type": "string",
            "format": "date-time"
          },
          "whole_day": {
            "type": "boolean",
            "nullable": true
          },
          "location": {
            "type": "string",
            "nullable": true,
            "maxLength": 255
          },
          "show_participants": {
            "type": "boolean",
            "nullable": true
          },
          "show_waiting_list": {
            "type": "boolean",
            "nullable": true
          },
          "show_rented_items": {
            "type": "boolean",
            "nullable": true
          },
          "participation_enabled": {
            "type": "boolean",
            "description": "Enable sign up for this event"
          },
          "participation_mode": {
            "type": "string",
            "enum": [
              "none",
              "single",
              "ticketing"
            ],
            "description": "Participation mode for this event. Use `\"single\"` for registration (one ticket) or `\"ticketing\"` for multiple tickets per participation."
          },
          "participation_billing_enabled": {
            "type": "boolean",
            "description": "Enable billing for this event. When enabled, Congressus will handle invoicing and payments."
          },
          "participation_billing_type": {
            "type": "string",
            "enum": [
              "direct",
              "later"
            ],
            "description": "Define if the participant is billed direct or later. When set to `\"later\"`, it is possible to update prices after the event, before invoices are sent."
          },
          "participation_payment_ideal": {
            "type": "boolean",
            "description": "Enable payment method `iDeal`"
          },
          "participation_payment_direct_debit": {
            "type": "boolean",
            "description": "Enable payment method `direct debit`"
          },
          "participation_payment_on_invoice": {
            "type": "boolean",
            "description": "Enable payment method `on invoice`"
          },
          "participation_information_collection_type": {
            "type": "string",
            "enum": [
              "order",
              "ticket"
            ],
            "description": "Define if name and email is required per participation or per ticket."
          },
          "qr_ticketing_enabled": {
            "type": "boolean",
            "description": "When enabled, Congressus generates tickets with a QR code which could be used to scan tickets at the door of the event. _Please note: additional charges apply for QR tickets_"
          },
          "ticket_types": {
            "readOnly": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventTicketType"
            }
          },
          "num_tickets": {
            "type": "integer",
            "nullable": true,
            "description": "Capacity for this event. Null means no capacity limit."
          },
          "num_tickets_sold": {
            "type": "integer",
            "readOnly": true,
            "nullable": true,
            "description": "Number of tickets that are sold for this event"
          },
          "num_tickets_max_per_order": {
            "type": "integer",
            "minimum": 0,
            "maximum": 20,
            "description": "Max. number of tickets that can be ordered at once. Only relevant for participation_mode=`\"ticketing\"`."
          },
          "participant_remarks_enabled": {
            "type": "boolean",
            "description": "Enables participants to add remarks to their order"
          },
          "participant_remarks_placeholder": {
            "type": "string",
            "minLength": 0,
            "maxLength": 255,
            "description": "Placeholder text for the participant remarks. Could be used for questions etc."
          },
          "rental_enabled": {
            "type": "boolean",
            "description": "Enables rental for participants. Only available when module rental is enabled."
          },
          "rental_categories": {
            "description": "Rental categories from which participants can rent items",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RentalCategory"
            }
          },
          "rental_max_price": {
            "type": "number",
            "nullable": true,
            "description": "Max. rental price per participation. When set to null, no limit is used."
          },
          "career_partners": {
            "readOnly": true,
            "nullable": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CareerPartner1"
            }
          },
          "website_url": {
            "type": "string",
            "format": "url",
            "readOnly": true,
            "description": "URL for this event on the website. If the association has multiple websites, the first available website on which this event is published, is used."
          },
          "website_subscribe_url": {
            "type": "string",
            "format": "url",
            "readOnly": true,
            "description": "URL on the website to subscribe for this event. If the association has multiple websites, the first available website on which this event is published, is used."
          },
          "comments_open": {
            "type": "boolean",
            "nullable": true
          },
          "comments": {
            "readOnly": true,
            "nullable": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventComment"
            }
          },
          "media": {
            "readOnly": true,
            "nullable": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StorageObject"
            }
          },
          "memo": {
            "type": "string",
            "description": "Internal notes for this event"
          }
        },
        "required": [
          "category_id",
          "name"
        ]
      },
      "EventPagination": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer"
          },
          "has_prev": {
            "type": "boolean"
          },
          "prev_num": {
            "type": "integer",
            "nullable": true
          },
          "has_next": {
            "type": "boolean"
          },
          "next_num": {
            "type": "integer",
            "nullable": true
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Event"
            }
          }
        }
      },
      "EventParticipation": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "event_id": {
            "type": "integer"
          },
          "member_id": {
            "type": "integer"
          },
          "sale_invoice_id": {
            "type": "integer",
            "readOnly": true
          },
          "form_entry_id": {
            "type": "integer",
            "readOnly": true
          },
          "rental_reservation_id": {
            "type": "integer"
          },
          "addressee": {
            "type": "string",
            "readOnly": true
          },
          "email": {
            "type": "string",
            "format": "email",
            "readOnly": true
          },
          "num_tickets_sold": {
            "type": "integer",
            "readOnly": true,
            "description": "Number of tickets sold for this participation"
          },
          "uuid": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "status": {
            "type": "string",
            "readOnly": true,
            "description": "Status for this participation. You can update this status with action endpoints."
          },
          "access_key": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "remarks": {
            "type": "string",
            "description": "Remarks added by the participant during order"
          },
          "participation_certificates_credits_override": {
            "type": "number",
            "nullable": true,
            "description": "Number of credits for the participation certificate. Set to 0 to disable certificate. Set to null to use the default value from the event."
          },
          "participation_certificates_date_override": {
            "type": "string",
            "format": "date",
            "nullable": true,
            "description": "Date override for the participation certificate. Set to null to use the default value from the event."
          }
        },
        "required": [
          "event_id"
        ]
      },
      "Event participationPagination": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer"
          },
          "has_prev": {
            "type": "boolean"
          },
          "prev_num": {
            "type": "integer",
            "nullable": true
          },
          "has_next": {
            "type": "boolean"
          },
          "next_num": {
            "type": "integer",
            "nullable": true
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventParticipation"
            }
          }
        }
      },
      "MembershipStatus": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "readOnly": true
          },
          "status_id": {
            "type": "integer"
          },
          "member_from": {
            "type": "string",
            "format": "date"
          },
          "member_to": {
            "type": "string",
            "format": "date",
            "readOnly": true
          },
          "archived": {
            "type": "boolean",
            "readOnly": true,
            "description": "Archived memberships are not able to log in on the website(s)"
          },
          "deceased": {
            "type": "boolean",
            "readOnly": true,
            "description": "Flag for deceased members, only available in our Enterprise plan"
          }
        },
        "required": [
          "status_id"
        ]
      },
      "MemberWithoutRelations": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "username": {
            "type": "string"
          },
          "status": {
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/MembershipStatus"
              }
            ]
          },
          "statuses": {},
          "gender": {
            "enum": [
              "m",
              "f",
              "o",
              ""
            ],
            "nullable": true,
            "maxLength": 1
          },
          "prefix": {
            "type": "string",
            "nullable": true,
            "maxLength": 255
          },
          "initials": {
            "type": "string",
            "nullable": true,
            "maxLength": 255
          },
          "nickname": {
            "type": "string",
            "nullable": true,
            "maxLength": 255
          },
          "given_name": {
            "type": "string",
            "nullable": true,
            "maxLength": 255
          },
          "first_name": {
            "type": "string",
            "nullable": true,
            "maxLength": 255
          },
          "primary_last_name_main": {
            "type": "string",
            "nullable": true,
            "maxLength": 255
          },
          "primary_last_name_prefix": {
            "type": "string",
            "nullable": true,
            "maxLength": 255
          },
          "primary_last_name": {
            "type": "string",
            "readOnly": true
          },
          "secondary_last_name_main": {
            "type": "string",
            "nullable": true,
            "maxLength": 255
          },
          "secondary_last_name_prefix": {
            "type": "string",
            "nullable": true,
            "maxLength": 255
          },
          "secondary_last_name": {
            "type": "string",
            "readOnly": true,
            "nullable": true
          },
          "last_name_display": {
            "type": "string",
            "nullable": true,
            "maxLength": 255
          },
          "last_name": {
            "type": "string",
            "readOnly": true
          },
          "search_name": {
            "type": "string",
            "readOnly": true,
            "nullable": true
          },
          "suffix": {
            "type": "string",
            "nullable": true,
            "maxLength": 255
          },
          "date_of_birth": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true,
            "maxLength": 255
          }
        },
        "required": [
          "id"
        ]
      },
      "EventParticipationTicket": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "nullable": true,
            "maxLength": 255
          },
          "email": {
            "type": "string",
            "nullable": true,
            "maxLength": 255
          },
          "access_key": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "status_presence": {
            "type": "string",
            "enum": [
              "unknown",
              "present",
              "not present"
            ],
            "description": "Status for the presence of this participation."
          },
          "ticket_qrcode": {
            "type": "string",
            "readOnly": true,
            "description": "Base64 encoded QR code"
          }
        }
      },
      "SaleInvoiceItem": {
        "type": "object",
        "properties": {
          "id": {
            "readOnly": true
          },
          "sale_invoice_id": {
            "readOnly": true
          },
          "product_offer_id": {
            "type": "integer",
            "description": "id of the product offer (variant) for this item"
          },
          "name": {
            "type": "string",
            "readOnly": true
          },
          "description": {
            "type": "string",
            "readOnly": true
          },
          "quantity": {
            "type": "integer",
            "description": "quantity of the item, default is 1"
          },
          "price": {
            "type": "number",
            "description": "price for a single item, default is the price of the product offer"
          },
          "sort_order": {},
          "vat_percentage": {
            "readOnly": true
          },
          "vat_category_id": {
            "readOnly": true
          },
          "vat_category": {
            "type": "string",
            "readOnly": true
          },
          "uuid": {
            "readOnly": true
          }
        },
        "required": [
          "product_offer_id"
        ]
      },
      "SaleInvoice": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "uuid": {
            "type": "string",
            "readOnly": true,
            "nullable": true,
            "maxLength": 63
          },
          "entity_id": {
            "type": "integer",
            "description": "ID of the entity to use for this sale invoice."
          },
          "entity": {
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/ClientEntity"
              }
            ]
          },
          "invoice_date": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "invoice_source": {
            "type": "string",
            "readOnly": true,
            "maxLength": 22
          },
          "invoice_type": {
            "type": "string",
            "enum": [
              "event_participation",
              "webshop",
              "contribution",
              "planning",
              null,
              "rental"
            ],
            "readOnly": true
          },
          "delivery_method": {
            "type": "string",
            "readOnly": true,
            "nullable": true,
            "maxLength": 22
          },
          "invoice_send_date_time": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "nullable": true
          },
          "invoice_due_date": {
            "type": "string",
            "format": "date",
            "readOnly": true,
            "nullable": true
          },
          "invoice_reminded_date_time": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "nullable": true
          },
          "invoice_num_reminders_send": {
            "type": "integer",
            "readOnly": true,
            "nullable": true
          },
          "invoice_next_due_date": {
            "type": "string",
            "format": "date",
            "readOnly": true,
            "nullable": true
          },
          "invoice_status": {
            "type": "string",
            "readOnly": true,
            "description": "Status of the sale invoice. Follows the workflow. Cannot be set directly; use actions `send`, `remind` and `pay` instead."
          },
          "invoice_reference": {
            "type": "string",
            "nullable": true,
            "maxLength": 255
          },
          "invoice_number": {
            "type": "string",
            "readOnly": true,
            "nullable": true,
            "maxLength": 63
          },
          "member_id": {
            "type": "integer"
          },
          "collection_id": {
            "type": "integer",
            "description": "ID of the collection (Group / Organisation) to which this sale invoice is addressed. Optional."
          },
          "contribution_start": {
            "type": "string",
            "format": "date",
            "nullable": true,
            "description": "Set a contribution start date when this invoice contains contribution."
          },
          "contribution_end": {
            "type": "string",
            "format": "date",
            "nullable": true,
            "description": "Set a contribution end date when this invoice contains contribution for a given period."
          },
          "use_direct_debit": {
            "type": "boolean",
            "nullable": true,
            "description": "Set to true to use direct debit to collect this sale invoice. Take care: this value is normally set automatically when the associated member has a valid direct debit mandate, the workflow has direct debit enabled and the association has a valid direct debit contract with the bank."
          },
          "invoice_workflow_id": {
            "type": "integer",
            "nullable": true,
            "description": "ID for the sale invoice workflow for this sale invoice. When omitted, the default workflow for the API is used."
          },
          "addressee": {
            "type": "string",
            "description": "Required when collection_id and member_id are omitted."
          },
          "addressee_attention": {
            "type": "string",
            "description": "Attention of the addressee, commonly used when the addressee is a company."
          },
          "email": {
            "type": "string",
            "format": "email"
          },
          "address": {
            "$ref": "#/components/schemas/Address"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SaleInvoiceItem"
            }
          },
          "payments": {
            "readOnly": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SaleInvoicePayment"
            }
          },
          "price_inclusive_vat": {
            "readOnly": true
          },
          "price_exclusive_vat": {
            "readOnly": true
          },
          "vat": {
            "readOnly": true
          },
          "price_paid": {
            "readOnly": true
          },
          "price_unpaid": {
            "readOnly": true
          },
          "currency": {
            "readOnly": true
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "nullable": true
          },
          "modified": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "nullable": true
          }
        },
        "required": [
          "invoice_source",
          "items"
        ]
      },
      "RentalItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "category": {
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/RentalCategory"
              }
            ]
          },
          "category_id": {
            "type": "integer",
            "writeOnly": true
          },
          "name": {},
          "description": {}
        },
        "required": [
          "category_id"
        ]
      },
      "RentalReservation": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "type": {
            "type": "string",
            "nullable": true,
            "maxLength": 50
          },
          "start": {
            "type": "string",
            "format": "date-time"
          },
          "end": {
            "type": "string",
            "format": "date-time"
          },
          "whole_day": {
            "type": "boolean"
          },
          "rental_items": {
            "readOnly": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RentalItem"
            }
          },
          "sale_invoice": {
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/SaleInvoice"
              }
            ]
          },
          "sale_invoice_id": {
            "type": "integer",
            "writeOnly": true
          },
          "access_key": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          }
        },
        "required": [
          "sale_invoice_id"
        ]
      },
      "EventParticipationWithRelations": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "event_id": {
            "type": "integer",
            "readOnly": true
          },
          "member_id": {
            "type": "integer",
            "readOnly": true
          },
          "sale_invoice_id": {
            "type": "integer",
            "readOnly": true
          },
          "form_entry_id": {
            "type": "integer",
            "readOnly": true
          },
          "rental_reservation_id": {
            "type": "integer",
            "readOnly": true
          },
          "addressee": {
            "type": "string",
            "readOnly": true
          },
          "email": {
            "type": "string",
            "format": "email",
            "readOnly": true
          },
          "num_tickets_sold": {
            "type": "integer",
            "readOnly": true,
            "description": "Number of tickets sold for this participation"
          },
          "uuid": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "status": {
            "type": "string",
            "readOnly": true,
            "description": "Status for this participation. You can update this status with action endpoints."
          },
          "access_key": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "remarks": {
            "type": "string",
            "description": "Remarks added by the participant during order"
          },
          "participation_certificates_credits_override": {
            "type": "number",
            "nullable": true,
            "description": "Number of credits for the participation certificate. Set to 0 to disable certificate. Set to null to use the default value from the event."
          },
          "participation_certificates_date_override": {
            "type": "string",
            "format": "date",
            "nullable": true,
            "description": "Date override for the participation certificate. Set to null to use the default value from the event."
          },
          "event": {
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/Event"
              }
            ]
          },
          "member": {
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/MemberWithoutRelations"
              }
            ]
          },
          "tickets": {
            "readOnly": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventParticipationTicket"
            }
          },
          "sale_invoice": {
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/SaleInvoice"
              }
            ]
          },
          "rental_reservation": {
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/RentalReservation"
              }
            ]
          }
        },
        "required": [
          "event_id"
        ]
      },
      "EventParticipationPresence": {
        "type": "object",
        "properties": {
          "status_presence": {
            "type": "string",
            "enum": [
              "unknown",
              "present",
              "not present"
            ],
            "description": "Status for the presence of all tickets in this participation."
          },
          "participation_certificates_credits_override": {
            "type": "number",
            "nullable": true,
            "description": "Number of credits for the participation certificate. Set to 0 to disable certificate. Set to null to use the default value from the event."
          },
          "participation_certificates_date_override": {
            "type": "string",
            "format": "date",
            "nullable": true,
            "description": "Date override for the participation certificate. Set to null to use the default value from the event."
          }
        },
        "required": [
          "status_presence"
        ]
      },
      "EventParticipationConditional": {
        "type": "object",
        "properties": {
          "check_conditions": {
            "type": "boolean",
            "default": true,
            "description": "Check conditions for this transition. When set to False, the transition is always performed."
          }
        }
      },
      "EventParticipationFine": {
        "type": "object",
        "properties": {
          "fine_percentage": {
            "type": "integer",
            "default": 0,
            "description": "Percentage of the ticket price that is charged as a fine. Set to 0 to disable fines."
          }
        }
      },
      "EventParticipationBuilderTicket": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true,
            "maxLength": 255
          },
          "email": {
            "type": "string",
            "format": "email"
          },
          "ticket_type_id": {
            "type": "integer"
          }
        }
      },
      "EventParticipationBuilder": {
        "type": "object",
        "properties": {
          "addressee": {
            "type": "string",
            "nullable": true,
            "maxLength": 255
          },
          "email": {
            "type": "string",
            "format": "email"
          },
          "tickets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventParticipationBuilderTicket"
            }
          },
          "member_id": {
            "type": "integer"
          },
          "remarks": {
            "type": "string",
            "nullable": true
          },
          "invoice_addressee": {
            "type": "string",
            "nullable": true,
            "maxLength": 255
          },
          "invoice_email": {
            "type": "string",
            "nullable": true,
            "maxLength": 255
          },
          "invoice_invoice_reference": {
            "type": "string",
            "nullable": true,
            "maxLength": 255
          },
          "invoice_address": {
            "$ref": "#/components/schemas/Address"
          }
        },
        "required": [
          "tickets"
        ]
      },
      "Ticket typePagination": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer"
          },
          "has_prev": {
            "type": "boolean"
          },
          "prev_num": {
            "type": "integer",
            "nullable": true
          },
          "has_next": {
            "type": "boolean"
          },
          "next_num": {
            "type": "integer",
            "nullable": true
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventTicketType"
            }
          }
        }
      },
      "GalleryAlbum": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "title": {
            "type": "string",
            "readOnly": true
          },
          "description": {
            "type": "string",
            "readOnly": true
          },
          "date": {
            "type": "string",
            "format": "date",
            "readOnly": true
          },
          "sort": {
            "type": "string",
            "readOnly": true
          },
          "order": {
            "type": "integer",
            "readOnly": true
          },
          "breadcrumbs": {
            "type": "string",
            "readOnly": true
          },
          "photo_count": {
            "readOnly": true
          }
        }
      },
      "Gallery albumPagination": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer"
          },
          "has_prev": {
            "type": "boolean"
          },
          "prev_num": {
            "type": "integer",
            "nullable": true
          },
          "has_next": {
            "type": "boolean"
          },
          "next_num": {
            "type": "integer",
            "nullable": true
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GalleryAlbum"
            }
          }
        }
      },
      "GalleryPhoto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "title": {
            "type": "string",
            "readOnly": true
          },
          "description": {
            "type": "string",
            "readOnly": true
          },
          "width": {
            "readOnly": true
          },
          "height": {
            "readOnly": true
          },
          "urls": {
            "readOnly": true
          }
        }
      },
      "Gallery photoPagination": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer"
          },
          "has_prev": {
            "type": "boolean"
          },
          "prev_num": {
            "type": "integer",
            "nullable": true
          },
          "has_next": {
            "type": "boolean"
          },
          "next_num": {
            "type": "integer",
            "nullable": true
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GalleryPhoto"
            }
          }
        }
      },
      "GroupFolderWithChildren": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "parent_id": {
            "type": "integer",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true,
            "maxLength": 255
          },
          "slug": {
            "type": "string",
            "maxLength": 255,
            "description": "Slug for this group folder, used for navigation on the website"
          },
          "path": {
            "type": "string",
            "readOnly": true,
            "description": "Path used on the website for groups in this folder, based on the slugs of this folder and parent folders"
          },
          "published": {
            "type": "boolean",
            "description": "True if this folder is published"
          },
          "order_type": {
            "type": "string",
            "enum": [
              "lastname",
              "date",
              "sorted",
              "function"
            ],
            "description": "Order preference for memberships"
          },
          "children": {
            "readOnly": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GroupFolderWithChildren"
            }
          }
        },
        "required": [
          "name",
          "slug"
        ]
      },
      "GroupFolderListRecursivePagination": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer"
          },
          "has_prev": {
            "type": "boolean"
          },
          "prev_num": {
            "type": "integer",
            "nullable": true
          },
          "has_next": {
            "type": "boolean"
          },
          "next_num": {
            "type": "integer",
            "nullable": true
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GroupFolderWithChildren"
            }
          }
        }
      },
      "GroupFolder": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "parent_id": {
            "type": "integer",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true,
            "maxLength": 255
          },
          "slug": {
            "type": "string",
            "maxLength": 255,
            "description": "Slug for this group folder, used for navigation on the website"
          },
          "path": {
            "type": "string",
            "readOnly": true,
            "description": "Path used on the website for groups in this folder, based on the slugs of this folder and parent folders"
          },
          "published": {
            "type": "boolean",
            "description": "True if this folder is published"
          },
          "order_type": {
            "type": "string",
            "enum": [
              "lastname",
              "date",
              "sorted",
              "function"
            ],
            "description": "Order preference for memberships"
          }
        },
        "required": [
          "name",
          "slug"
        ]
      },
      "Group folderPagination": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer"
          },
          "has_prev": {
            "type": "boolean"
          },
          "prev_num": {
            "type": "integer",
            "nullable": true
          },
          "has_next": {
            "type": "boolean"
          },
          "next_num": {
            "type": "integer",
            "nullable": true
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GroupFolder"
            }
          }
        }
      },
      "Group": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "folder_id": {
            "type": "integer",
            "nullable": true
          },
          "folder": {
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/GroupFolder"
              }
            ]
          },
          "name": {
            "type": "string",
            "nullable": true,
            "maxLength": 255
          },
          "address": {
            "$ref": "#/components/schemas/Address"
          },
          "postal_address": {
            "$ref": "#/components/schemas/Address"
          },
          "description": {
            "type": "string",
            "description": "Description for this group. HTML is allowed."
          },
          "description_short": {
            "type": "string",
            "description": "Brief description for this group. No HTML allowed."
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "Email address for the group"
          },
          "url": {
            "type": "string",
            "format": "url"
          },
          "logo": {
            "$ref": "#/components/schemas/StorageObject"
          },
          "slug": {
            "type": "string",
            "maxLength": 255,
            "description": "Slug for this group, used for navigation on the website"
          },
          "path": {
            "type": "string",
            "readOnly": true,
            "description": "Full path to this group, including the folder path"
          },
          "published": {
            "type": "boolean"
          },
          "start": {
            "type": "string",
            "format": "date",
            "description": "Start date of the group"
          },
          "end": {
            "type": "string",
            "format": "date",
            "description": "Optional end date of the group"
          },
          "memo": {
            "type": "string",
            "description": "Internal notes for this group"
          }
        },
        "required": [
          "id",
          "slug",
          "start"
        ]
      },
      "GroupPagination": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer"
          },
          "has_prev": {
            "type": "boolean"
          },
          "prev_num": {
            "type": "integer",
            "nullable": true
          },
          "has_next": {
            "type": "boolean"
          },
          "next_num": {
            "type": "integer",
            "nullable": true
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Group"
            }
          }
        }
      },
      "CollectionMembership": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "member_id": {
            "type": "integer"
          },
          "start": {
            "type": "string",
            "format": "date",
            "description": "Start date of the membership"
          },
          "end": {
            "type": "string",
            "format": "date",
            "description": "Optional end date of the membership"
          },
          "function": {
            "type": "string",
            "nullable": true,
            "maxLength": 255
          },
          "may_edit_profile": {
            "type": "boolean"
          },
          "may_manage_memberships": {
            "type": "boolean"
          },
          "may_manage_storage_objects": {
            "type": "boolean"
          },
          "is_self_enroll": {
            "type": "boolean",
            "readOnly": true,
            "description": "True when the member self enrolled to this collection"
          },
          "order_type": {
            "type": "string",
            "enum": [
              "lastname",
              "date",
              "sorted",
              "function"
            ],
            "readOnly": true,
            "description": "Order preference for memberships, defined by the GroupFolder or OrganisationCategory resource"
          },
          "order": {
            "type": "integer",
            "description": "Order for this membership, only used when `order_type` is set to 'sorted'"
          }
        },
        "required": [
          "member_id",
          "start"
        ]
      },
      "GroupWithMemberships": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "folder_id": {
            "type": "integer",
            "nullable": true
          },
          "folder": {
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/GroupFolder"
              }
            ]
          },
          "name": {
            "type": "string",
            "nullable": true,
            "maxLength": 255
          },
          "address": {
            "$ref": "#/components/schemas/Address"
          },
          "postal_address": {
            "$ref": "#/components/schemas/Address"
          },
          "description": {
            "type": "string",
            "description": "Description for this group. HTML is allowed."
          },
          "description_short": {
            "type": "string",
            "description": "Brief description for this group. No HTML allowed."
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "Email address for the group"
          },
          "url": {
            "type": "string",
            "format": "url"
          },
          "logo": {
            "$ref": "#/components/schemas/StorageObject"
          },
          "slug": {
            "type": "string",
            "maxLength": 255,
            "description": "Slug for this group, used for navigation on the website"
          },
          "path": {
            "type": "string",
            "readOnly": true,
            "description": "Full path to this group, including the folder path"
          },
          "published": {
            "type": "boolean"
          },
          "start": {
            "type": "string",
            "format": "date",
            "description": "Start date of the group"
          },
          "end": {
            "type": "string",
            "format": "date",
            "description": "Optional end date of the group"
          },
          "memo": {
            "type": "string",
            "description": "Internal notes for this group"
          },
          "memberships": {
            "readOnly": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CollectionMembership"
            }
          }
        },
        "required": [
          "id",
          "slug",
          "start"
        ]
      },
      "GroupMembership": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "member_id": {
            "type": "integer"
          },
          "start": {
            "type": "string",
            "format": "date",
            "description": "Start date of the membership"
          },
          "end": {
            "type": "string",
            "format": "date",
            "description": "Optional end date of the membership"
          },
          "function": {
            "type": "string",
            "nullable": true,
            "maxLength": 255
          },
          "may_edit_profile": {
            "type": "boolean"
          },
          "may_manage_memberships": {
            "type": "boolean"
          },
          "may_manage_storage_objects": {
            "type": "boolean"
          },
          "is_self_enroll": {
            "type": "boolean",
            "readOnly": true,
            "description": "True when the member self enrolled to this collection"
          },
          "order_type": {
            "type": "string",
            "enum": [
              "lastname",
              "date",
              "sorted",
              "function"
            ],
            "readOnly": true,
            "description": "Order preference for memberships, defined by the GroupFolder or OrganisationCategory resource"
          },
          "order": {
            "type": "integer",
            "description": "Order for this membership, only used when `order_type` is set to 'sorted'"
          },
          "group_id": {
            "type": "integer"
          },
          "group": {
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/Group"
              }
            ]
          }
        },
        "required": [
          "group_id",
          "member_id",
          "start"
        ]
      },
      "Group membershipPagination": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer"
          },
          "has_prev": {
            "type": "boolean"
          },
          "prev_num": {
            "type": "integer",
            "nullable": true
          },
          "has_next": {
            "type": "boolean"
          },
          "next_num": {
            "type": "integer",
            "nullable": true
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GroupMembership"
            }
          }
        }
      },
      "LogEntryUser": {
        "type": "object",
        "properties": {
          "id": {
            "readOnly": true
          },
          "display_name": {
            "readOnly": true
          }
        }
      },
      "LogEntrySubject": {
        "type": "object",
        "properties": {
          "id": {
            "readOnly": true
          },
          "display_name": {
            "readOnly": true
          },
          "color": {
            "readOnly": true
          },
          "absolute_url": {
            "readOnly": true
          }
        }
      },
      "Task": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "type": {
            "type": "string",
            "readOnly": true,
            "maxLength": 255
          },
          "text": {
            "type": "string",
            "nullable": true
          },
          "subject_type": {
            "type": "string",
            "readOnly": true,
            "maxLength": 255
          },
          "subject_id": {
            "type": "integer",
            "readOnly": true
          },
          "author_id": {
            "type": "integer",
            "readOnly": true,
            "nullable": true
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "nullable": true
          },
          "modified": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "nullable": true
          },
          "author": {
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/LogEntryUser"
              }
            ]
          },
          "subject": {
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/LogEntrySubject"
              }
            ]
          },
          "assignee_type": {
            "type": "string",
            "nullable": true,
            "maxLength": 255
          },
          "assignee_id": {
            "type": "integer",
            "nullable": true
          },
          "assignee": {
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/LogEntryUser"
              }
            ]
          },
          "is_completed": {
            "type": "boolean"
          },
          "completed": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "nullable": true
          },
          "completed_by_id": {
            "type": "integer",
            "nullable": true
          },
          "completed_by": {
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/LogEntryUser"
              }
            ]
          }
        },
        "required": [
          "subject_id",
          "subject_type",
          "type"
        ]
      },
      "TaskPagination": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer"
          },
          "has_prev": {
            "type": "boolean"
          },
          "prev_num": {
            "type": "integer",
            "nullable": true
          },
          "has_next": {
            "type": "boolean"
          },
          "next_num": {
            "type": "integer",
            "nullable": true
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Task"
            }
          }
        }
      },
      "UpdateTask": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "type": {
            "type": "string",
            "readOnly": true,
            "maxLength": 255
          },
          "text": {
            "type": "string",
            "nullable": true
          },
          "subject_type": {
            "type": "string",
            "readOnly": true,
            "maxLength": 255
          },
          "subject_id": {
            "type": "integer",
            "readOnly": true
          },
          "author_id": {
            "type": "integer",
            "readOnly": true,
            "nullable": true
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "nullable": true
          },
          "modified": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "nullable": true
          },
          "author": {
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/LogEntryUser"
              }
            ]
          },
          "subject": {
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/LogEntrySubject"
              }
            ]
          },
          "assignee_type": {
            "type": "string"
          },
          "assignee_id": {
            "type": "integer"
          },
          "assignee": {
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/LogEntryUser"
              }
            ]
          },
          "is_completed": {
            "type": "boolean"
          },
          "completed": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "nullable": true
          },
          "completed_by_id": {
            "type": "integer",
            "nullable": true
          },
          "completed_by": {
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/LogEntryUser"
              }
            ]
          }
        },
        "required": [
          "subject_id",
          "subject_type",
          "type"
        ]
      },
      "MemberStatus": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          },
          "description": {
            "type": "string",
            "default": "",
            "description": "Description for this member status, used for online sign up"
          },
          "archived": {
            "type": "boolean",
            "description": "Archived status, members are not able to log in on the website(s)"
          },
          "hidden": {
            "type": "boolean",
            "description": "Former member statuses, not currently in use in the administration"
          },
          "deceased": {
            "type": "boolean",
            "description": "Deceased status for passed away members, only available in our Enterprise plan"
          },
          "order": {
            "type": "integer",
            "description": "Display order"
          }
        },
        "required": [
          "name"
        ]
      },
      "MemberStatusListPagination": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer"
          },
          "has_prev": {
            "type": "boolean"
          },
          "prev_num": {
            "type": "integer",
            "nullable": true
          },
          "has_next": {
            "type": "boolean"
          },
          "next_num": {
            "type": "integer",
            "nullable": true
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MemberStatus"
            }
          }
        }
      },
      "ProductOffer": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "price": {
            "type": "number",
            "nullable": true
          },
          "name": {}
        }
      },
      "MemberStatusWithFieldSettings": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          },
          "description": {
            "type": "string",
            "default": "",
            "description": "Description for this member status, used for online sign up"
          },
          "archived": {
            "type": "boolean",
            "description": "Archived status, members are not able to log in on the website(s)"
          },
          "hidden": {
            "type": "boolean",
            "description": "Former member statuses, not currently in use in the administration"
          },
          "deceased": {
            "type": "boolean",
            "description": "Deceased status for passed away members, only available in our Enterprise plan"
          },
          "order": {
            "type": "integer",
            "description": "Display order"
          },
          "is_available_for_online_sign_up": {
            "type": "boolean",
            "description": "True when new members can sign up online for this member status"
          },
          "registration_product_offer_id": {
            "type": "integer",
            "writeOnly": true
          },
          "registration_product_offer": {
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/ProductOffer"
              }
            ]
          },
          "membership_fee_product_offer_id": {
            "type": "integer",
            "writeOnly": true
          },
          "membership_fee_product_offer": {
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/ProductOffer"
              }
            ]
          },
          "websites": {
            "readOnly": true,
            "description": "Website(s) on which this member status is able to log in. Only working for member statuses that are not archived",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BaseWebsite"
            }
          },
          "websites_member_list": {
            "readOnly": true,
            "description": "Website(s) on which this member status is visible in the member list",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BaseWebsite"
            }
          }
        },
        "required": [
          "name"
        ]
      },
      "MemberFieldOption": {
        "type": "object",
        "properties": {
          "option_id": {
            "type": "integer"
          },
          "option_value": {
            "type": "string",
            "readOnly": true
          }
        }
      },
      "MemberField": {
        "type": "object",
        "properties": {
          "id": {},
          "ref": {
            "type": "string",
            "description": "Internal reference of the field."
          },
          "tab": {
            "type": "string",
            "readOnly": true,
            "description": "Tab title for the field."
          },
          "set": {
            "type": "string",
            "readOnly": true,
            "description": "Set title for the field."
          },
          "tab_order": {
            "type": "integer",
            "readOnly": true
          },
          "set_order": {
            "type": "integer",
            "readOnly": true
          },
          "order": {
            "type": "integer",
            "nullable": true
          },
          "title": {
            "type": "string",
            "description": "Title of the field."
          },
          "description": {
            "type": "string",
            "nullable": true,
            "description": "Description of the field."
          },
          "type": {
            "type": "string",
            "description": "Type of the field."
          },
          "data_type": {
            "type": "string",
            "readOnly": true,
            "description": "Data type of the field."
          },
          "choices": {
            "readOnly": true,
            "description": "Available choices for this field. Only available for fields with type 'option' or 'option_multiple'.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MemberFieldOption"
            }
          }
        },
        "required": [
          "ref",
          "title",
          "type"
        ]
      },
      "Custom fieldPagination": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer"
          },
          "has_prev": {
            "type": "boolean"
          },
          "prev_num": {
            "type": "integer",
            "nullable": true
          },
          "has_next": {
            "type": "boolean"
          },
          "next_num": {
            "type": "integer",
            "nullable": true
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MemberField"
            }
          }
        }
      },
      "Note": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "type": {
            "type": "string",
            "readOnly": true,
            "maxLength": 255
          },
          "text": {
            "type": "string",
            "nullable": true
          },
          "subject_type": {
            "type": "string",
            "readOnly": true,
            "maxLength": 255
          },
          "subject_id": {
            "type": "integer",
            "readOnly": true
          },
          "author_id": {
            "type": "integer",
            "readOnly": true,
            "nullable": true
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "nullable": true
          },
          "modified": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "nullable": true
          },
          "author": {
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/LogEntryUser"
              }
            ]
          },
          "subject": {
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/LogEntrySubject"
              }
            ]
          }
        },
        "required": [
          "subject_id",
          "subject_type",
          "type"
        ]
      },
      "Action": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "type": {
            "type": "string",
            "readOnly": true,
            "maxLength": 255
          },
          "text": {
            "type": "string",
            "readOnly": true,
            "nullable": true
          },
          "subject_type": {
            "type": "string",
            "readOnly": true,
            "maxLength": 255
          },
          "subject_id": {
            "type": "integer",
            "readOnly": true
          },
          "author_id": {
            "type": "integer",
            "readOnly": true,
            "nullable": true
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "nullable": true
          },
          "modified": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "nullable": true
          },
          "author": {
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/LogEntryUser"
              }
            ]
          },
          "subject": {
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/LogEntrySubject"
              }
            ]
          },
          "action": {
            "readOnly": true
          }
        },
        "required": [
          "subject_id",
          "subject_type",
          "type"
        ]
      },
      "Change": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "type": {
            "type": "string",
            "readOnly": true,
            "maxLength": 255
          },
          "text": {
            "type": "string",
            "readOnly": true,
            "nullable": true
          },
          "subject_type": {
            "type": "string",
            "readOnly": true,
            "maxLength": 255
          },
          "subject_id": {
            "type": "integer",
            "readOnly": true
          },
          "author_id": {
            "type": "integer",
            "readOnly": true,
            "nullable": true
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "nullable": true
          },
          "modified": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "nullable": true
          },
          "author": {
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/LogEntryUser"
              }
            ]
          },
          "subject": {
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/LogEntrySubject"
              }
            ]
          },
          "changes": {
            "readOnly": true
          },
          "changes_pretty": {
            "readOnly": true
          }
        },
        "required": [
          "changes",
          "subject_id",
          "subject_type",
          "type"
        ]
      },
      "LogEntry": {
        "type": "object",
        "properties": {},
        "oneOf": [
          {
            "$ref": "#/components/schemas/Note"
          },
          {
            "$ref": "#/components/schemas/Task"
          },
          {
            "$ref": "#/components/schemas/Action"
          },
          {
            "$ref": "#/components/schemas/Change"
          }
        ],
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "Note": "#/components/schemas/Note",
            "Task": "#/components/schemas/Task",
            "Action": "#/components/schemas/Action",
            "Change": "#/components/schemas/Change"
          }
        }
      },
      "LogEntryPagination": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer"
          },
          "has_prev": {
            "type": "boolean"
          },
          "prev_num": {
            "type": "integer",
            "nullable": true
          },
          "has_next": {
            "type": "boolean"
          },
          "next_num": {
            "type": "integer",
            "nullable": true
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LogEntry"
            }
          }
        }
      },
      "CreateNote": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "type": {
            "type": "string",
            "readOnly": true,
            "maxLength": 255
          },
          "text": {
            "type": "string",
            "nullable": true
          },
          "subject_type": {
            "type": "string",
            "readOnly": true,
            "maxLength": 255
          },
          "subject_id": {
            "type": "integer",
            "readOnly": true
          },
          "author_id": {
            "type": "integer",
            "readOnly": true,
            "nullable": true
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "nullable": true
          },
          "modified": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "nullable": true
          },
          "author": {
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/LogEntryUser"
              }
            ]
          },
          "subject": {
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/LogEntrySubject"
              }
            ]
          }
        },
        "required": [
          "subject_id",
          "subject_type",
          "type"
        ]
      },
      "CreateTask": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "type": {
            "type": "string",
            "readOnly": true,
            "maxLength": 255
          },
          "text": {
            "type": "string",
            "nullable": true
          },
          "subject_type": {
            "type": "string",
            "readOnly": true,
            "maxLength": 255
          },
          "subject_id": {
            "type": "integer",
            "readOnly": true
          },
          "author_id": {
            "type": "integer",
            "readOnly": true,
            "nullable": true
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "nullable": true
          },
          "modified": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "nullable": true
          },
          "author": {
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/LogEntryUser"
              }
            ]
          },
          "subject": {
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/LogEntrySubject"
              }
            ]
          },
          "assignee_type": {
            "type": "string",
            "enum": [
              "Administrator",
              "AdministratorGroup"
            ]
          },
          "assignee_id": {
            "type": "integer"
          },
          "assignee": {
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/LogEntryUser"
              }
            ]
          },
          "is_completed": {
            "type": "boolean",
            "readOnly": true
          },
          "completed": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "nullable": true
          },
          "completed_by_id": {
            "type": "integer",
            "readOnly": true,
            "nullable": true
          },
          "completed_by": {
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/LogEntryUser"
              }
            ]
          }
        },
        "required": [
          "subject_id",
          "subject_type",
          "type"
        ]
      },
      "CreateLogEntry": {
        "type": "object",
        "properties": {},
        "oneOf": [
          {
            "$ref": "#/components/schemas/CreateNote"
          },
          {
            "$ref": "#/components/schemas/CreateTask"
          }
        ],
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "Note": "#/components/schemas/CreateNote",
            "Task": "#/components/schemas/CreateTask"
          }
        }
      },
      "UpdateNote": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "type": {
            "type": "string",
            "readOnly": true,
            "maxLength": 255
          },
          "text": {
            "type": "string",
            "nullable": true
          },
          "subject_type": {
            "type": "string",
            "readOnly": true,
            "maxLength": 255
          },
          "subject_id": {
            "type": "integer",
            "readOnly": true
          },
          "author_id": {
            "type": "integer",
            "readOnly": true,
            "nullable": true
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "nullable": true
          },
          "modified": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "nullable": true
          },
          "author": {
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/LogEntryUser"
              }
            ]
          },
          "subject": {
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/LogEntrySubject"
              }
            ]
          }
        },
        "required": [
          "subject_id",
          "subject_type",
          "type"
        ]
      },
      "UpdateLogEntry": {
        "type": "object",
        "properties": {},
        "oneOf": [
          {
            "$ref": "#/components/schemas/UpdateNote"
          },
          {
            "$ref": "#/components/schemas/UpdateTask"
          }
        ],
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "Note": "#/components/schemas/UpdateNote",
            "Task": "#/components/schemas/UpdateTask"
          }
        }
      },
      "PhoneNumber": {
        "type": "object",
        "properties": {
          "number": {
            "type": "string",
            "nullable": true,
            "maxLength": 255
          },
          "number_full": {
            "type": "string",
            "readOnly": true,
            "nullable": true
          },
          "number_full_MSISDN": {
            "type": "string",
            "readOnly": true,
            "nullable": true
          },
          "number_formatted": {
            "type": "string",
            "readOnly": true,
            "nullable": true
          },
          "country": {
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/Country"
              }
            ]
          },
          "country_id": {
            "type": "integer",
            "writeOnly": true
          }
        }
      },
      "SDDMandate": {
        "type": "object",
        "properties": {
          "entity_id": {
            "type": "integer",
            "readOnly": true
          },
          "entity_name": {
            "type": "string",
            "readOnly": true
          },
          "reference": {},
          "date": {},
          "date_cancelled": {},
          "is_valid": {
            "type": "boolean",
            "readOnly": true
          }
        }
      },
      "BankAccount": {
        "type": "object",
        "properties": {
          "iban": {
            "type": "string",
            "nullable": true,
            "maxLength": 255
          },
          "bic": {
            "type": "string",
            "nullable": true,
            "maxLength": 255
          },
          "iban_formatted": {
            "type": "string",
            "readOnly": true,
            "nullable": true
          },
          "iban_masked": {
            "type": "string",
            "readOnly": true,
            "nullable": true
          },
          "sdd_mandates": {
            "readOnly": true,
            "nullable": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SDDMandate"
            }
          }
        }
      },
      "Member": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "username": {
            "type": "string"
          },
          "status": {
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/MembershipStatus"
              }
            ]
          },
          "statuses": {
            "readOnly": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MembershipStatus"
            }
          },
          "gender": {
            "enum": [
              "m",
              "f",
              "o",
              ""
            ],
            "nullable": true,
            "maxLength": 1
          },
          "prefix": {
            "type": "string",
            "nullable": true,
            "maxLength": 255
          },
          "initials": {
            "type": "string",
            "nullable": true,
            "maxLength": 255
          },
          "nickname": {
            "type": "string",
            "nullable": true,
            "maxLength": 255
          },
          "given_name": {
            "type": "string",
            "nullable": true,
            "maxLength": 255
          },
          "first_name": {
            "type": "string",
            "nullable": true,
            "maxLength": 255
          },
          "primary_last_name_main": {
            "type": "string",
            "nullable": true,
            "maxLength": 255
          },
          "primary_last_name_prefix": {
            "type": "string",
            "nullable": true,
            "maxLength": 255
          },
          "primary_last_name": {
            "type": "string",
            "readOnly": true
          },
          "secondary_last_name_main": {
            "type": "string",
            "nullable": true,
            "maxLength": 255
          },
          "secondary_last_name_prefix": {
            "type": "string",
            "nullable": true,
            "maxLength": 255
          },
          "secondary_last_name": {
            "type": "string",
            "readOnly": true,
            "nullable": true
          },
          "last_name_display": {
            "type": "string",
            "nullable": true,
            "maxLength": 255
          },
          "last_name": {
            "type": "string",
            "readOnly": true
          },
          "search_name": {
            "type": "string",
            "readOnly": true,
            "nullable": true
          },
          "suffix": {
            "type": "string",
            "nullable": true,
            "maxLength": 255
          },
          "date_of_birth": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true,
            "maxLength": 255
          },
          "phone_mobile": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/PhoneNumber"
              }
            ]
          },
          "phone_home": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/PhoneNumber"
              }
            ]
          },
          "address": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/Address"
              }
            ]
          },
          "profile_picture_id": {
            "type": "integer",
            "nullable": true
          },
          "profile_picture": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/StorageObject"
              }
            ]
          },
          "formal_picture_id": {
            "type": "integer",
            "nullable": true
          },
          "formal_picture": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/StorageObject"
              }
            ]
          },
          "deleted": {
            "type": "boolean",
            "readOnly": true,
            "nullable": true
          },
          "receive_sms": {
            "type": "boolean"
          },
          "receive_mailings": {
            "type": "boolean"
          },
          "show_almanac": {
            "type": "boolean"
          },
          "show_almanac_addresses": {
            "type": "boolean"
          },
          "show_almanac_phonenumbers": {
            "type": "boolean"
          },
          "show_almanac_email": {
            "type": "boolean"
          },
          "show_almanac_date_of_birth": {
            "type": "boolean"
          },
          "show_almanac_custom_fields": {
            "type": "boolean"
          },
          "modified": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "nullable": true
          },
          "memo": {
            "type": "string",
            "nullable": true,
            "description": "Internal notes for this member"
          },
          "bank_account": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/BankAccount"
              }
            ]
          }
        },
        "required": [
          "id"
        ]
      },
      "MemberPagination": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer"
          },
          "has_prev": {
            "type": "boolean"
          },
          "prev_num": {
            "type": "integer",
            "nullable": true
          },
          "has_next": {
            "type": "boolean"
          },
          "next_num": {
            "type": "integer",
            "nullable": true
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Member"
            }
          }
        }
      },
      "CreateMember": {
        "type": "object",
        "properties": {
          "status_id": {
            "type": "integer",
            "writeOnly": true
          },
          "member_from": {
            "type": "string",
            "format": "date",
            "writeOnly": true
          },
          "member_to": {
            "type": "string",
            "format": "date",
            "writeOnly": true
          },
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "username": {
            "type": "string"
          },
          "status": {
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/MembershipStatus"
              }
            ]
          },
          "statuses": {
            "readOnly": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MembershipStatus"
            }
          },
          "gender": {
            "enum": [
              "m",
              "f",
              "o",
              ""
            ],
            "nullable": true,
            "maxLength": 1
          },
          "prefix": {
            "type": "string",
            "nullable": true,
            "maxLength": 255
          },
          "initials": {
            "type": "string",
            "nullable": true,
            "maxLength": 255
          },
          "nickname": {
            "type": "string",
            "nullable": true,
            "maxLength": 255
          },
          "given_name": {
            "type": "string",
            "nullable": true,
            "maxLength": 255
          },
          "first_name": {
            "type": "string",
            "nullable": true,
            "maxLength": 255
          },
          "primary_last_name_main": {
            "type": "string"
          },
          "primary_last_name_prefix": {
            "type": "string",
            "nullable": true,
            "maxLength": 255
          },
          "primary_last_name": {
            "type": "string",
            "readOnly": true
          },
          "secondary_last_name_main": {
            "type": "string",
            "nullable": true,
            "maxLength": 255
          },
          "secondary_last_name_prefix": {
            "type": "string",
            "nullable": true,
            "maxLength": 255
          },
          "secondary_last_name": {
            "type": "string",
            "readOnly": true,
            "nullable": true
          },
          "last_name_display": {
            "type": "string",
            "nullable": true,
            "maxLength": 255
          },
          "last_name": {
            "type": "string",
            "readOnly": true
          },
          "search_name": {
            "type": "string",
            "readOnly": true,
            "nullable": true
          },
          "suffix": {
            "type": "string",
            "nullable": true,
            "maxLength": 255
          },
          "date_of_birth": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true,
            "maxLength": 255
          },
          "phone_mobile": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/PhoneNumber"
              }
            ]
          },
          "phone_home": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/PhoneNumber"
              }
            ]
          },
          "address": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/Address"
              }
            ]
          },
          "profile_picture_id": {
            "type": "integer",
            "nullable": true
          },
          "profile_picture": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/StorageObject"
              }
            ]
          },
          "formal_picture_id": {
            "type": "integer",
            "nullable": true
          },
          "formal_picture": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/StorageObject"
              }
            ]
          },
          "deleted": {
            "type": "boolean",
            "readOnly": true,
            "nullable": true
          },
          "receive_sms": {
            "type": "boolean"
          },
          "receive_mailings": {
            "type": "boolean"
          },
          "show_almanac": {
            "type": "boolean"
          },
          "show_almanac_addresses": {
            "type": "boolean"
          },
          "show_almanac_phonenumbers": {
            "type": "boolean"
          },
          "show_almanac_email": {
            "type": "boolean"
          },
          "show_almanac_date_of_birth": {
            "type": "boolean"
          },
          "show_almanac_custom_fields": {
            "type": "boolean"
          },
          "modified": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "nullable": true
          },
          "memo": {
            "type": "string",
            "nullable": true,
            "description": "Internal notes for this member"
          },
          "bank_account": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/BankAccount"
              }
            ]
          }
        },
        "required": [
          "id",
          "primary_last_name_main",
          "status_id"
        ]
      },
      "MemberWithCustomFields": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "username": {
            "type": "string"
          },
          "status": {
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/MembershipStatus"
              }
            ]
          },
          "statuses": {
            "readOnly": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MembershipStatus"
            }
          },
          "gender": {
            "enum": [
              "m",
              "f",
              "o",
              ""
            ],
            "nullable": true,
            "maxLength": 1
          },
          "prefix": {
            "type": "string",
            "nullable": true,
            "maxLength": 255
          },
          "initials": {
            "type": "string",
            "nullable": true,
            "maxLength": 255
          },
          "nickname": {
            "type": "string",
            "nullable": true,
            "maxLength": 255
          },
          "given_name": {
            "type": "string",
            "nullable": true,
            "maxLength": 255
          },
          "first_name": {
            "type": "string",
            "nullable": true,
            "maxLength": 255
          },
          "primary_last_name_main": {
            "type": "string",
            "nullable": true,
            "maxLength": 255
          },
          "primary_last_name_prefix": {
            "type": "string",
            "nullable": true,
            "maxLength": 255
          },
          "primary_last_name": {
            "type": "string",
            "readOnly": true
          },
          "secondary_last_name_main": {
            "type": "string",
            "nullable": true,
            "maxLength": 255
          },
          "secondary_last_name_prefix": {
            "type": "string",
            "nullable": true,
            "maxLength": 255
          },
          "secondary_last_name": {
            "type": "string",
            "readOnly": true,
            "nullable": true
          },
          "last_name_display": {
            "type": "string",
            "nullable": true,
            "maxLength": 255
          },
          "last_name": {
            "type": "string",
            "readOnly": true
          },
          "search_name": {
            "type": "string",
            "readOnly": true,
            "nullable": true
          },
          "suffix": {
            "type": "string",
            "nullable": true,
            "maxLength": 255
          },
          "date_of_birth": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true,
            "maxLength": 255
          },
          "phone_mobile": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/PhoneNumber"
              }
            ]
          },
          "phone_home": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/PhoneNumber"
              }
            ]
          },
          "address": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/Address"
              }
            ]
          },
          "profile_picture_id": {
            "type": "integer",
            "nullable": true
          },
          "profile_picture": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/StorageObject"
              }
            ]
          },
          "formal_picture_id": {
            "type": "integer",
            "nullable": true
          },
          "formal_picture": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/StorageObject"
              }
            ]
          },
          "deleted": {
            "type": "boolean",
            "readOnly": true,
            "nullable": true
          },
          "receive_sms": {
            "type": "boolean"
          },
          "receive_mailings": {
            "type": "boolean"
          },
          "show_almanac": {
            "type": "boolean"
          },
          "show_almanac_addresses": {
            "type": "boolean"
          },
          "show_almanac_phonenumbers": {
            "type": "boolean"
          },
          "show_almanac_email": {
            "type": "boolean"
          },
          "show_almanac_date_of_birth": {
            "type": "boolean"
          },
          "show_almanac_custom_fields": {
            "type": "boolean"
          },
          "modified": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "nullable": true
          },
          "memo": {
            "type": "string",
            "nullable": true,
            "description": "Internal notes for this member"
          },
          "bank_account": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/BankAccount"
              }
            ]
          },
          "custom_fields": {
            "readOnly": true,
            "description": "List with information for this member in additional fields. Both the value and meta information for the field are provided. This field is deprecated and will be removed in the future. Use `custom_field_data` instead.",
            "deprecated": true
          },
          "custom_field_data": {
            "type": "object",
            "readOnly": true,
            "description": "List with custom field information for this member."
          }
        },
        "required": [
          "id"
        ]
      },
      "Membership statusPagination": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer"
          },
          "has_prev": {
            "type": "boolean"
          },
          "prev_num": {
            "type": "integer",
            "nullable": true
          },
          "has_next": {
            "type": "boolean"
          },
          "next_num": {
            "type": "integer",
            "nullable": true
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MembershipStatus"
            }
          }
        }
      },
      "ElasticMember": {
        "type": "object",
        "properties": {
          "_score": {
            "type": "integer"
          },
          "id": {
            "type": "integer"
          },
          "value": {
            "readOnly": true
          },
          "name": {
            "readOnly": true
          },
          "username": {
            "type": "string"
          },
          "type": {
            "default": "member"
          },
          "email": {
            "type": "string"
          },
          "phone_mobile": {
            "type": "string"
          },
          "phone_home": {
            "type": "string"
          },
          "address": {
            "type": "string"
          },
          "zip": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "province": {
            "type": "string"
          },
          "country_id": {
            "type": "integer"
          },
          "country": {
            "type": "string"
          },
          "membership_start": {
            "type": "string",
            "format": "date"
          },
          "membership_end": {
            "type": "string",
            "format": "date"
          },
          "current_member_status_name": {
            "type": "string"
          },
          "current_member_status_id": {
            "type": "integer"
          },
          "manager_uri": {
            "readOnly": true
          }
        }
      },
      "ElasticMemberPagination": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer"
          },
          "has_prev": {
            "type": "boolean"
          },
          "prev_num": {
            "type": "integer",
            "nullable": true
          },
          "has_next": {
            "type": "boolean"
          },
          "next_num": {
            "type": "integer",
            "nullable": true
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ElasticMember"
            }
          }
        }
      },
      "NewsComment": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "member_id": {
            "type": "integer"
          },
          "type": {
            "type": "string"
          },
          "comment": {
            "type": "string"
          },
          "rating": {
            "type": "integer",
            "readOnly": true
          },
          "rates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommentRate"
            }
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "modified": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "news_id": {
            "type": "integer"
          }
        },
        "required": [
          "comment",
          "member_id"
        ]
      },
      "News": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "title": {
            "type": "string",
            "minLength": 3,
            "maxLength": 255
          },
          "content": {},
          "published_from": {
            "type": "string",
            "format": "date-time"
          },
          "actual_to": {
            "type": "string",
            "format": "date-time"
          },
          "is_published": {
            "type": "boolean",
            "readOnly": true
          },
          "is_actual": {
            "type": "boolean",
            "readOnly": true
          },
          "media": {
            "readOnly": true,
            "nullable": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StorageObject"
            }
          },
          "comments": {
            "readOnly": true,
            "nullable": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NewsComment"
            }
          },
          "memo": {
            "type": "string",
            "description": "Internal notes for this news"
          },
          "websites": {
            "readOnly": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BaseWebsite"
            }
          }
        },
        "required": [
          "actual_to",
          "published_from",
          "title"
        ]
      },
      "NewsPagination": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer"
          },
          "has_prev": {
            "type": "boolean"
          },
          "prev_num": {
            "type": "integer",
            "nullable": true
          },
          "has_next": {
            "type": "boolean"
          },
          "next_num": {
            "type": "integer",
            "nullable": true
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/News"
            }
          }
        }
      },
      "Message": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "readOnly": true
          },
          "context": {
            "type": "string",
            "readOnly": true
          },
          "url": {
            "type": "string",
            "format": "url",
            "readOnly": true
          },
          "icon": {
            "type": "string",
            "readOnly": true
          }
        }
      },
      "Notifications": {
        "type": "object",
        "properties": {
          "messages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          },
          "background_processes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BackgroundProcess"
            }
          }
        }
      },
      "NotificationPagination": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer"
          },
          "has_prev": {
            "type": "boolean"
          },
          "prev_num": {
            "type": "integer",
            "nullable": true
          },
          "has_next": {
            "type": "boolean"
          },
          "next_num": {
            "type": "integer",
            "nullable": true
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Notifications"
            }
          }
        }
      },
      "OrganisationCategory": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "color": {
            "type": "string",
            "nullable": true,
            "maxLength": 16
          },
          "slug": {
            "readOnly": true
          },
          "published": {
            "type": "boolean"
          },
          "visibility": {
            "enum": [
              "public",
              "protected",
              "private"
            ],
            "nullable": true,
            "maxLength": 9
          },
          "websites": {
            "readOnly": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BaseWebsite"
            }
          },
          "order_type": {
            "type": "string",
            "enum": [
              "lastname",
              "date",
              "sorted",
              "function"
            ],
            "description": "Order preference for memberships"
          }
        },
        "required": [
          "name"
        ]
      },
      "Organisation categoryPagination": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer"
          },
          "has_prev": {
            "type": "boolean"
          },
          "prev_num": {
            "type": "integer",
            "nullable": true
          },
          "has_next": {
            "type": "boolean"
          },
          "next_num": {
            "type": "integer",
            "nullable": true
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrganisationCategory"
            }
          }
        }
      },
      "Organisation": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "nullable": true,
            "maxLength": 255
          },
          "slug": {
            "type": "string",
            "description": "Slug for this organisation, used for navigation on the website"
          },
          "category_id": {
            "type": "integer"
          },
          "category": {
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/OrganisationCategory"
              }
            ]
          },
          "address": {
            "$ref": "#/components/schemas/Address"
          },
          "postal_address": {
            "$ref": "#/components/schemas/Address"
          },
          "description": {
            "type": "string",
            "description": "Description for this organisation. HTML is allowed."
          },
          "description_short": {
            "type": "string",
            "description": "Brief description for this organisation. No HTML allowed."
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "Email address for the organisation"
          },
          "url": {
            "type": "string",
            "format": "url"
          },
          "logo": {
            "$ref": "#/components/schemas/StorageObject"
          },
          "memo": {
            "type": "string",
            "description": "Internal notes for this organisation"
          },
          "invoice_reference": {
            "type": "string",
            "maxLength": 255,
            "description": "Invoice reference for this organisation"
          },
          "invoice_addressee_attention": {
            "type": "string",
            "maxLength": 255,
            "description": "Invoice addressee attention for this organisation"
          },
          "invoice_address_field": {
            "type": "string",
            "enum": [
              "address",
              "postal_address"
            ],
            "description": "Invoice address field for this organisation"
          },
          "invoice_email": {
            "type": "string",
            "format": "email",
            "maxLength": 255,
            "description": "Invoice email address for this organisation. Leave empty to use the general email address."
          }
        },
        "required": [
          "category_id",
          "id",
          "invoice_address_field",
          "slug"
        ]
      },
      "OrganisationPagination": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer"
          },
          "has_prev": {
            "type": "boolean"
          },
          "prev_num": {
            "type": "integer",
            "nullable": true
          },
          "has_next": {
            "type": "boolean"
          },
          "next_num": {
            "type": "integer",
            "nullable": true
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Organisation"
            }
          }
        }
      },
      "OrganisationMembership": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "member_id": {
            "type": "integer"
          },
          "start": {
            "type": "string",
            "format": "date",
            "description": "Start date of the membership"
          },
          "end": {
            "type": "string",
            "format": "date",
            "description": "Optional end date of the membership"
          },
          "function": {
            "type": "string",
            "nullable": true,
            "maxLength": 255
          },
          "may_edit_profile": {
            "type": "boolean"
          },
          "may_manage_memberships": {
            "type": "boolean"
          },
          "may_manage_storage_objects": {
            "type": "boolean"
          },
          "is_self_enroll": {
            "type": "boolean",
            "readOnly": true,
            "description": "True when the member self enrolled to this collection"
          },
          "order_type": {
            "type": "string",
            "enum": [
              "lastname",
              "date",
              "sorted",
              "function"
            ],
            "readOnly": true,
            "description": "Order preference for memberships, defined by the GroupFolder or OrganisationCategory resource"
          },
          "order": {
            "type": "integer",
            "description": "Order for this membership, only used when `order_type` is set to 'sorted'"
          },
          "organisation_id": {
            "type": "integer"
          },
          "organisation": {
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/Group"
              }
            ]
          }
        },
        "required": [
          "member_id",
          "organisation_id",
          "start"
        ]
      },
      "Organisation membershipPagination": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer"
          },
          "has_prev": {
            "type": "boolean"
          },
          "prev_num": {
            "type": "integer",
            "nullable": true
          },
          "has_next": {
            "type": "boolean"
          },
          "next_num": {
            "type": "integer",
            "nullable": true
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrganisationMembership"
            }
          }
        }
      },
      "ProductFolderWithChildren": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "parent_id": {
            "type": "integer",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true,
            "maxLength": 255
          },
          "slug": {
            "type": "string",
            "maxLength": 255,
            "description": "Slug for this product folder, used for navigation on the website"
          },
          "published": {
            "type": "boolean",
            "description": "True if this folder is published"
          },
          "path": {
            "type": "string",
            "readOnly": true,
            "description": "Path used on the website for products in this folder, based on the slugs of this folder and parent folders"
          },
          "children": {
            "readOnly": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductFolderWithChildren"
            }
          }
        },
        "required": [
          "name",
          "slug"
        ]
      },
      "ProductFolderListRecursivePagination": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer"
          },
          "has_prev": {
            "type": "boolean"
          },
          "prev_num": {
            "type": "integer",
            "nullable": true
          },
          "has_next": {
            "type": "boolean"
          },
          "next_num": {
            "type": "integer",
            "nullable": true
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductFolderWithChildren"
            }
          }
        }
      },
      "ProductFolder": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "parent_id": {
            "type": "integer",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true,
            "maxLength": 255
          },
          "slug": {
            "type": "string",
            "maxLength": 255,
            "description": "Slug for this product folder, used for navigation on the website"
          },
          "published": {
            "type": "boolean",
            "description": "True if this folder is published"
          },
          "path": {
            "type": "string",
            "readOnly": true,
            "description": "Path used on the website for products in this folder, based on the slugs of this folder and parent folders"
          }
        },
        "required": [
          "name",
          "slug"
        ]
      },
      "Product folderPagination": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer"
          },
          "has_prev": {
            "type": "boolean"
          },
          "prev_num": {
            "type": "integer",
            "nullable": true
          },
          "has_next": {
            "type": "boolean"
          },
          "next_num": {
            "type": "integer",
            "nullable": true
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductFolder"
            }
          }
        }
      },
      "Product": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "product_offer_id": {
            "type": "integer",
            "description": "id for the product offer (variant)"
          },
          "folder_id": {
            "type": "integer",
            "description": "id for the product folder"
          },
          "folder": {
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/ProductFolder"
              }
            ]
          },
          "name": {
            "type": "string",
            "nullable": true,
            "maxLength": 255
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "media": {
            "readOnly": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StorageObject"
            }
          },
          "published": {
            "type": "boolean",
            "description": "True when this product is published on the website"
          },
          "price": {
            "type": "number",
            "description": "Price including VAT"
          },
          "vat_category": {
            "$ref": "#/components/schemas/VatCategory"
          },
          "vat_percentage": {
            "type": "number"
          },
          "type": {
            "type": "string",
            "readOnly": true,
            "nullable": true,
            "maxLength": 255
          },
          "is_archived": {
            "type": "boolean",
            "description": "True when this product is archived"
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "modified": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "memo": {
            "type": "string",
            "nullable": true,
            "description": "Internal notes for this product"
          }
        },
        "required": [
          "folder_id"
        ]
      },
      "ProductPagination": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer"
          },
          "has_prev": {
            "type": "boolean"
          },
          "prev_num": {
            "type": "integer",
            "nullable": true
          },
          "has_next": {
            "type": "boolean"
          },
          "next_num": {
            "type": "integer",
            "nullable": true
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Product"
            }
          }
        }
      },
      "SaleInvoicePagination": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer"
          },
          "has_prev": {
            "type": "boolean"
          },
          "prev_num": {
            "type": "integer",
            "nullable": true
          },
          "has_next": {
            "type": "boolean"
          },
          "next_num": {
            "type": "integer",
            "nullable": true
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SaleInvoice"
            }
          }
        }
      },
      "SaleInvoiceSend": {
        "type": "object",
        "properties": {
          "delivery_method": {
            "type": "string",
            "default": "according_workflow"
          },
          "email_subject": {
            "type": "string",
            "default": null,
            "nullable": true
          },
          "email_text": {
            "type": "string",
            "default": null,
            "nullable": true
          }
        }
      },
      "Schema": {
        "type": "object",
        "properties": {}
      },
      "sale invoice itemPagination": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer"
          },
          "has_prev": {
            "type": "boolean"
          },
          "prev_num": {
            "type": "integer",
            "nullable": true
          },
          "has_next": {
            "type": "boolean"
          },
          "next_num": {
            "type": "integer",
            "nullable": true
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SaleInvoiceItem"
            }
          }
        }
      },
      "SaleInvoiceWorkflow": {
        "type": "object",
        "properties": {
          "created": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "modified": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "id": {
            "type": "integer"
          },
          "type": {
            "type": "string",
            "nullable": true,
            "maxLength": 63
          },
          "name": {
            "type": "string",
            "nullable": true,
            "maxLength": 255
          },
          "memo": {
            "type": "string",
            "nullable": true
          },
          "deleted": {
            "type": "boolean",
            "nullable": true
          },
          "payment_conditions": {
            "type": "string",
            "nullable": true
          },
          "sale_invoice_default_delivery_method": {
            "type": "string",
            "nullable": true,
            "maxLength": 255
          },
          "sale_invoice_email_subject": {
            "type": "string",
            "nullable": true,
            "maxLength": 255
          },
          "sale_invoice_email_text": {
            "type": "string",
            "nullable": true
          },
          "sale_invoice_due_interval": {
            "type": "integer",
            "nullable": true
          },
          "use_direct_debit": {
            "type": "boolean",
            "nullable": true
          },
          "direct_debit_payment_conditions": {
            "type": "string",
            "nullable": true
          },
          "direct_debit_default_delivery_method": {
            "type": "string",
            "nullable": true,
            "maxLength": 255
          },
          "direct_debit_email_subject": {
            "type": "string",
            "nullable": true,
            "maxLength": 255
          },
          "direct_debit_email_text": {
            "type": "string",
            "nullable": true
          },
          "direct_debit_due_interval": {
            "type": "integer",
            "nullable": true
          },
          "first_reminder_enabled": {
            "type": "boolean",
            "nullable": true
          },
          "first_reminder_email_text": {
            "type": "string",
            "nullable": true
          },
          "first_reminder_email_subject": {
            "type": "string",
            "nullable": true,
            "maxLength": 255
          },
          "first_reminder_auto_send": {
            "type": "boolean",
            "nullable": true
          },
          "first_reminder_due_interval": {
            "type": "integer",
            "nullable": true
          },
          "first_reminder_auto_send_in_days": {
            "type": "integer",
            "nullable": true
          },
          "second_reminder_enabled": {
            "type": "boolean",
            "nullable": true
          },
          "second_reminder_email_text": {
            "type": "string",
            "nullable": true
          },
          "second_reminder_email_subject": {
            "type": "string",
            "nullable": true,
            "maxLength": 255
          },
          "second_reminder_due_interval": {
            "type": "integer",
            "nullable": true
          },
          "second_reminder_auto_send": {
            "type": "boolean",
            "nullable": true
          },
          "second_reminder_auto_send_in_days": {
            "type": "integer",
            "nullable": true
          },
          "last_reminder_enabled": {
            "type": "boolean",
            "nullable": true
          },
          "last_reminder_email_text": {
            "type": "string",
            "nullable": true
          },
          "last_reminder_email_subject": {
            "type": "string",
            "nullable": true,
            "maxLength": 255
          },
          "last_reminder_due_interval": {
            "type": "integer",
            "nullable": true
          },
          "last_reminder_auto_send": {
            "type": "boolean",
            "nullable": true
          },
          "last_reminder_auto_send_in_days": {
            "type": "integer",
            "nullable": true
          },
          "paid_send_email": {
            "type": "boolean",
            "nullable": true
          },
          "paid_email": {
            "type": "string",
            "nullable": true
          },
          "paid_email_subject": {
            "type": "string",
            "nullable": true,
            "maxLength": 255
          },
          "direct_debit_paid_send_email": {
            "type": "boolean",
            "nullable": true
          },
          "direct_debit_paid_email": {
            "type": "string",
            "nullable": true
          },
          "direct_debit_storno_send_email": {
            "type": "boolean",
            "nullable": true
          },
          "direct_debit_storno_email": {
            "type": "string",
            "nullable": true
          },
          "direct_debit_storno_email_subject": {
            "type": "string",
            "nullable": true,
            "maxLength": 255
          }
        },
        "required": [
          "id"
        ]
      },
      "sale invoice workflowPagination": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer"
          },
          "has_prev": {
            "type": "boolean"
          },
          "prev_num": {
            "type": "integer",
            "nullable": true
          },
          "has_next": {
            "type": "boolean"
          },
          "next_num": {
            "type": "integer",
            "nullable": true
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SaleInvoiceWorkflow"
            }
          }
        }
      },
      "StorageObjectPagination": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer"
          },
          "has_prev": {
            "type": "boolean"
          },
          "prev_num": {
            "type": "integer",
            "nullable": true
          },
          "has_next": {
            "type": "boolean"
          },
          "next_num": {
            "type": "integer",
            "nullable": true
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StorageObject"
            }
          }
        }
      },
      "FileUpload": {
        "type": "object",
        "properties": {
          "file": {}
        }
      },
      "Webhook": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "url": {
            "type": "string",
            "format": "url"
          },
          "headers": {
            "type": "object"
          },
          "version": {
            "type": "string",
            "readOnly": true,
            "maxLength": 255
          },
          "signal": {
            "type": "string",
            "enum": [
              "member",
              "member_added",
              "member_updated",
              "member_deleted",
              "event",
              "event_added",
              "event_updated",
              "event_deleted",
              "event_participation",
              "event_participation_added",
              "event_participation_updated",
              "event_participation_deleted",
              "sale_invoice",
              "sale_invoice_added",
              "sale_invoice_updated",
              "sale_invoice_deleted"
            ]
          },
          "technical_contact_email": {
            "type": "string",
            "format": "email"
          },
          "http_basic_auth_key": {
            "type": "string",
            "readOnly": true,
            "maxLength": 255
          },
          "http_basic_auth_enabled": {
            "type": "boolean"
          }
        }
      },
      "WebhookPagination": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer"
          },
          "has_prev": {
            "type": "boolean"
          },
          "prev_num": {
            "type": "integer",
            "nullable": true
          },
          "has_next": {
            "type": "boolean"
          },
          "next_num": {
            "type": "integer",
            "nullable": true
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Webhook"
            }
          }
        }
      },
      "WebhookResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "status_code": {
            "type": "integer",
            "readOnly": true,
            "nullable": true
          },
          "duration": {
            "type": "integer",
            "readOnly": true,
            "nullable": true
          },
          "payload": {
            "type": "string",
            "readOnly": true,
            "nullable": true
          },
          "urlversion": {
            "readOnly": true
          },
          "signal": {
            "type": "string",
            "readOnly": true,
            "maxLength": 255
          },
          "requested_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "nullable": true
          },
          "headers": {
            "readOnly": true,
            "nullable": true
          }
        },
        "required": [
          "signal"
        ]
      },
      "WebhookCall": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "status": {
            "type": "string",
            "maxLength": 255
          },
          "object_id": {
            "type": "integer",
            "nullable": true
          },
          "object_type": {
            "type": "string",
            "nullable": true,
            "maxLength": 255
          },
          "triggered_signal": {
            "type": "string",
            "nullable": true,
            "maxLength": 255
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "nullable": true
          },
          "webhook": {
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/Webhook"
              }
            ]
          },
          "responses": {
            "readOnly": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WebhookResponse"
            }
          }
        }
      },
      "WebhookCallPagination": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer"
          },
          "has_prev": {
            "type": "boolean"
          },
          "prev_num": {
            "type": "integer",
            "nullable": true
          },
          "has_next": {
            "type": "boolean"
          },
          "next_num": {
            "type": "integer",
            "nullable": true
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WebhookCall"
            }
          }
        }
      },
      "Webpage": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "parent_id": {
            "type": "integer",
            "nullable": true
          },
          "website_id": {
            "type": "integer",
            "nullable": true
          },
          "template_id": {
            "type": "integer",
            "nullable": true
          },
          "order": {
            "type": "integer",
            "nullable": true
          },
          "children": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Webpage"
            }
          },
          "published": {
            "type": "boolean",
            "nullable": true
          },
          "show_in_menu": {
            "enum": [
              "always",
              "authenticated",
              "not_authenticated",
              "not"
            ],
            "nullable": true,
            "maxLength": 17
          },
          "redirect_url": {
            "type": "string",
            "nullable": true,
            "maxLength": 255
          },
          "title": {
            "type": "string",
            "nullable": true,
            "maxLength": 64
          },
          "menu_title": {
            "type": "string",
            "nullable": true,
            "maxLength": 64
          },
          "slug": {
            "type": "string",
            "nullable": true,
            "maxLength": 255
          },
          "url": {
            "type": "string",
            "format": "url"
          }
        }
      },
      "WebpagePagination": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer"
          },
          "has_prev": {
            "type": "boolean"
          },
          "prev_num": {
            "type": "integer",
            "nullable": true
          },
          "has_next": {
            "type": "boolean"
          },
          "next_num": {
            "type": "integer",
            "nullable": true
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Webpage"
            }
          }
        }
      },
      "ContentItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "webpage_id": {
            "type": "integer",
            "nullable": true
          },
          "order": {
            "type": "integer",
            "nullable": true
          },
          "type": {
            "type": "string",
            "maxLength": 16
          },
          "size": {
            "enum": [
              "12",
              "9",
              "8",
              "6",
              "4",
              "3"
            ],
            "maxLength": 2
          },
          "size_percentage": {
            "type": "number"
          },
          "published": {
            "type": "boolean",
            "nullable": true
          },
          "content": {}
        },
        "required": [
          "type"
        ]
      },
      "ContentRow": {
        "type": "object",
        "properties": {
          "order": {
            "type": "integer",
            "readOnly": true
          },
          "content_items": {
            "readOnly": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContentItem"
            }
          }
        }
      },
      "WebpageWithContent": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "parent_id": {
            "type": "integer",
            "nullable": true
          },
          "website_id": {
            "type": "integer",
            "nullable": true
          },
          "template_id": {
            "type": "integer",
            "nullable": true
          },
          "order": {
            "type": "integer",
            "nullable": true
          },
          "children": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Webpage"
            }
          },
          "published": {
            "type": "boolean",
            "nullable": true
          },
          "show_in_menu": {
            "enum": [
              "always",
              "authenticated",
              "not_authenticated",
              "not"
            ],
            "nullable": true,
            "maxLength": 17
          },
          "redirect_url": {
            "type": "string",
            "nullable": true,
            "maxLength": 255
          },
          "title": {
            "type": "string",
            "nullable": true,
            "maxLength": 64
          },
          "menu_title": {
            "type": "string",
            "nullable": true,
            "maxLength": 64
          },
          "slug": {
            "type": "string",
            "nullable": true,
            "maxLength": 255
          },
          "url": {
            "type": "string",
            "format": "url"
          },
          "content_rows": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContentRow"
            }
          }
        }
      },
      "Website": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "readOnly": true,
            "maxLength": 255
          },
          "url": {
            "type": "string",
            "format": "url",
            "readOnly": true
          },
          "active": {
            "type": "boolean",
            "nullable": true
          },
          "locale": {
            "$ref": "#/components/schemas/Locale"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "ga_tracking_id": {
            "type": "string",
            "nullable": true,
            "maxLength": 64
          },
          "custom_domain": {
            "type": "string",
            "nullable": true,
            "maxLength": 255
          },
          "domain_path": {
            "type": "string",
            "nullable": true,
            "maxLength": 128
          },
          "font_base": {
            "type": "string",
            "nullable": true,
            "maxLength": 255
          },
          "font_headings": {
            "type": "string",
            "nullable": true,
            "maxLength": 255
          },
          "color_primary": {
            "type": "string",
            "nullable": true,
            "maxLength": 16
          },
          "color_secondary": {
            "type": "string",
            "nullable": true,
            "maxLength": 16
          },
          "color_background": {
            "type": "string",
            "nullable": true,
            "maxLength": 16
          },
          "template_id": {
            "type": "integer",
            "readOnly": true,
            "nullable": true
          }
        },
        "required": [
          "name"
        ]
      },
      "WebsitePagination": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer"
          },
          "has_prev": {
            "type": "boolean"
          },
          "prev_num": {
            "type": "integer",
            "nullable": true
          },
          "has_next": {
            "type": "boolean"
          },
          "next_num": {
            "type": "integer",
            "nullable": true
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Website"
            }
          }
        }
      }
    },
    "responses": {
      "UNPROCESSABLE_ENTITY": {
        "description": "Unprocessable Entity",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    }
  }
}